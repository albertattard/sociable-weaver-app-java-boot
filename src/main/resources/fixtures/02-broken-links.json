[
  {
    "type": "chapter",
    "id": "0e53ce8f-3523-47c4-ac4c-4cc5173899b7",
    "parameters": [
      "Broken Links"
    ]
  },
  {
    "type": "markdown",
    "id": "f65e39f7-9f48-439b-98b7-67270edf584c",
    "parameters": [
      "Have you ever ask the questions, \"_what constitutes clean code?_\", \"_Why an approach is better than the other?_\", \"_Is",
      "it because someone else prefers that style of programming or is there something else which I don't understand?_\". In",
      "this chapter we will try to provide a less subjective answer to these, and similar, questions.",
      "",
      "Using a simple problem, we will try to solve it using different approaches. We will start with a basic solution and then",
      "will iterate and compare. We will evaluate each approach and determine their respective tradeoffs. While we are still at",
      "the beginning of this book, it is important to understand that there is no right or wrong approach. There are no",
      "absolutes answers, but only tradeoffs. What works well in one case, may not yield the same results in another case. We",
      "will score each approach against a set of criteria and then determine which approach is best for you and for the task at",
      "hand based on the results obtained.",
      "",
      "At the end of this chapter, you will be able to evaluate your programs based on a set of criteria and determine what is",
      "good and what can be better."
    ]
  },
  {
    "type": "section",
    "id": "66859469-b638-4510-88af-3ec0b920358c",
    "parameters": [
      "The Broken Links Problem"
    ]
  },
  {
    "type": "markdown",
    "id": "2563f6b0-95a9-4f01-a31f-37b0c8c48140",
    "parameters": [
      "Jade is a blogger and is curating a popular blog. Jade started noticing that links to other pages tend to break. Jade",
      "believes that the issue of broken links happens due to, either a page is moved to a different location or the page that",
      "the link is referring to does not exists anymore.",
      "",
      "Jade would like to have a program that scans their blog and identify any broken links. A simple program that runs",
      "through the command line and simply prints out the found broken links in their blog would suffice, at least for now.",
      "This program can always be improved later.",
      "",
      "Given a URL, the blog's address on the internet, the program should navigate the blog automatically by simply following",
      "the links found in each page that the program scans. The program should not follow links that do not belong to the blog.",
      "Note that some pages, like the homepage, are linked from many other pages. In the case the program should only scan each",
      "page once. Failing to do so the program may end up in an endless loop."
    ]
  },
  {
    "type": "section",
    "id": "66db2fe7-184f-4273-a600-a8e377536edf",
    "parameters": [
      "First Attempt"
    ]
  },
  {
    "type": "markdown",
    "id": "f22bdd19-cde9-4bc0-8358-83765c8f0673",
    "parameters": [
      "This is a fairly simple problem that should not take more than an hour to finish and not more than 200 lines of code.",
      "",
      "Will use the Java programming language and the Gradle build tool to continue building on the previous section. Other",
      "programming languages, such as [Rust](https://www.rust-lang.org/) or [Go Lang](https://golang.org/), can achieve the",
      "same thing, but I am not as well versed in these programming languages as I am with Java. This does not mean that other",
      "programming languages are inferior to Java. All it means that I am more comfortable working with Java and given that I",
      "have the freedom of picking any programming language I like, I went for Java.",
      "",
      "Later in the book we will cover how to pick a technical stack in a quantitative manner, but for now, we will stick with",
      "Java and Gradle.",
      "",
      "Prior knowledge of Java or Gradle is not required as the subsequent sections provide all the steps required to create",
      "the project and follow along. It is highly recommended following along by trying the examples yourself. To do so, you",
      "need to have the following installed.",
      "",
      "- Java 11 or newer installed",
      "- Git 2.30 or newer installed",
      "- Gradle 7 or newer installed",
      ""
    ]
  },
  {
    "type": "todo",
    "id": "0f299086-66ea-453e-a4a5-8d32ba9983ed",
    "parameters": [
      "Should we move the '_Create Project_' subsection to a section, and move it before the '_First Attempt_' section?",
      "The project setup is independent from the first approach and I think we can move it to its own section."
    ]
  },
  {
    "type": "subsection",
    "id": "27b1b302-3bbd-47e0-9d2d-994120f92d92",
    "parameters": [
      "Create Project"
    ]
  },
  {
    "type": "markdown",
    "id": "57d41efe-6094-4388-8d92-7c07eefa5084",
    "parameters": []
  },
  {
    "type": "command",
    "id": "cdfd7300-48d9-46b7-a85e-cf8abe909da1",
    "name": "Delete directory (if exists)",
    "parameters": [
      "rm",
      "-rf",
      "broken-links"
    ],
    "visible": false
  },
  {
    "type": "command",
    "id": "2a748eb8-7d4c-4ebc-acf3-563d4b3c9459",
    "name": "Create working directory",
    "parameters": [
      "mkdir",
      "broken-links"
    ]
  },
  {
    "type": "command",
    "id": "84ca9e6d-3c05-4b22-850f-f1bda2873104",
    "name": "Create Repository",
    "workingDirectory": "broken-links",
    "parameters": [
      "git",
      "init",
      "-b",
      "main"
    ]
  },
  {
    "type": "command",
    "id": "f9fb93ca-423a-45ea-b55e-10b0fbc1f324",
    "name": "Initialise gradle project",
    "workingDirectory": "broken-links",
    "parameters": [
      "gradle",
      "init",
      "--type",
      "basic",
      "--dsl",
      "groovy",
      "--project-name",
      "broken-links"
    ]
  },
  {
    "type": "git-commit-changes",
    "id": "a0773b19-9060-4503-a6aa-e6aeede2ae00",
    "name": "Commit changes",
    "workingDirectory": "broken-links",
    "parameters": [
      "Start of Setup project",
      "v1.0.0"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "1a90337d-6365-4450-85aa-c3769f6720e9",
    "name": "Organise the gitignore file",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/.gitignore b/.gitignore",
      "index 1b6985c..e5f4349 100644",
      "--- a/.gitignore",
      "+++ b/.gitignore",
      "@@ -1,5 +1,3 @@",
      "-# Ignore Gradle project-specific cache directory",
      "+# Gradle",
      " .gradle",
      "-",
      "-# Ignore Gradle build output directory",
      " build",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "826f48e9-a95c-46b2-9eb1-49eaa985dd39",
    "name": "Ignore IDE file from GIT",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/.gitignore b/.gitignore",
      "index e5f4349..854bcd3 100644",
      "--- a/.gitignore",
      "+++ b/.gitignore",
      "@@ -1,3 +1,6 @@",
      " # Gradle",
      " .gradle",
      " build",
      "+",
      "+# IDE",
      "+/.idea",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "517b61bb-69dc-4faf-840c-c1657d132150",
    "name": "Remove generated comments from build.gradle file",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/build.gradle b/build.gradle",
      "index d52e6ac..e69de29 100644",
      "--- a/build.gradle",
      "+++ b/build.gradle",
      "@@ -1,6 +0,0 @@",
      "-/*",
      "- * This file was generated by the Gradle 'init' task.",
      "- *",
      "- * This is a general purpose Gradle build.",
      "- * Learn more about Gradle by exploring our samples at https://docs.gradle.org/7.1.1/samples",
      "- */",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "f1fdcabe-a51d-40db-937a-af014c8d96d6",
    "name": "Add the application plugin",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/build.gradle b/build.gradle",
      "index e69de29..f408aaa 100644",
      "--- a/build.gradle",
      "+++ b/build.gradle",
      "@@ -0,0 +1,3 @@",
      "+plugins {",
      "+    id \"application\"",
      "+}",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "69d25eb5-5344-42a6-9da6-f476d04972bf",
    "name": "Set the Java version",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/build.gradle b/build.gradle",
      "index f408aaa..38da132 100644",
      "--- a/build.gradle",
      "+++ b/build.gradle",
      "@@ -1,3 +1,10 @@",
      " plugins {",
      "     id \"application\"",
      " }",
      "+",
      "+java {",
      "+    toolchain {",
      "+        languageVersion = JavaLanguageVersion.of(16)",
      "+        vendor = JvmVendorSpec.ADOPTOPENJDK",
      "+    }",
      "+}",
      ""
    ]
  },
  {
    "type": "git-commit-changes",
    "id": "acc1b735-1ba9-4d3d-a8cf-e2e2d15aee5a",
    "name": "Commit changes",
    "workingDirectory": "broken-links",
    "parameters": [
      "Setup project",
      "v1.0.6"
    ]
  },
  {
    "type": "subsection",
    "id": "0d4576fa-954e-4500-b6cc-fe6a0cedc3d7",
    "parameters": [
      "Download a single page"
    ]
  },
  {
    "type": "git-tag-current-commit",
    "id": "01bb0c34-3aad-4d75-b6de-7312e47439e2",
    "name": "Download a single page",
    "workingDirectory": "broken-links",
    "parameters": [
      "v1.1.0",
      "Start of Download a single page"
    ]
  },
  {
    "type": "command",
    "id": "41743a30-46ef-4dde-acb2-c87bdd90aca7",
    "name": "Create source folder",
    "workingDirectory": "broken-links",
    "parameters": [
      "mkdir",
      "-p",
      "src/main/java"
    ]
  },
  {
    "type": "command",
    "id": "9737ac07-3e1a-4dfd-aed6-6d66d4acc6cc",
    "name": "Create package",
    "workingDirectory": "broken-links",
    "parameters": [
      "mkdir",
      "-p",
      "src/main/java/programming"
    ]
  },
  {
    "type": "command",
    "id": "75f74a3e-e5e8-48be-91b0-de503020fc0e",
    "name": "Create source file",
    "workingDirectory": "broken-links",
    "parameters": [
      "touch",
      "src/main/java/programming/BrokenLinks.java"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "2f1d611d-c8dc-4048-91eb-f483a5b6fb68",
    "name": "Add package definition",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index e69de29..d910c24 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -0,0 +1 @@",
      "+package programming;",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "819c8a12-bb26-40a5-84c5-90cfa80545f2",
    "name": "Add class definition",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index d910c24..632e595 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -1 +1,5 @@",
      " package programming;",
      "+",
      "+public class BrokenLinks {",
      "+",
      "+}",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "f2df1104-8b1f-420b-b0bc-5d4403151c60",
    "name": "Add main() method",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index 632e595..ec43436 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -2,4 +2,7 @@ package programming;",
      " ",
      " public class BrokenLinks {",
      " ",
      "+    public static void main(final String[] args) {",
      "+        System.out.println(\"Broken Links!!\");",
      "+    }",
      " }",
      ""
    ]
  },
  {
    "type": "command",
    "id": "af5f5477-5022-4d4c-b38d-50410aebfc09",
    "name": "Run application",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "run"
    ],
    "expectedExitValue": 1
  },
  {
    "type": "git-apply-patch",
    "id": "6025e69e-afbb-4358-9fd2-8876930a5f11",
    "name": "Configure Gradle application plugin",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/build.gradle b/build.gradle",
      "index f408aaa..c650163 100644",
      "--- a/build.gradle",
      "+++ b/build.gradle",
      "@@ -8,3 +8,7 @@",
      "         vendor = JvmVendorSpec.ADOPTOPENJDK",
      "     }",
      " }",
      "+",
      "+application {",
      "+    getMainClass().set(\"programming.BrokenLinks\")",
      "+}",
      ""
    ]
  },
  {
    "type": "command",
    "id": "a206cbbf-14f4-4ab9-8502-a44002a98647",
    "name": "Run application",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "run"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "fe4cc0bc-188b-4811-8adb-f4d7208af3de",
    "name": "Create HTTP Client",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index ec43436..b2bfb8c 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -1,8 +1,15 @@",
      " package programming;",
      " ",
      "+import java.net.http.HttpClient;",
      "+import java.time.Duration;",
      "+",
      " public class BrokenLinks {",
      " ",
      "     public static void main(final String[] args) {",
      "-        System.out.println(\"Broken Links!!\");",
      "+        final HttpClient client = HttpClient.newBuilder()",
      "+                .version(HttpClient.Version.HTTP_1_1)",
      "+                .followRedirects(HttpClient.Redirect.NORMAL)",
      "+                .connectTimeout(Duration.ofSeconds(5))",
      "+                .build();",
      "     }",
      " }",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "e48431e6-006c-49be-968f-24c51f14300b",
    "name": "Create HTTP Request",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index b2bfb8c..e69af2e 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -1,6 +1,8 @@",
      " package programming;",
      " ",
      "+import java.net.URI;",
      " import java.net.http.HttpClient;",
      "+import java.net.http.HttpRequest;",
      " import java.time.Duration;",
      " ",
      " public class BrokenLinks {",
      "@@ -11,5 +13,11 @@ public class BrokenLinks {",
      "                 .followRedirects(HttpClient.Redirect.NORMAL)",
      "                 .connectTimeout(Duration.ofSeconds(5))",
      "                 .build();",
      "+",
      "+        final String pageLink = \"https://albertattard.github.io/quickhacks/\";",
      "+        final HttpRequest request = HttpRequest.newBuilder()",
      "+                .uri(URI.create(pageLink))",
      "+                .timeout(Duration.ofSeconds(5))",
      "+                .build();",
      "     }",
      " }",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "83e0e9ee-91e8-48e8-8224-9ae296067dba",
    "name": "Make the HTTP request",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index e69af2e..bf24238 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -1,13 +1,15 @@",
      " package programming;",
      " ",
      "+import java.io.IOException;",
      " import java.net.URI;",
      " import java.net.http.HttpClient;",
      " import java.net.http.HttpRequest;",
      "+import java.net.http.HttpResponse;",
      " import java.time.Duration;",
      " ",
      " public class BrokenLinks {",
      " ",
      "-    public static void main(final String[] args) {",
      "+    public static void main(final String[] args) throws IOException, InterruptedException {",
      "         final HttpClient client = HttpClient.newBuilder()",
      "                 .version(HttpClient.Version.HTTP_1_1)",
      "                 .followRedirects(HttpClient.Redirect.NORMAL)",
      "@@ -19,5 +21,8 @@ public class BrokenLinks {",
      "                 .uri(URI.create(pageLink))",
      "                 .timeout(Duration.ofSeconds(5))",
      "                 .build();",
      "+",
      "+        final HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());",
      "+        System.out.println(response.body());",
      "     }",
      " }",
      ""
    ]
  },
  {
    "type": "command",
    "id": "1c7a8677-8dd5-44c3-ba0f-b53dc49e8e93",
    "name": "Run application",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "run"
    ]
  },
  {
    "type": "git-commit-changes",
    "id": "88098b3f-0740-4f68-8156-e71b66894ab7",
    "name": "Commit changes",
    "workingDirectory": "broken-links",
    "parameters": [
      "Download a single page",
      "v1.1.7"
    ]
  },
  {
    "type": "subsection",
    "id": "ac4f990c-fdd3-4c31-8dc6-ded3cc99964c",
    "parameters": [
      "Parse Links Found in Page"
    ]
  },
  {
    "type": "git-tag-current-commit",
    "id": "6e7399df-001b-4632-8b47-24d67e47864f",
    "name": "Parse Links Found in Page",
    "workingDirectory": "broken-links",
    "parameters": [
      "v1.2.0",
      "Start of Parse Links Found in Page"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "f858bd62-5664-4431-8102-a0e0f5064c16",
    "name": "Configure Gradle repositories",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/build.gradle b/build.gradle",
      "index c650163..ca16e57 100644",
      "--- a/build.gradle",
      "+++ b/build.gradle",
      "@@ -12,3 +12,7 @@ plugins {",
      " application {",
      "     getMainClass().set(\"programming.BrokenLinks\")",
      " }",
      "+",
      "+repositories {",
      "+    mavenCentral()",
      "+}",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "a36e07aa-d20e-4ba1-b149-d2437d450e3e",
    "name": "Add the JSoup dependency",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/build.gradle b/build.gradle",
      "index ca16e57..7acf42b 100644",
      "--- a/build.gradle",
      "+++ b/build.gradle",
      "@@ -16,3 +16,8 @@ application {",
      " repositories {",
      "     mavenCentral()",
      " }",
      "+",
      "+dependencies {",
      "+    /* Parsing Links */",
      "+    implementation \"org.jsoup:jsoup:1.14.1\"",
      "+}",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "47f04136-ba02-4a88-91ef-dd0709e38c06",
    "name": "Parse Links Found in Page",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index bf24238..95860f3 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -7,6 +7,10 @@ import java.net.http.HttpRequest;",
      " import java.net.http.HttpResponse;",
      " import java.time.Duration;",
      " ",
      "+import org.jsoup.Jsoup;",
      "+import org.jsoup.nodes.Document;",
      "+import org.jsoup.nodes.Element;",
      "+",
      " public class BrokenLinks {",
      " ",
      "     public static void main(final String[] args) throws IOException, InterruptedException {",
      "@@ -24,5 +28,11 @@ public class BrokenLinks {",
      " ",
      "         final HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());",
      "         System.out.println(response.body());",
      "+",
      "+        System.out.println(\"Found the following links:\");",
      "+        final Document document = Jsoup.parse(response.body());",
      "+        for (final Element a : document.select(\"a[href]\")) {",
      "+            System.out.printf(\"  > %s%n\", a.attr(\"href\"));",
      "+        }",
      "     }",
      " }",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "af51e2b1-50fa-4316-bb25-b60ff45dd538",
    "parameters": [
      "We don't need to print the response to the standard output anymore. Instead, we will print the list of links that the",
      "Jsoup library returned.",
      "",
      "With the risk of repeating myself, here we are relying on the standard output to assert whether our program is behaving",
      "as expected. This does not scale as the program grows. Simply note that if we had to keep both prints, the response",
      "received from the webserver and the list of links returned by the Jsoup library, we would have two things to manually",
      "assert. Image a program with hundreds, if not thousands of features. How would you manually assert that all works well",
      "before a release? Manual assertions do not scale. We will come to this later on."
    ]
  },
  {
    "type": "command",
    "id": "3896077f-655d-4824-ab2c-9ce5849ad266",
    "name": "Run project",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "run"
    ]
  },
  {
    "type": "markdown",
    "id": "9c1e776e-69d4-429e-a69b-fcfa6aed9cde",
    "parameters": [
      "The program will download the page and then parse the HTML response returned by the webserver. The `a` elements that",
      "have the `href` attribute are selected and then printed to the standard output. The program will print a list of links",
      "similar to the one shown next.",
      "",
      "```console",
      "...",
      "  > https://hub.docker.com/search?type=image",
      "  > https://github.com/albertattard/quickhacks-source",
      "  > #quickhacks",
      "  > https://www.cyberpunk.net/",
      "  > https://cyberpunk.fandom.com/wiki/Netrunner",
      "  > https://opensource.org/licenses/Apache-2.0",
      "",
      "BUILD SUCCESSFUL in 2s",
      "2 actionable tasks: 2 executed",
      "```",
      "",
      "Fantastic! The program is shaping up nicely. Let's commit the changes and tag them for future reference."
    ]
  },
  {
    "type": "git-commit-changes",
    "id": "9c49aa24-b7e9-4da5-ad62-f53e627d01f0",
    "name": "Commit changes",
    "workingDirectory": "broken-links",
    "parameters": [
      "Parse Links Found in Page",
      "v1.2.3"
    ]
  },
  {
    "type": "subsection",
    "id": "d8491b2d-e8f0-4029-8ed3-a2d55a4146ab",
    "parameters": [
      "Determine if Link is Broken"
    ]
  },
  {
    "type": "git-tag-current-commit",
    "id": "b7359ac4-92d8-48e0-840b-bc131b65559b",
    "name": "Determine if Link is Broken",
    "workingDirectory": "broken-links",
    "parameters": [
      "v1.3.0",
      "Start of Determine if Link is Broken"
    ]
  },
  {
    "type": "markdown",
    "id": "dc679c9b-a97d-415e-b3b5-52bd82e82f80",
    "parameters": [
      "Now that our program is able to fetch one page and retrieves all links found in that page, it is a good time to",
      "determine whether a link is broken or not. When we make a request to a page that does not exists, such",
      "as `https://albertattard.github.io/quickhacks/some-page-that-does-not-exists`, the webserver will return",
      "an [HTTP status of 404](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404), indicating that the page, or",
      "resource, being fetched does not exist",
      "",
      "There are other HTTP status indicating different errors. These are categorized into two groups,",
      "the [4xx](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#client_error_responses)",
      "and [5xx](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#server_error_responses) groups. The `4xx` group",
      "indicates that the client made a bad request, for example trying to open a webpage that does not exists which will get",
      "you a `404`. On the other hand, if the webserver encounters an unexpected error, a `5xx` status is returned to indicate",
      "that the server encountered an error.",
      "",
      "To keep our program simple, we consider a link as broken if the status returned by the webserver is `400` or greater."
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "d30f9997-69bc-45d7-ad23-0ff5100e0b9d",
    "name": "Print HTTP Status Code",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index 95860f3..12d22f4 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -27,7 +27,7 @@ public class BrokenLinks {",
      "                 .build();",
      " ",
      "         final HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());",
      "-        System.out.println(response.body());",
      "+        System.out.printf(\"Response status %d%n\", response.statusCode());",
      " ",
      "         System.out.println(\"Found the following links:\");",
      "         final Document document = Jsoup.parse(response.body());",
      ""
    ]
  },
  {
    "type": "command",
    "id": "1f1263ba-c05e-447a-9c36-8b9b356c4915",
    "name": "Run project",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "run"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "bbd9ffa0-b0a7-48c7-9fea-54f001f4eb53",
    "name": "Try out a broken link",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index 12d22f4..2b97523 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -20,7 +20,7 @@ public class BrokenLinks {",
      "                 .connectTimeout(Duration.ofSeconds(5))",
      "                 .build();",
      " ",
      "-        final String pageLink = \"https://albertattard.github.io/quickhacks/\";",
      "+        final String pageLink = \"https://albertattard.github.io/quickhacks/some-page-that-does-not-exists\";",
      "         final HttpRequest request = HttpRequest.newBuilder()",
      "                 .uri(URI.create(pageLink))",
      "                 .timeout(Duration.ofSeconds(5))",
      ""
    ]
  },
  {
    "type": "command",
    "id": "5822b3d9-4c8a-4a80-9732-a00623b95b68",
    "name": "Run project",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "run"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "1d26a9f7-5188-4133-b82c-f4993411218e",
    "name": "Handle broken links",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index 2b97523..6d6cf92 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -27,7 +27,10 @@ public class BrokenLinks {",
      "                 .build();",
      " ",
      "         final HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());",
      "-        System.out.printf(\"Response status %d%n\", response.statusCode());",
      "+        if (response.statusCode() != 200) {",
      "+            System.out.printf(\"Broken link: %s%n\", pageLink);",
      "+            return;",
      "+        }",
      " ",
      "         System.out.println(\"Found the following links:\");",
      "         final Document document = Jsoup.parse(response.body());",
      ""
    ]
  },
  {
    "type": "command",
    "id": "3955cc79-4433-45e0-a7d3-ba7cf8cced48",
    "name": "Run project",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "run"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "d63d8e9d-f8ad-4b97-a275-e343ccffcdd3",
    "name": "Try the new code with a good link",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index 6d6cf92..8c7f569 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -20,7 +20,7 @@ public class BrokenLinks {",
      "                 .connectTimeout(Duration.ofSeconds(5))",
      "                 .build();",
      " ",
      "-        final String pageLink = \"https://albertattard.github.io/quickhacks/some-page-that-does-not-exists\";",
      "+        final String pageLink = \"https://albertattard.github.io/quickhacks/\";",
      "         final HttpRequest request = HttpRequest.newBuilder()",
      "                 .uri(URI.create(pageLink))",
      "                 .timeout(Duration.ofSeconds(5))",
      ""
    ]
  },
  {
    "type": "command",
    "id": "1cafc74f-9fe7-4dd0-980b-e32608658d4c",
    "name": "Run project",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "run"
    ]
  },
  {
    "type": "git-commit-changes",
    "id": "e96e50b1-ac65-4df7-a5d8-dc499579d1cd",
    "name": "Commit changes",
    "workingDirectory": "broken-links",
    "parameters": [
      "Determine if Link is Broken",
      "v1.3.4"
    ]
  },
  {
    "type": "subsection",
    "id": "caf84aa8-2583-487e-a2ef-b543ca30b47a",
    "parameters": [
      "Introduce a Loop to Navigate Throughout the Website"
    ]
  },
  {
    "type": "git-tag-current-commit",
    "id": "39217c61-f774-46b6-9176-9674e1d1e808",
    "name": "Introduce a Loop to Navigate Throughout the Website",
    "workingDirectory": "broken-links",
    "parameters": [
      "v1.4.0",
      "Start of Introduce a Loop to Navigate Throughout the Website"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "004cc6a4-803a-47c8-9d96-c9a171b9a984",
    "name": "Create a list of pending links",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index 8c7f569..b08a02f 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -6,6 +6,8 @@ import java.net.http.HttpClient;",
      " import java.net.http.HttpRequest;",
      " import java.net.http.HttpResponse;",
      " import java.time.Duration;",
      "+import java.util.ArrayList;",
      "+import java.util.List;",
      " ",
      " import org.jsoup.Jsoup;",
      " import org.jsoup.nodes.Document;",
      "@@ -21,6 +23,10 @@ public class BrokenLinks {",
      "                 .build();",
      " ",
      "         final String pageLink = \"https://albertattard.github.io/quickhacks/\";",
      "+",
      "+        final List<String> pending = new ArrayList<>();",
      "+        pending.add(pageLink);",
      "+",
      "         final HttpRequest request = HttpRequest.newBuilder()",
      "                 .uri(URI.create(pageLink))",
      "                 .timeout(Duration.ofSeconds(5))",
      ""
    ]
  },
  {
    "type": "command",
    "id": "4db969bd-5810-4194-97de-4c7474cdddf5",
    "name": "Run project",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "run"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "404173c1-7f6a-4c39-9986-e777d73cca46",
    "name": "Download the next pending link",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index b08a02f..93b4f7f 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -27,8 +27,10 @@ public class BrokenLinks {",
      "         final List<String> pending = new ArrayList<>();",
      "         pending.add(pageLink);",
      " ",
      "+        final String nextLink = pending.remove(0);",
      "+",
      "         final HttpRequest request = HttpRequest.newBuilder()",
      "-                .uri(URI.create(pageLink))",
      "+                .uri(URI.create(nextLink))",
      "                 .timeout(Duration.ofSeconds(5))",
      "                 .build();",
      " ",
      ""
    ]
  },
  {
    "type": "command",
    "id": "d84850fb-40b5-4047-bdfa-eae4bf2f4e4b",
    "name": "Run project",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "run"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "3ad84219-dc39-474f-9c51-8084d9e4a719",
    "name": "Report the correct broken link",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index 93b4f7f..c23d7f5 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -36,7 +36,7 @@ public class BrokenLinks {",
      " ",
      "         final HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());",
      "         if (response.statusCode() != 200) {",
      "-            System.out.printf(\"Broken link: %s%n\", pageLink);",
      "+            System.out.printf(\"Broken link: %s%n\", nextLink);",
      "             return;",
      "         }",
      " ",
      ""
    ]
  },
  {
    "type": "command",
    "id": "e940d174-10f1-4381-b253-1003f40d3d56",
    "name": "Run project",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "run"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "0e3f54f4-8074-4442-8dd8-091dc9c37a3e",
    "name": "Download all pending links",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index 447d125..9492601 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -27,23 +27,25 @@ public class BrokenLinks {",
      "         final List<String> pending = new ArrayList<>();",
      "         pending.add(pageLink);",
      " ",
      "-        final String nextLink = pending.remove(0);",
      "-",
      "-        final HttpRequest request = HttpRequest.newBuilder()",
      "-                .uri(URI.create(nextLink))",
      "-                .timeout(Duration.ofSeconds(5))",
      "-                .build();",
      "-",
      "-        final HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());",
      "-        if (response.statusCode() != 200) {",
      "-            System.out.printf(\"Broken link: %s%n\", nextLink);",
      "-            return;",
      "-        }",
      "-",
      "-        System.out.println(\"Found the following links:\");",
      "-        final Document document = Jsoup.parse(response.body());",
      "-        for (final Element a : document.select(\"a[href]\")) {",
      "-            System.out.printf(\"  > %s%n\", a.attr(\"href\"));",
      "-        }",
      "+        do {",
      "+            final String nextLink = pending.remove(0);",
      "+",
      "+            final HttpRequest request = HttpRequest.newBuilder()",
      "+                    .uri(URI.create(nextLink))",
      "+                    .timeout(Duration.ofSeconds(5))",
      "+                    .build();",
      "+",
      "+            final HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());",
      "+            if (response.statusCode() != 200) {",
      "+                System.out.printf(\"Broken link: %s%n\", nextLink);",
      "+                return;",
      "+            }",
      "+",
      "+            System.out.println(\"Found the following links:\");",
      "+            final Document document = Jsoup.parse(response.body());",
      "+            for (final Element a : document.select(\"a[href]\")) {",
      "+                System.out.printf(\"  > %s%n\", a.attr(\"href\"));",
      "+            }",
      "+        } while (pending.isEmpty() == false);",
      "     }",
      " }",
      ""
    ]
  },
  {
    "type": "command",
    "id": "d6a2424d-8b2f-40e0-b8b7-b4fc716648a5",
    "name": "Run project",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "run"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "cfb0260a-67ff-4456-b99d-5f87da16d8a4",
    "name": "Skip broken links instead of exit",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index 9492601..a2ab184 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -38,7 +38,7 @@ public class BrokenLinks {",
      "             final HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());",
      "             if (response.statusCode() != 200) {",
      "                 System.out.printf(\"Broken link: %s%n\", nextLink);",
      "-                return;",
      "+                continue;",
      "             }",
      " ",
      "             System.out.println(\"Found the following links:\");",
      ""
    ]
  },
  {
    "type": "command",
    "id": "872fd49c-5d54-458b-97e6-50b94ed4897b",
    "name": "Run project",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "run"
    ]
  },
  {
    "type": "git-commit-changes",
    "id": "9ef19588-0b4a-4c7f-a2e1-43c7d11ded1a",
    "name": "Commit changes",
    "workingDirectory": "broken-links",
    "parameters": [
      "Introduce a Loop to Navigate Throughout the Website",
      "v1.4.6"
    ]
  },
  {
    "type": "subsection",
    "id": "d35ec022-bc0d-4e81-88e5-e1b99b185ca6",
    "parameters": [
      "Filter Absolute Links"
    ]
  },
  {
    "type": "git-tag-current-commit",
    "id": "df316596-f18a-4a36-8bc6-8edc051644d9",
    "name": "Filter Absolute Links",
    "workingDirectory": "broken-links",
    "parameters": [
      "v1.5.0",
      "Start of Filter Absolute Links"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "f6da0873-2b2c-4001-9610-59a115f189a7",
    "name": "Filter absolute links",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index e0079ad..2d4ff14 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -43,7 +43,7 @@ public class BrokenLinks {",
      " ",
      "             System.out.println(\"Found the following links:\");",
      "             final Document document = Jsoup.parse(response.body());",
      "-            for (final Element a : document.select(\"a[href]\")) {",
      "+            for (final Element a : document.select(\"a[href~=http(s|)://.+]\")) {",
      "                 System.out.printf(\"  > %s%n\", a.attr(\"href\"));",
      "             }",
      "         } while (pending.isEmpty() == false);",
      ""
    ]
  },
  {
    "type": "command",
    "id": "dc4d957b-d4cc-4050-b9ad-7168363dd6c8",
    "name": "Run project",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "run"
    ]
  },
  {
    "type": "git-commit-changes",
    "id": "a7fcdb77-396d-4d39-9d69-e841eb38e003",
    "name": "Commit changes",
    "workingDirectory": "broken-links",
    "parameters": [
      "Filter absolute links",
      "v1.5.1"
    ]
  },
  {
    "type": "subsection",
    "id": "c2be5152-a97d-4cd3-bc07-b7b8686fb377",
    "parameters": [
      "Do Not Follow External Links"
    ]
  },
  {
    "type": "git-tag-current-commit",
    "id": "0546380b-a374-4766-8c22-0983fdf00d37",
    "name": "Do Not Follow External Links",
    "workingDirectory": "broken-links",
    "parameters": [
      "v1.6.0",
      "Start of Do Not Follow External Links"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "d869cd76-4677-4651-9a3b-a403351ac055",
    "name": "Do not parse external links",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index 2d4ff14..b0d417f 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -41,6 +41,11 @@ public class BrokenLinks {",
      "                 continue;",
      "             }",
      " ",
      "+            if (nextLink.startsWith(pageLink) == false) {",
      "+                System.out.printf(\"Will not follow link: %s%n\", nextLink);",
      "+                continue;",
      "+            }",
      "+",
      "             System.out.println(\"Found the following links:\");",
      "             final Document document = Jsoup.parse(response.body());",
      "             for (final Element a : document.select(\"a[href~=http(s|)://.+]\")) {",
      ""
    ]
  },
  {
    "type": "command",
    "id": "4bcfbc59-bdc7-4bb2-a3ca-2361e318ff0c",
    "name": "Run project",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "run"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "c8db5af2-bdef-43a7-9fd5-76389cfc12f2",
    "name": "Add a comment",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index b0d417f..16edbaa 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -41,6 +41,8 @@ public class BrokenLinks {",
      "                 continue;",
      "             }",
      " ",
      "+            /* We only need to check that links to other sites work, but we don't need to follow them.",
      "+                Thus we don't have to parse them. */",
      "             if (nextLink.startsWith(pageLink) == false) {",
      "                 System.out.printf(\"Will not follow link: %s%n\", nextLink);",
      "                 continue;",
      ""
    ]
  },
  {
    "type": "command",
    "id": "5e4edcb5-f03d-41e1-85a6-d9f8d79dba93",
    "name": "Run project",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "run"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "c7965cd2-4259-4768-8837-01d961d8ccf6",
    "name": "Try it out with an external link",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index 16edbaa..7b94c03 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -25,7 +25,7 @@ public class BrokenLinks {",
      "         final String pageLink = \"https://albertattard.github.io/quickhacks/\";",
      " ",
      "         final List<String> pending = new ArrayList<>();",
      "-        pending.add(pageLink);",
      "+        pending.add(\"https://mvnrepository.com/\");",
      " ",
      "         do {",
      "             final String nextLink = pending.remove(0);",
      ""
    ]
  },
  {
    "type": "command",
    "id": "7caa5f03-a834-49fc-865c-f249c4b14eae",
    "name": "Run project",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "run"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "a3d30003-0f48-46d2-836d-5c21adcf79a5",
    "name": "Rollback to the proper link",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index 7b94c03..16edbaa 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -25,7 +25,7 @@ public class BrokenLinks {",
      "         final String pageLink = \"https://albertattard.github.io/quickhacks/\";",
      " ",
      "         final List<String> pending = new ArrayList<>();",
      "-        pending.add(\"https://mvnrepository.com/\");",
      "+        pending.add(pageLink);",
      " ",
      "         do {",
      "             final String nextLink = pending.remove(0);",
      ""
    ]
  },
  {
    "type": "command",
    "id": "5bae0080-4b14-4e82-ad7b-108576f6ed1b",
    "name": "Run project",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "run"
    ]
  },
  {
    "type": "git-commit-changes",
    "id": "39f1ff0c-060c-4858-953c-0331d4554c82",
    "name": "Commit changes",
    "workingDirectory": "broken-links",
    "parameters": [
      "Do not follow external links",
      "v1.6.4"
    ]
  },
  {
    "type": "subsection",
    "id": "e6e24d33-3c02-4324-acf6-4b533295492e",
    "parameters": [
      "Search the Whole the Website"
    ]
  },
  {
    "type": "git-tag-current-commit",
    "id": "8489946a-0156-4231-b6a2-85c1bee4db1d",
    "name": "Search the Whole the Website",
    "workingDirectory": "broken-links",
    "parameters": [
      "v1.7.0",
      "Start of Search the Whole the Website"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "ed4ae12b-08a0-4abd-8edf-4f1ccecce350",
    "name": "Create a set to store all queued links",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index 96e905d..11bae7a 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -7,7 +7,9 @@ import java.net.http.HttpRequest;",
      " import java.net.http.HttpResponse;",
      " import java.time.Duration;",
      " import java.util.ArrayList;",
      "+import java.util.HashSet;",
      " import java.util.List;",
      "+import java.util.Set;",
      " ",
      " import org.jsoup.Jsoup;",
      " import org.jsoup.nodes.Document;",
      "@@ -27,6 +29,9 @@ public class BrokenLinks {",
      "         final List<String> pending = new ArrayList<>();",
      "         pending.add(pageLink);",
      " ",
      "+        final Set<String> queued = new HashSet<>();",
      "+        queued.add(pageLink);",
      "+",
      "         do {",
      "             final String nextLink = pending.remove(0);",
      " ",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "950d8b68-1381-488b-aa7d-4fc83b627bdd",
    "name": "Update log message",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index 11bae7a..0103e1d 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -53,7 +53,7 @@ public class BrokenLinks {",
      "                 continue;",
      "             }",
      " ",
      "-            System.out.println(\"Found the following links:\");",
      "+            System.out.printf(\"Following link: %s%n\", nextLink);",
      "             final Document document = Jsoup.parse(response.body());",
      "             for (final Element a : document.select(\"a[href~=http(s|)://.+]\")) {",
      "                 System.out.printf(\"  > %s%n\", a.attr(\"href\"));",
      ""
    ]
  },
  {
    "type": "command",
    "id": "efae426a-068d-4dfe-ad1a-e31d428a7d1a",
    "name": "Run project",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "run"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "2fcc9487-e9e3-48c6-9fb2-4318ae8a8467",
    "name": "Get the link",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index 0103e1d..d443dba 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -56,7 +56,7 @@ public class BrokenLinks {",
      "             System.out.printf(\"Following link: %s%n\", nextLink);",
      "             final Document document = Jsoup.parse(response.body());",
      "             for (final Element a : document.select(\"a[href~=http(s|)://.+]\")) {",
      "-                System.out.printf(\"  > %s%n\", a.attr(\"href\"));",
      "+                final String link = a.attr(\"href\");",
      "             }",
      "         } while (pending.isEmpty() == false);",
      "     }",
      ""
    ]
  },
  {
    "type": "command",
    "id": "ebd9b139-1f07-4dd8-90a3-7ca3548637f0",
    "name": "Run project",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "run"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "2d83d310-0be0-49a1-b9a7-41b9d2f287d7",
    "name": "Add the link to pending list if not yet visited",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index d443dba..f67a728 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -57,6 +57,9 @@ public class BrokenLinks {",
      "             final Document document = Jsoup.parse(response.body());",
      "             for (final Element a : document.select(\"a[href~=http(s|)://.+]\")) {",
      "                 final String link = a.attr(\"href\");",
      "+                if (queued.add(link)) {",
      "+                    pending.add(link);",
      "+                }",
      "             }",
      "         } while (pending.isEmpty() == false);",
      "     }",
      ""
    ]
  },
  {
    "type": "command",
    "id": "f8f506bc-4fb5-416f-bd70-d98d96b969a5",
    "name": "Run project",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "run"
    ],
    "dryRun": true
  },
  {
    "type": "git-commit-changes",
    "id": "a27dd83d-5438-480d-b54c-d5df9179595d",
    "name": "Commit changes",
    "workingDirectory": "broken-links",
    "parameters": [
      "Search the whole the website",
      "v1.7.4"
    ]
  },
  {
    "type": "subsection",
    "id": "df3f5ad1-ffe4-45cb-99cd-5a96e7cebdf1",
    "parameters": [
      "Print Summary"
    ]
  },
  {
    "type": "git-tag-current-commit",
    "id": "ff9d64af-6f24-4939-b69a-9d6065e1f2d2",
    "name": "Print Summary",
    "workingDirectory": "broken-links",
    "parameters": [
      "v1.8.0",
      "Start of Print Summary"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "4ea3daf6-ea9e-46e5-b472-f9820db0a756",
    "name": "Create variables",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index f67a728..028b0a8 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -32,6 +32,9 @@ public class BrokenLinks {",
      "         final Set<String> queued = new HashSet<>();",
      "         queued.add(pageLink);",
      " ",
      "+        int testedLinks = 0;",
      "+        int brokenLinks = 0;",
      "+",
      "         do {",
      "             final String nextLink = pending.remove(0);",
      " ",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "f67a517c-bed3-49a3-9a2c-20de4bd900be",
    "name": "Increment tested links",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index 028b0a8..87a6351 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -44,6 +44,8 @@ public class BrokenLinks {",
      "                     .build();",
      " ",
      "             final HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());",
      "+",
      "+            testedLinks++;",
      "             if (response.statusCode() != 200) {",
      "                 System.out.printf(\"Broken link: %s%n\", nextLink);",
      "                 continue;",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "703a7a81-487e-4a5f-b1a4-666baf919b2c",
    "name": "Increment broken links",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index 87a6351..09d053d 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -47,6 +47,7 @@ public class BrokenLinks {",
      " ",
      "             testedLinks++;",
      "             if (response.statusCode() != 200) {",
      "+                brokenLinks++;",
      "                 System.out.printf(\"Broken link: %s%n\", nextLink);",
      "                 continue;",
      "             }",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "6c00c4e3-5384-4d74-83ae-e72da9a6761c",
    "name": "Print summary",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index 09d053d..c7498ca 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -68,5 +68,7 @@ public class BrokenLinks {",
      "                 }",
      "             }",
      "         } while (pending.isEmpty() == false);",
      "+",
      "+        System.out.printf(\"Found %d broken links out of %d tested links at %s%n\", brokenLinks, testedLinks, pageLink);",
      "     }",
      " }",
      ""
    ]
  },
  {
    "type": "command",
    "id": "125513f6-438c-4f1b-a1c4-18a62128d0fd",
    "name": "Run project",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "run"
    ],
    "dryRun": true
  },
  {
    "type": "git-commit-changes",
    "id": "afe306d8-3051-4551-b70a-1f0381ebbc5c",
    "name": "Commit changes",
    "workingDirectory": "broken-links",
    "parameters": [
      "Print summary",
      "v1.9.4"
    ]
  },
  {
    "type": "todo",
    "id": "260cb01b-ae6f-4afb-a482-370a10f35631",
    "parameters": [
      "Consider the following links, how many times the page link `https://mywebsite/page` will be visited?",
      "- `https://mywebsite/page#anchor-1`",
      "- `https://mywebsite/page#anchor-2`",
      "- `https://mywebsite/page#anchor-N`"
    ]
  },
  {
    "type": "section",
    "id": "9876d907-16ec-480c-97bd-64c9e4dd8c39",
    "parameters": [
      "Take 2"
    ]
  },
  {
    "type": "subsection",
    "id": "4960482c-ed20-4b31-bb62-d931af6dc61d",
    "parameters": [
      "Reset project"
    ]
  },
  {
    "type": "git-tag-current-commit",
    "id": "43789acf-faad-4396-b795-d673a3ec073d",
    "name": "Reset project",
    "workingDirectory": "broken-links",
    "parameters": [
      "v2.0.0",
      "Start of Reset project"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "36165cd3-a32c-479f-88f5-e2b0eac8c78b",
    "name": "Clear work",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index c7498ca..5027ec9 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -1,74 +1,8 @@",
      " package programming;",
      " ",
      "-import java.io.IOException;",
      "-import java.net.URI;",
      "-import java.net.http.HttpClient;",
      "-import java.net.http.HttpRequest;",
      "-import java.net.http.HttpResponse;",
      "-import java.time.Duration;",
      "-import java.util.ArrayList;",
      "-import java.util.HashSet;",
      "-import java.util.List;",
      "-import java.util.Set;",
      "-",
      "-import org.jsoup.Jsoup;",
      "-import org.jsoup.nodes.Document;",
      "-import org.jsoup.nodes.Element;",
      "-",
      " public class BrokenLinks {",
      " ",
      "-    public static void main(final String[] args) throws IOException, InterruptedException {",
      "-        final HttpClient client = HttpClient.newBuilder()",
      "-                .version(HttpClient.Version.HTTP_1_1)",
      "-                .followRedirects(HttpClient.Redirect.NORMAL)",
      "-                .connectTimeout(Duration.ofSeconds(5))",
      "-                .build();",
      "-",
      "-        final String pageLink = \"https://albertattard.github.io/quickhacks/\";",
      "-",
      "-        final List<String> pending = new ArrayList<>();",
      "-        pending.add(pageLink);",
      "-",
      "-        final Set<String> queued = new HashSet<>();",
      "-        queued.add(pageLink);",
      "-",
      "-        int testedLinks = 0;",
      "-        int brokenLinks = 0;",
      "-",
      "-        do {",
      "-            final String nextLink = pending.remove(0);",
      "-",
      "-            final HttpRequest request = HttpRequest.newBuilder()",
      "-                    .uri(URI.create(nextLink))",
      "-                    .timeout(Duration.ofSeconds(5))",
      "-                    .build();",
      "-",
      "-            final HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());",
      "-",
      "-            testedLinks++;",
      "-            if (response.statusCode() != 200) {",
      "-                brokenLinks++;",
      "-                System.out.printf(\"Broken link: %s%n\", nextLink);",
      "-                continue;",
      "-            }",
      "-",
      "-            /* We only need to check that links to other sites work, but we don't need to follow them.",
      "-                Thus we don't have to parse them. */",
      "-            if (nextLink.startsWith(pageLink) == false) {",
      "-                System.out.printf(\"Will not follow link: %s%n\", nextLink);",
      "-                continue;",
      "-            }",
      "-",
      "-            System.out.printf(\"Following link: %s%n\", nextLink);",
      "-            final Document document = Jsoup.parse(response.body());",
      "-            for (final Element a : document.select(\"a[href~=http(s|)://.+]\")) {",
      "-                final String link = a.attr(\"href\");",
      "-                if (queued.add(link)) {",
      "-                    pending.add(link);",
      "-                }",
      "-            }",
      "-        } while (pending.isEmpty() == false);",
      "-",
      "-        System.out.printf(\"Found %d broken links out of %d tested links at %s%n\", brokenLinks, testedLinks, pageLink);",
      "+    public static void main(final String[] args) {",
      "+        System.out.println(\"Broken Links - Take 2!!\");",
      "     }",
      " }",
      ""
    ]
  },
  {
    "type": "command",
    "id": "09e9c92f-52d3-4683-a7b6-381fcd300005",
    "name": "Run project",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "run"
    ]
  },
  {
    "type": "git-commit-changes",
    "id": "d851b353-2608-45ec-99f4-6fbca1c404ae",
    "name": "Reset project",
    "workingDirectory": "broken-links",
    "parameters": [
      "Reset project",
      "v2.0.1"
    ]
  },
  {
    "type": "subsection",
    "id": "685ca758-4a14-4a07-ac9b-10d890b879d3",
    "parameters": [
      "Create Broken Link Test Class"
    ]
  },
  {
    "type": "git-tag-current-commit",
    "id": "37831b30-5b74-4a72-8b88-2f148a450935",
    "name": "Create Broken Link Test Class",
    "workingDirectory": "broken-links",
    "parameters": [
      "v2.1.0",
      "Start of Create Broken Link Test Class"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "e197885e-ffbd-47e6-8d0a-049994690a8f",
    "name": "Add JUnit dependency",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/build.gradle b/build.gradle",
      "index 34d1627..de22671 100644",
      "--- a/build.gradle",
      "+++ b/build.gradle",
      "@@ -20,4 +20,7 @@ repositories {",
      " dependencies {",
      "     /* Parsing Links */",
      "     implementation \"org.jsoup:jsoup:1.14.1\"",
      "+",
      "+    /* Testing */",
      "+    testImplementation \"org.junit.jupiter:junit-jupiter:5.7.2\"",
      " }",
      ""
    ]
  },
  {
    "type": "command",
    "id": "faa2ba44-32ed-458d-bfbb-34746bb479ed",
    "name": "Create test folder",
    "workingDirectory": "broken-links",
    "parameters": [
      "mkdir",
      "-p",
      "src/test/java"
    ]
  },
  {
    "type": "command",
    "id": "ddcee959-32ae-4580-8c4f-189ef5786cef",
    "name": "Create test package",
    "workingDirectory": "broken-links",
    "parameters": [
      "mkdir",
      "-p",
      "src/test/java/programming"
    ]
  },
  {
    "type": "command",
    "id": "6ed2301f-7b5d-45b8-82d4-8e29781b21e7",
    "name": "Create test file",
    "workingDirectory": "broken-links",
    "parameters": [
      "touch",
      "src/test/java/programming/BrokenLinksTest.java"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "76e58954-e07f-4089-8c5f-489026664bea",
    "name": "Add test package",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/BrokenLinksTest.java b/src/test/java/programming/BrokenLinksTest.java",
      "index e69de29..d910c24 100644",
      "--- a/src/test/java/programming/BrokenLinksTest.java",
      "+++ b/src/test/java/programming/BrokenLinksTest.java",
      "@@ -0,0 +1 @@",
      "+package programming;",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "4952fc48-2796-4c22-a10e-ee2d2785bbe5",
    "name": "Define test class",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/BrokenLinksTest.java b/src/test/java/programming/BrokenLinksTest.java",
      "index d910c24..393f8c9 100644",
      "--- a/src/test/java/programming/BrokenLinksTest.java",
      "+++ b/src/test/java/programming/BrokenLinksTest.java",
      "@@ -1 +1,5 @@",
      " package programming;",
      "+",
      "+class BrokenLinksTest {",
      "+",
      "+}",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "b685e0ae-be6d-452e-b268-3afd73eda928",
    "name": "Define a failing test",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/BrokenLinksTest.java b/src/test/java/programming/BrokenLinksTest.java",
      "index 393f8c9..19b9610 100644",
      "--- a/src/test/java/programming/BrokenLinksTest.java",
      "+++ b/src/test/java/programming/BrokenLinksTest.java",
      "@@ -1,5 +1,13 @@",
      " package programming;",
      " ",
      "+import static org.junit.jupiter.api.Assertions.fail;",
      "+",
      "+import org.junit.jupiter.api.Test;",
      "+",
      " class BrokenLinksTest {",
      " ",
      "+    @Test",
      "+    void shouldFail() {",
      "+        fail(\"Making sure that the test run and fail\");",
      "+    }",
      " }",
      ""
    ]
  },
  {
    "type": "todo",
    "id": "87f626a5-16a8-4aec-b3ea-ab025d198203",
    "parameters": [
      "A note to self.  This test will pass, even though it was expected to fail as gradle is not well configured yet"
    ]
  },
  {
    "type": "command",
    "id": "52a9d3a9-d2d3-43d0-8aec-02d708edadb2",
    "name": "Test project",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "95e2532f-ce16-4cd9-88f1-706b13662627",
    "name": "Configure Gradle to test using JUnit",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/build.gradle b/build.gradle",
      "index 68ceca2..b747cf8 100644",
      "--- a/build.gradle",
      "+++ b/build.gradle",
      "@@ -25,2 +25,13 @@ dependencies {",
      "     testImplementation \"org.junit.jupiter:junit-jupiter:5.7.2\"",
      " }",
      "+",
      "+test {",
      "+    useJUnitPlatform()",
      "+    testLogging {",
      "+        events \"failed\", \"passed\", \"skipped\", \"standard_out\"",
      "+        exceptionFormat \"full\"",
      "+        showExceptions true",
      "+        showCauses true",
      "+        showStackTraces true",
      "+    }",
      "+}",
      ""
    ]
  },
  {
    "type": "command",
    "id": "cfd4722d-8ab7-4bbf-b422-d7c445cdeda7",
    "name": "Test project",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test"
    ],
    "expectedExitValue": 1
  },
  {
    "type": "git-apply-patch",
    "id": "b2001116-ea85-4b29-8acb-ab8c7e919719",
    "name": "Remove fail assertion and test again",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/BrokenLinksTest.java b/src/test/java/programming/BrokenLinksTest.java",
      "index 19b9610..0c1784b 100644",
      "--- a/src/test/java/programming/BrokenLinksTest.java",
      "+++ b/src/test/java/programming/BrokenLinksTest.java",
      "@@ -1,13 +1,10 @@",
      " package programming;",
      " ",
      "-import static org.junit.jupiter.api.Assertions.fail;",
      "-",
      " import org.junit.jupiter.api.Test;",
      " ",
      " class BrokenLinksTest {",
      " ",
      "     @Test",
      "-    void shouldFail() {",
      "+    void shouldNotFail() {",
      "-        fail(\"Making sure that the test run and fail\");",
      "     }",
      " }",
      ""
    ]
  },
  {
    "type": "command",
    "id": "6d8c0876-3e90-45ba-bd13-86c83b809221",
    "name": "Test project",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test"
    ]
  },
  {
    "type": "git-commit-changes",
    "id": "c623aeee-5ec6-40bb-b1b4-f9182971ed46",
    "name": "Create Broken Link Test Class",
    "workingDirectory": "broken-links",
    "parameters": [
      "Create Broken Link Test Class",
      "v2.1.6"
    ]
  },
  {
    "type": "subsection",
    "id": "4f781b3b-31e0-4e7d-8f5e-7e9aaf262863",
    "parameters": [
      "Mock-Server"
    ]
  },
  {
    "type": "git-tag-current-commit",
    "id": "cee6eb1d-fe6d-44c9-a9f0-75535f3a69d6",
    "name": "Mock-Server",
    "workingDirectory": "broken-links",
    "parameters": [
      "v2.2.0",
      "Start of Mock-Server"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "7ca36b8e-acb2-49e0-9d2c-59f8fc3be6d3",
    "name": "Add Mock-Server dependency",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/build.gradle b/build.gradle",
      "index d639d8c..68ceca2 100644",
      "--- a/build.gradle",
      "+++ b/build.gradle",
      "@@ -23,4 +23,5 @@ dependencies {",
      " ",
      "     /* Testing */",
      "     testImplementation \"org.junit.jupiter:junit-jupiter:5.7.2\"",
      "+    testImplementation \"org.mock-server:mockserver-junit-jupiter:5.11.2\"",
      " }",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "bc3e4a75-181d-41ba-a010-671e4d60eb0b",
    "name": "Use Mock-Server extension",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/BrokenLinksTest.java b/src/test/java/programming/BrokenLinksTest.java",
      "index 0c1784b..026493e 100644",
      "--- a/src/test/java/programming/BrokenLinksTest.java",
      "+++ b/src/test/java/programming/BrokenLinksTest.java",
      "@@ -1,7 +1,12 @@",
      " package programming;",
      " ",
      " import org.junit.jupiter.api.Test;",
      "+import org.junit.jupiter.api.extension.ExtendWith;",
      "+import org.mockserver.junit.jupiter.MockServerExtension;",
      "+import org.mockserver.junit.jupiter.MockServerSettings;",
      " ",
      "+@MockServerSettings(ports = {8888})",
      "+@ExtendWith(MockServerExtension.class)",
      " class BrokenLinksTest {",
      " ",
      "     @Test",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "d2767335-e808-49e9-add1-b6c7eb3d8bfb",
    "name": "Inject Mock-Server through the constructor",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/BrokenLinksTest.java b/src/test/java/programming/BrokenLinksTest.java",
      "index 026493e..cf7c1e1 100644",
      "--- a/src/test/java/programming/BrokenLinksTest.java",
      "+++ b/src/test/java/programming/BrokenLinksTest.java",
      "@@ -2,6 +2,7 @@ package programming;",
      " ",
      " import org.junit.jupiter.api.Test;",
      " import org.junit.jupiter.api.extension.ExtendWith;",
      "+import org.mockserver.integration.ClientAndServer;",
      " import org.mockserver.junit.jupiter.MockServerExtension;",
      " import org.mockserver.junit.jupiter.MockServerSettings;",
      " ",
      "@@ -9,6 +10,12 @@ import org.mockserver.junit.jupiter.MockServerSettings;",
      " @ExtendWith(MockServerExtension.class)",
      " class BrokenLinksTest {",
      " ",
      "+    private final ClientAndServer client;",
      "+",
      "+    public BrokenLinksTest(final ClientAndServer client) {",
      "+        this.client = client;",
      "+    }",
      "+",
      "     @Test",
      "     void shouldNotFail() {",
      "     }",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "8fb1176e-43f5-43f5-92b2-55cc4fdf0c80",
    "name": "Rename test method",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/BrokenLinksTest.java b/src/test/java/programming/BrokenLinksTest.java",
      "index eaaeaac..f584a9e 100644",
      "--- a/src/test/java/programming/BrokenLinksTest.java",
      "+++ b/src/test/java/programming/BrokenLinksTest.java",
      "@@ -17,6 +17,6 @@ class BrokenLinksTest {",
      "     }",
      " ",
      "     @Test",
      "-    void shouldNotFail() {",
      "+    void shouldRequestTheGivenPageFromTheServer() {",
      "     }",
      " }",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "ed7eec4c-849b-496c-93af-385a12f2e8eb",
    "name": "Create expected request definition",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/BrokenLinksTest.java b/src/test/java/programming/BrokenLinksTest.java",
      "index f584a9e..0c72c73 100644",
      "--- a/src/test/java/programming/BrokenLinksTest.java",
      "+++ b/src/test/java/programming/BrokenLinksTest.java",
      "@@ -1,10 +1,13 @@",
      " package programming;",
      " ",
      "+import static org.mockserver.model.HttpRequest.request;",
      "+",
      " import org.junit.jupiter.api.Test;",
      " import org.junit.jupiter.api.extension.ExtendWith;",
      " import org.mockserver.integration.ClientAndServer;",
      " import org.mockserver.junit.jupiter.MockServerExtension;",
      " import org.mockserver.junit.jupiter.MockServerSettings;",
      "+import org.mockserver.model.HttpRequest;",
      " ",
      " @MockServerSettings(ports = {8888})",
      " @ExtendWith(MockServerExtension.class)",
      "@@ -18,5 +21,8 @@ class BrokenLinksTest {",
      " ",
      "     @Test",
      "     void shouldRequestTheGivenPageFromTheServer() {",
      "+        final HttpRequest request = request()",
      "+                .withMethod(\"GET\")",
      "+                .withPath(\"/quickhacks/\");",
      "     }",
      " }",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "42642576-575e-4b90-b129-20a43d2755fe",
    "name": "Create mocked response",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/BrokenLinksTest.java b/src/test/java/programming/BrokenLinksTest.java",
      "index 0c72c73..31c4349 100644",
      "--- a/src/test/java/programming/BrokenLinksTest.java",
      "+++ b/src/test/java/programming/BrokenLinksTest.java",
      "@@ -1,6 +1,7 @@",
      " package programming;",
      " ",
      " import static org.mockserver.model.HttpRequest.request;",
      "+import static org.mockserver.model.HttpResponse.response;",
      " ",
      " import org.junit.jupiter.api.Test;",
      " import org.junit.jupiter.api.extension.ExtendWith;",
      "@@ -8,6 +9,7 @@ import org.mockserver.integration.ClientAndServer;",
      " import org.mockserver.junit.jupiter.MockServerExtension;",
      " import org.mockserver.junit.jupiter.MockServerSettings;",
      " import org.mockserver.model.HttpRequest;",
      "+import org.mockserver.model.HttpResponse;",
      " ",
      " @MockServerSettings(ports = {8888})",
      " @ExtendWith(MockServerExtension.class)",
      "@@ -24,5 +26,8 @@ class BrokenLinksTest {",
      "         final HttpRequest request = request()",
      "                 .withMethod(\"GET\")",
      "                 .withPath(\"/quickhacks/\");",
      "+        final HttpResponse response = response()",
      "+                .withStatusCode(200)",
      "+                .withBody(\"<html></html>\");",
      "     }",
      " }",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "6c0cc0c3-9e36-4519-830f-636bcd5d2bbc",
    "name": "Configure Mock-Server",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/BrokenLinksTest.java b/src/test/java/programming/BrokenLinksTest.java",
      "index 31c4349..f20c72e 100644",
      "--- a/src/test/java/programming/BrokenLinksTest.java",
      "+++ b/src/test/java/programming/BrokenLinksTest.java",
      "@@ -29,5 +29,8 @@ class BrokenLinksTest {",
      "         final HttpResponse response = response()",
      "                 .withStatusCode(200)",
      "                 .withBody(\"<html></html>\");",
      "+",
      "+        client.when(request)",
      "+                .respond(response);",
      "     }",
      " }",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "80c40a34-a94e-4248-8542-195a368cb7c1",
    "name": "Verify that the expected request was made",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/BrokenLinksTest.java b/src/test/java/programming/BrokenLinksTest.java",
      "index f20c72e..005f6f3 100644",
      "--- a/src/test/java/programming/BrokenLinksTest.java",
      "+++ b/src/test/java/programming/BrokenLinksTest.java",
      "@@ -2,6 +2,7 @@ package programming;",
      " ",
      " import static org.mockserver.model.HttpRequest.request;",
      " import static org.mockserver.model.HttpResponse.response;",
      "+import static org.mockserver.verify.VerificationTimes.exactly;",
      " ",
      " import org.junit.jupiter.api.Test;",
      " import org.junit.jupiter.api.extension.ExtendWith;",
      "@@ -32,5 +33,7 @@ class BrokenLinksTest {",
      " ",
      "         client.when(request)",
      "                 .respond(response);",
      "+",
      "+        client.verify(request, exactly(1));",
      "     }",
      " }",
      ""
    ]
  },
  {
    "type": "command",
    "id": "f907e343-b16d-48f2-9fda-3c354b134c33",
    "name": "Test project",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test"
    ],
    "expectedExitValue": 1
  },
  {
    "type": "git-apply-patch",
    "id": "f98fa344-85a0-408e-869c-868221e82d42",
    "name": "Call the broken link main() method",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/BrokenLinksTest.java b/src/test/java/programming/BrokenLinksTest.java",
      "index 70e99bc..8fb94ad 100644",
      "--- a/src/test/java/programming/BrokenLinksTest.java",
      "+++ b/src/test/java/programming/BrokenLinksTest.java",
      "@@ -34,6 +34,8 @@ class BrokenLinksTest {",
      "         client.when(request)",
      "                 .respond(response);",
      " ",
      "+        BrokenLinks.main(new String[] {});",
      "+",
      "         client.verify(request, exactly(1));",
      "     }",
      " }",
      ""
    ]
  },
  {
    "type": "command",
    "id": "16f41116-3435-4a5c-99e3-78c404aa6b9b",
    "name": "Test project",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test"
    ],
    "expectedExitValue": 1
  },
  {
    "type": "git-commit-changes",
    "id": "a6553afc-66f1-44dc-9f61-3a90531896e6",
    "name": "Mock-Server",
    "workingDirectory": "broken-links",
    "parameters": [
      "Mock-Server",
      "v2.2.9"
    ]
  },
  {
    "type": "subsection",
    "id": "bef203fe-7d5f-4652-b220-7f430ed44d9b",
    "parameters": [
      "Making the test pass"
    ]
  },
  {
    "type": "git-tag-current-commit",
    "id": "8e70c25e-8433-485b-a9e9-19371f37e176",
    "name": "Making the test pass",
    "workingDirectory": "broken-links",
    "parameters": [
      "v2.3.0",
      "Start of Making the test pass"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "d41a31cf-221b-4d23-a974-f33c88990eb3",
    "name": "Create HTTP Client",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index 5027ec9..b2bfb8c 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -1,8 +1,15 @@",
      " package programming;",
      " ",
      "+import java.net.http.HttpClient;",
      "+import java.time.Duration;",
      "+",
      " public class BrokenLinks {",
      " ",
      "     public static void main(final String[] args) {",
      "-        System.out.println(\"Broken Links - Take 2!!\");",
      "+        final HttpClient client = HttpClient.newBuilder()",
      "+                .version(HttpClient.Version.HTTP_1_1)",
      "+                .followRedirects(HttpClient.Redirect.NORMAL)",
      "+                .connectTimeout(Duration.ofSeconds(5))",
      "+                .build();",
      "     }",
      " }",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "65349078-7ad1-4239-b954-0b35082a3fcd",
    "name": "Get the page link from the command line arguments",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index b2bfb8c..4d9fd28 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -11,5 +11,7 @@ public class BrokenLinks {",
      "                 .followRedirects(HttpClient.Redirect.NORMAL)",
      "                 .connectTimeout(Duration.ofSeconds(5))",
      "                 .build();",
      "+",
      "+        final String pageLink = args[0];",
      "     }",
      " }",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "746ec445-bf22-4dea-8503-ee56dc045b92",
    "name": "Create a link pointing to the Mock-Server",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/BrokenLinksTest.java b/src/test/java/programming/BrokenLinksTest.java",
      "index 2618f69..2dd58ab 100644",
      "--- a/src/test/java/programming/BrokenLinksTest.java",
      "+++ b/src/test/java/programming/BrokenLinksTest.java",
      "@@ -34,6 +34,7 @@ class BrokenLinksTest {",
      "         client.when(request)",
      "                 .respond(response);",
      " ",
      "+        final String pageLink = \"http://localhost:8888/quickhacks/\";",
      "         BrokenLinks.main(new String[] {});",
      " ",
      "         client.verify(request, exactly(1));",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "7feb5409-9f01-4073-81e9-02f2262594cb",
    "name": "Provide the link as the first command line argument",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/BrokenLinksTest.java b/src/test/java/programming/BrokenLinksTest.java",
      "index 2dd58ab..67dc871 100644",
      "--- a/src/test/java/programming/BrokenLinksTest.java",
      "+++ b/src/test/java/programming/BrokenLinksTest.java",
      "@@ -35,7 +35,7 @@ class BrokenLinksTest {",
      "                 .respond(response);",
      " ",
      "         final String pageLink = \"http://localhost:8888/quickhacks/\";",
      "-        BrokenLinks.main(new String[] {});",
      "+        BrokenLinks.main(new String[] {pageLink});",
      " ",
      "         client.verify(request, exactly(1));",
      "     }",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "9a287667-d58a-452b-aa6c-fc23e9bd1a89",
    "name": "Create HTTP Request",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index 4d9fd28..44d9734 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -1,6 +1,8 @@",
      " package programming;",
      " ",
      "+import java.net.URI;",
      " import java.net.http.HttpClient;",
      "+import java.net.http.HttpRequest;",
      " import java.time.Duration;",
      " ",
      " public class BrokenLinks {",
      "@@ -13,5 +15,9 @@ public class BrokenLinks {",
      "                 .build();",
      " ",
      "         final String pageLink = args[0];",
      "+        final HttpRequest request = HttpRequest.newBuilder()",
      "+                .uri(URI.create(pageLink))",
      "+                .timeout(Duration.ofSeconds(5))",
      "+                .build();",
      "     }",
      " }",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "318999f1-07e8-416f-a415-52c779db0d70",
    "name": "Make the HTTP Request",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index 44d9734..5692e86 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -1,13 +1,15 @@",
      " package programming;",
      " ",
      "+import java.io.IOException;",
      " import java.net.URI;",
      " import java.net.http.HttpClient;",
      " import java.net.http.HttpRequest;",
      "+import java.net.http.HttpResponse;",
      " import java.time.Duration;",
      " ",
      " public class BrokenLinks {",
      " ",
      "-    public static void main(final String[] args) {",
      "+    public static void main(final String[] args) throws IOException, InterruptedException {",
      "         final HttpClient client = HttpClient.newBuilder()",
      "                 .version(HttpClient.Version.HTTP_1_1)",
      "                 .followRedirects(HttpClient.Redirect.NORMAL)",
      "@@ -19,5 +21,7 @@ public class BrokenLinks {",
      "                 .uri(URI.create(pageLink))",
      "                 .timeout(Duration.ofSeconds(5))",
      "                 .build();",
      "+",
      "+        final HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());",
      "     }",
      " }",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "6e4a4c0c-a577-404b-99c0-6ff9616429f2",
    "name": "Add exceptions to the test method signature",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/BrokenLinksTest.java b/src/test/java/programming/BrokenLinksTest.java",
      "index 67dc871..b6eb022 100644",
      "--- a/src/test/java/programming/BrokenLinksTest.java",
      "+++ b/src/test/java/programming/BrokenLinksTest.java",
      "@@ -4,6 +4,8 @@ import static org.mockserver.model.HttpRequest.request;",
      " import static org.mockserver.model.HttpResponse.response;",
      " import static org.mockserver.verify.VerificationTimes.exactly;",
      " ",
      "+import java.io.IOException;",
      "+",
      " import org.junit.jupiter.api.Test;",
      " import org.junit.jupiter.api.extension.ExtendWith;",
      " import org.mockserver.integration.ClientAndServer;",
      "@@ -23,7 +25,7 @@ class BrokenLinksTest {",
      "     }",
      " ",
      "     @Test",
      "-    void shouldRequestTheGivenPageFromTheServer() {",
      "+    void shouldRequestTheGivenPageFromTheServer() throws IOException, InterruptedException {",
      "         final HttpRequest request = request()",
      "                 .withMethod(\"GET\")",
      "                 .withPath(\"/quickhacks/\");",
      ""
    ]
  },
  {
    "type": "command",
    "id": "f22ec845-2cb8-458a-976e-3326eabfb412",
    "name": "Test project",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test"
    ]
  },
  {
    "type": "git-commit-changes",
    "id": "6fb510ee-9914-48c3-9d2d-c99a146481ad",
    "name": "Making the test pass",
    "workingDirectory": "broken-links",
    "parameters": [
      "Making the test pass",
      "v2.3.7"
    ]
  },
  {
    "type": "subsection",
    "id": "46301a7a-9069-4a5b-9943-39cdc6327643",
    "parameters": [
      "Testing the whole flow"
    ]
  },
  {
    "type": "git-tag-current-commit",
    "id": "fdcd19dc-1d8d-42a8-914e-aa536c8a6e61",
    "name": "Testing the whole flow",
    "workingDirectory": "broken-links",
    "parameters": [
      "v2.4.0",
      "Start of Testing the whole flow"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "bf012580-8372-4c6d-927e-424ba8d4408a",
    "name": "Extract the response body to a variable",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/BrokenLinksTest.java b/src/test/java/programming/BrokenLinksTest.java",
      "index b6eb022..d57099c 100644",
      "--- a/src/test/java/programming/BrokenLinksTest.java",
      "+++ b/src/test/java/programming/BrokenLinksTest.java",
      "@@ -29,9 +29,11 @@ class BrokenLinksTest {",
      "         final HttpRequest request = request()",
      "                 .withMethod(\"GET\")",
      "                 .withPath(\"/quickhacks/\");",
      "+",
      "+        final String body = \"<html></html>\";",
      "         final HttpResponse response = response()",
      "                 .withStatusCode(200)",
      "-                .withBody(\"<html></html>\");",
      "+                .withBody(body);",
      " ",
      "         client.when(request)",
      "                 .respond(response);",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "8e943a71-aa63-445f-8803-daff256cee0a",
    "name": "Use Java block text",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/BrokenLinksTest.java b/src/test/java/programming/BrokenLinksTest.java",
      "index d57099c..ad9a014 100644",
      "--- a/src/test/java/programming/BrokenLinksTest.java",
      "+++ b/src/test/java/programming/BrokenLinksTest.java",
      "@@ -30,7 +30,9 @@ class BrokenLinksTest {",
      "                 .withMethod(\"GET\")",
      "                 .withPath(\"/quickhacks/\");",
      " ",
      "-        final String body = \"<html></html>\";",
      "+        final String body = \"\"\"",
      "+                <html></html>",
      "+                \"\"\";",
      "         final HttpResponse response = response()",
      "                 .withStatusCode(200)",
      "                 .withBody(body);",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "5e064039-d198-45ab-b566-f66248fac095",
    "name": "Add a link to the response",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/BrokenLinksTest.java b/src/test/java/programming/BrokenLinksTest.java",
      "index ad9a014..d3295e5 100644",
      "--- a/src/test/java/programming/BrokenLinksTest.java",
      "+++ b/src/test/java/programming/BrokenLinksTest.java",
      "@@ -31,7 +31,11 @@ class BrokenLinksTest {",
      "                 .withPath(\"/quickhacks/\");",
      " ",
      "         final String body = \"\"\"",
      "-                <html></html>",
      "+                <html>",
      "+                  <body>",
      "+                    <a href=\"http://localhost:8888/quickhacks/page-2\">Another page</a>",
      "+                  </body>",
      "+                </html>",
      "                 \"\"\";",
      "         final HttpResponse response = response()",
      "                 .withStatusCode(200)",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "2fcb0c68-2603-49c3-a87b-fd00d03d07ca",
    "name": "Rename the request definition variable",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/BrokenLinksTest.java b/src/test/java/programming/BrokenLinksTest.java",
      "index d3295e5..856e640 100644",
      "--- a/src/test/java/programming/BrokenLinksTest.java",
      "+++ b/src/test/java/programming/BrokenLinksTest.java",
      "@@ -26,7 +26,7 @@ class BrokenLinksTest {",
      " ",
      "     @Test",
      "     void shouldRequestTheGivenPageFromTheServer() throws IOException, InterruptedException {",
      "-        final HttpRequest request = request()",
      "+        final HttpRequest homePageRequest = request()",
      "                 .withMethod(\"GET\")",
      "                 .withPath(\"/quickhacks/\");",
      " ",
      "@@ -41,12 +41,12 @@ class BrokenLinksTest {",
      "                 .withStatusCode(200)",
      "                 .withBody(body);",
      " ",
      "-        client.when(request)",
      "+        client.when(homePageRequest)",
      "                 .respond(response);",
      " ",
      "         final String pageLink = \"http://localhost:8888/quickhacks/\";",
      "         BrokenLinks.main(new String[] {pageLink});",
      " ",
      "-        client.verify(request, exactly(1));",
      "+        client.verify(homePageRequest, exactly(1));",
      "     }",
      " }",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "08aa6514-32c0-4806-9f71-2fb764c7b101",
    "name": "Introduce the second request definition",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/BrokenLinksTest.java b/src/test/java/programming/BrokenLinksTest.java",
      "index 856e640..3af791b 100644",
      "--- a/src/test/java/programming/BrokenLinksTest.java",
      "+++ b/src/test/java/programming/BrokenLinksTest.java",
      "@@ -29,6 +29,9 @@ class BrokenLinksTest {",
      "         final HttpRequest homePageRequest = request()",
      "                 .withMethod(\"GET\")",
      "                 .withPath(\"/quickhacks/\");",
      "+        final HttpRequest page2Request = request()",
      "+                .withMethod(\"GET\")",
      "+                .withPath(\"/quickhacks/page-2\");",
      " ",
      "         final String body = \"\"\"",
      "                 <html>",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "70e883b4-f58c-4525-8894-b0ff45a587b4",
    "name": "Configure Mock-Server to reply to page 2",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/BrokenLinksTest.java b/src/test/java/programming/BrokenLinksTest.java",
      "index 3af791b..f4ea1b5 100644",
      "--- a/src/test/java/programming/BrokenLinksTest.java",
      "+++ b/src/test/java/programming/BrokenLinksTest.java",
      "@@ -46,6 +46,8 @@ class BrokenLinksTest {",
      " ",
      "         client.when(homePageRequest)",
      "                 .respond(response);",
      "+        client.when(page2Request)",
      "+                .respond(response);",
      " ",
      "         final String pageLink = \"http://localhost:8888/quickhacks/\";",
      "         BrokenLinks.main(new String[] {pageLink});",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "c9a941d2-c77c-4183-bd2e-2b10ff3fe6a9",
    "name": "Verify that the second page was called",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/BrokenLinksTest.java b/src/test/java/programming/BrokenLinksTest.java",
      "index f4ea1b5..499acf8 100644",
      "--- a/src/test/java/programming/BrokenLinksTest.java",
      "+++ b/src/test/java/programming/BrokenLinksTest.java",
      "@@ -53,5 +53,6 @@ class BrokenLinksTest {",
      "         BrokenLinks.main(new String[] {pageLink});",
      " ",
      "         client.verify(homePageRequest, exactly(1));",
      "+        client.verify(page2Request, exactly(1));",
      "     }",
      " }",
      ""
    ]
  },
  {
    "type": "command",
    "id": "3c167f4c-4b9f-42e4-9082-fadbb8cca4cd",
    "name": "Test project",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test"
    ],
    "expectedExitValue": 1
  },
  {
    "type": "git-apply-patch",
    "id": "c2a9e689-d987-4a5f-b632-a6eb875fe202",
    "name": "Add the collections to save the pending and visited links",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index 5692e86..2f7a371 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -6,6 +6,10 @@ import java.net.http.HttpClient;",
      " import java.net.http.HttpRequest;",
      " import java.net.http.HttpResponse;",
      " import java.time.Duration;",
      "+import java.util.ArrayList;",
      "+import java.util.HashSet;",
      "+import java.util.List;",
      "+import java.util.Set;",
      " ",
      " public class BrokenLinks {",
      " ",
      "@@ -17,6 +21,11 @@ public class BrokenLinks {",
      "                 .build();",
      " ",
      "         final String pageLink = args[0];",
      "+        final List<String> pending = new ArrayList<>();",
      "+        pending.add(pageLink);",
      "+",
      "+        final Set<String> queued = new HashSet<>();",
      "+",
      "         final HttpRequest request = HttpRequest.newBuilder()",
      "                 .uri(URI.create(pageLink))",
      "                 .timeout(Duration.ofSeconds(5))",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "eeb444c8-1ffd-4ebe-ae32-974879335243",
    "name": "Get the next pending link",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index 2f7a371..537f5ed 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -26,8 +26,9 @@ public class BrokenLinks {",
      " ",
      "         final Set<String> queued = new HashSet<>();",
      " ",
      "+        final String nextLink = pending.remove(0);",
      "         final HttpRequest request = HttpRequest.newBuilder()",
      "-                .uri(URI.create(pageLink))",
      "+                .uri(URI.create(nextLink))",
      "                 .timeout(Duration.ofSeconds(5))",
      "                 .build();",
      " ",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "15e753e3-ea80-4049-9e55-10b4fce7290f",
    "name": "Iterate over all pending links",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index 537f5ed..6a7a2b1 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -26,12 +26,14 @@ public class BrokenLinks {",
      " ",
      "         final Set<String> queued = new HashSet<>();",
      " ",
      "-        final String nextLink = pending.remove(0);",
      "-        final HttpRequest request = HttpRequest.newBuilder()",
      "-                .uri(URI.create(nextLink))",
      "-                .timeout(Duration.ofSeconds(5))",
      "-                .build();",
      "+        do {",
      "+            final String nextLink = pending.remove(0);",
      "+            final HttpRequest request = HttpRequest.newBuilder()",
      "+                    .uri(URI.create(nextLink))",
      "+                    .timeout(Duration.ofSeconds(5))",
      "+                    .build();",
      " ",
      "-        final HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());",
      "+            final HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());",
      "+        } while (pending.isEmpty() == false);",
      "     }",
      " }",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "a6574558-8eb6-4b94-a648-8a800cdcf2f7",
    "name": "Add new link to pending list",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index 6a7a2b1..01c046f 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -11,6 +11,10 @@ import java.util.HashSet;",
      " import java.util.List;",
      " import java.util.Set;",
      " ",
      "+import org.jsoup.Jsoup;",
      "+import org.jsoup.nodes.Document;",
      "+import org.jsoup.nodes.Element;",
      "+",
      " public class BrokenLinks {",
      " ",
      "     public static void main(final String[] args) throws IOException, InterruptedException {",
      "@@ -34,6 +38,15 @@ public class BrokenLinks {",
      "                     .build();",
      " ",
      "             final HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());",
      "+",
      "+            System.out.printf(\"Following link: %s%n\", nextLink);",
      "+            final Document document = Jsoup.parse(response.body());",
      "+            for (final Element a : document.select(\"a[href~=http(s|)://.+]\")) {",
      "+                final String link = a.attr(\"href\");",
      "+                if (queued.add(link)) {",
      "+                    pending.add(link);",
      "+                }",
      "+            }",
      "         } while (pending.isEmpty() == false);",
      "     }",
      " }",
      ""
    ]
  },
  {
    "type": "command",
    "id": "8206851d-38bb-41fc-b711-dfb8565fcf0a",
    "name": "Test project",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test"
    ]
  },
  {
    "type": "git-commit-changes",
    "id": "d56b5aa5-ac26-4276-870b-a294f74e78f4",
    "name": "Testing the whole flow",
    "workingDirectory": "broken-links",
    "parameters": [
      "Testing the whole flow",
      "v2.4.12"
    ]
  },
  {
    "type": "section",
    "id": "9b2f3687-acd1-4944-b5d8-a61f1da80c8f",
    "parameters": [
      "Third Time's the Charm"
    ]
  },
  {
    "type": "subsection",
    "id": "4df27cf7-610d-4617-924d-e5258fa66f7b",
    "parameters": [
      "Test Driven Development"
    ]
  },
  {
    "type": "subsection",
    "id": "ae3d2d67-b676-40b9-8637-ce8675f34dba",
    "parameters": [
      "Mocking our way"
    ]
  },
  {
    "type": "git-tag-current-commit",
    "id": "565017f8-7280-44ed-aaf9-c760aeccabd2",
    "name": "Mocking our way",
    "workingDirectory": "broken-links",
    "parameters": [
      "v2.5.0",
      "Start of Mocking our way"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "a1cad696-5357-4983-93b4-26cd1aaab7b2",
    "name": "Clear the test",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/BrokenLinksTest.java b/src/test/java/programming/BrokenLinksTest.java",
      "index 499acf8..92c615b 100644",
      "--- a/src/test/java/programming/BrokenLinksTest.java",
      "+++ b/src/test/java/programming/BrokenLinksTest.java",
      "@@ -1,58 +1,11 @@",
      " package programming;",
      " ",
      "-import static org.mockserver.model.HttpRequest.request;",
      "-import static org.mockserver.model.HttpResponse.response;",
      "-import static org.mockserver.verify.VerificationTimes.exactly;",
      "-",
      "-import java.io.IOException;",
      "-",
      " import org.junit.jupiter.api.Test;",
      "-import org.junit.jupiter.api.extension.ExtendWith;",
      "-import org.mockserver.integration.ClientAndServer;",
      "-import org.mockserver.junit.jupiter.MockServerExtension;",
      "-import org.mockserver.junit.jupiter.MockServerSettings;",
      "-import org.mockserver.model.HttpRequest;",
      "-import org.mockserver.model.HttpResponse;",
      " ",
      "-@MockServerSettings(ports = {8888})",
      "-@ExtendWith(MockServerExtension.class)",
      " class BrokenLinksTest {",
      " ",
      "-    private final ClientAndServer client;",
      "-",
      "-    public BrokenLinksTest(final ClientAndServer client) {",
      "-        this.client = client;",
      "-    }",
      "-",
      "     @Test",
      "-    void shouldRequestTheGivenPageFromTheServer() throws IOException, InterruptedException {",
      "-        final HttpRequest homePageRequest = request()",
      "-                .withMethod(\"GET\")",
      "-                .withPath(\"/quickhacks/\");",
      "-        final HttpRequest page2Request = request()",
      "-                .withMethod(\"GET\")",
      "-                .withPath(\"/quickhacks/page-2\");",
      "-",
      "-        final String body = \"\"\"",
      "-                <html>",
      "-                  <body>",
      "-                    <a href=\"http://localhost:8888/quickhacks/page-2\">Another page</a>",
      "-                  </body>",
      "-                </html>",
      "-                \"\"\";",
      "-        final HttpResponse response = response()",
      "-                .withStatusCode(200)",
      "-                .withBody(body);",
      "-",
      "-        client.when(homePageRequest)",
      "-                .respond(response);",
      "-        client.when(page2Request)",
      "-                .respond(response);",
      "-",
      "-        final String pageLink = \"http://localhost:8888/quickhacks/\";",
      "-        BrokenLinks.main(new String[] {pageLink});",
      "-",
      "-        client.verify(homePageRequest, exactly(1));",
      "-        client.verify(page2Request, exactly(1));",
      "+    void shouldRunTheApplication() {",
      "+        BrokenLinks.main(new String[] {});",
      "     }",
      " }",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "4eabc85f-36e4-43d5-bf56-b5d150f48e9a",
    "name": "Clear the class",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index 01c046f..99878f1 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -1,52 +1,8 @@",
      " package programming;",
      " ",
      "-import java.io.IOException;",
      "-import java.net.URI;",
      "-import java.net.http.HttpClient;",
      "-import java.net.http.HttpRequest;",
      "-import java.net.http.HttpResponse;",
      "-import java.time.Duration;",
      "-import java.util.ArrayList;",
      "-import java.util.HashSet;",
      "-import java.util.List;",
      "-import java.util.Set;",
      "-",
      "-import org.jsoup.Jsoup;",
      "-import org.jsoup.nodes.Document;",
      "-import org.jsoup.nodes.Element;",
      "-",
      " public class BrokenLinks {",
      " ",
      "-    public static void main(final String[] args) throws IOException, InterruptedException {",
      "-        final HttpClient client = HttpClient.newBuilder()",
      "-                .version(HttpClient.Version.HTTP_1_1)",
      "-                .followRedirects(HttpClient.Redirect.NORMAL)",
      "-                .connectTimeout(Duration.ofSeconds(5))",
      "-                .build();",
      "-",
      "-        final String pageLink = args[0];",
      "-        final List<String> pending = new ArrayList<>();",
      "-        pending.add(pageLink);",
      "-",
      "-        final Set<String> queued = new HashSet<>();",
      "-",
      "-        do {",
      "-            final String nextLink = pending.remove(0);",
      "-            final HttpRequest request = HttpRequest.newBuilder()",
      "-                    .uri(URI.create(nextLink))",
      "-                    .timeout(Duration.ofSeconds(5))",
      "-                    .build();",
      "-",
      "-            final HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());",
      "-",
      "-            System.out.printf(\"Following link: %s%n\", nextLink);",
      "-            final Document document = Jsoup.parse(response.body());",
      "-            for (final Element a : document.select(\"a[href~=http(s|)://.+]\")) {",
      "-                final String link = a.attr(\"href\");",
      "-                if (queued.add(link)) {",
      "-                    pending.add(link);",
      "-                }",
      "-            }",
      "-        } while (pending.isEmpty() == false);",
      "+    public static void main(final String[] args) {",
      "+        System.out.println(\"Broken Links - Mocking our way!!\");",
      "     }",
      " }",
      ""
    ]
  },
  {
    "type": "todo",
    "id": "9caebe1d-aef0-40af-9033-3a1b087e1f82",
    "parameters": [
      "Should we have a test for the `main()` method, similar to what we have in Hello World?"
    ]
  },
  {
    "type": "todo",
    "id": "ec435ea6-1173-4f8d-a28a-a780c364560f",
    "parameters": [
      "Talk about `PageLink` class.  We have the following options",
      "- Use a `String` (too generic)",
      "- Use a `URL` (problematic `equals()` method, refer to Effective Java - \"Obey the general contract when overriding `equals()`\")",
      "- Create a domain primitive (micro type)"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "93d97075-1509-49ed-be28-d37c662df661",
    "name": "Define a test that results in one broken link when the start page is not reachable",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/BrokenLinksTest.java b/src/test/java/programming/BrokenLinksTest.java",
      "index 92c615b..20ce750 100644",
      "--- a/src/test/java/programming/BrokenLinksTest.java",
      "+++ b/src/test/java/programming/BrokenLinksTest.java",
      "@@ -5,7 +5,8 @@ import org.junit.jupiter.api.Test;",
      " class BrokenLinksTest {",
      " ",
      "     @Test",
      "-    void shouldRunTheApplication() {",
      "-        BrokenLinks.main(new String[] {});",
      "+    void resultsInOneBrokenLinkWhenTheStartPageIsNotReachable() {",
      "+        final PageLink startPage = PageLink.of(\"https://start-page-not-reachable/\");",
      "+        final ScanResult result = BrokenLinks.scan(startPage);",
      "     }",
      " }",
      ""
    ]
  },
  {
    "type": "todo",
    "id": "cf7bb22c-d3ae-47fd-8947-dd3d66ffa002",
    "parameters": [
      "Talk about test method name, and how this can be used as documentation",
      "Talk about `@DisplayName()`.  We did not use them for the following two reasons",
      "- When clicking on the test name in the run pane, IntelliJ does not take you to the test",
      "- There is a chance that someone changes the method name or the description without changing the other"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "f95ece19-852b-48a3-a41f-0854bb59ec4e",
    "name": "Assert the scan results",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/BrokenLinksTest.java b/src/test/java/programming/BrokenLinksTest.java",
      "index 20ce750..1adfc21 100644",
      "--- a/src/test/java/programming/BrokenLinksTest.java",
      "+++ b/src/test/java/programming/BrokenLinksTest.java",
      "@@ -1,5 +1,7 @@",
      " package programming;",
      " ",
      "+import static org.junit.jupiter.api.Assertions.assertEquals;",
      "+",
      " import org.junit.jupiter.api.Test;",
      " ",
      " class BrokenLinksTest {",
      "@@ -8,5 +10,8 @@ class BrokenLinksTest {",
      "     void resultsInOneBrokenLinkWhenTheStartPageIsNotReachable() {",
      "         final PageLink startPage = PageLink.of(\"https://start-page-not-reachable/\");",
      "         final ScanResult result = BrokenLinks.scan(startPage);",
      "+",
      "+        final ScanResult expected = new ScanResult(1, 1);",
      "+        assertEquals(expected, result);",
      "     }",
      " }",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "0252a6eb-2bfb-4ada-b5e0-302afb25d75e",
    "name": "Group by GIVEN, WHEN and THEN",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/BrokenLinksTest.java b/src/test/java/programming/BrokenLinksTest.java",
      "index 1adfc21..9bbf842 100644",
      "--- a/src/test/java/programming/BrokenLinksTest.java",
      "+++ b/src/test/java/programming/BrokenLinksTest.java",
      "@@ -8,9 +8,13 @@ class BrokenLinksTest {",
      " ",
      "     @Test",
      "     void resultsInOneBrokenLinkWhenTheStartPageIsNotReachable() {",
      "+        /* Given */",
      "         final PageLink startPage = PageLink.of(\"https://start-page-not-reachable/\");",
      "+",
      "+        /* When */",
      "         final ScanResult result = BrokenLinks.scan(startPage);",
      " ",
      "+        /* Then */",
      "         final ScanResult expected = new ScanResult(1, 1);",
      "         assertEquals(expected, result);",
      "     }",
      ""
    ]
  },
  {
    "type": "todo",
    "id": "d1d19ca5-9613-4089-8be5-059fa80bbf2b",
    "parameters": [
      "Compare between Java Types, such as URL (and its baggage), Record, and Domain Primitives"
    ]
  },
  {
    "type": "command",
    "id": "8e0eaeb7-040a-4cbf-87f4-0bd15f87df42",
    "name": "Create the PageLink source file",
    "workingDirectory": "broken-links",
    "parameters": [
      "touch",
      "src/main/java/programming/PageLink.java"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "0c80ca3e-a081-4770-affd-40a8979f2a88",
    "name": "Create the PageLink class",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/PageLink.java b/src/main/java/programming/PageLink.java",
      "index e69de29..b7755b8 100644",
      "--- a/src/main/java/programming/PageLink.java",
      "+++ b/src/main/java/programming/PageLink.java",
      "@@ -0,0 +1,10 @@",
      "+package programming;",
      "+",
      "+public class PageLink {",
      "+",
      "+    public static PageLink of(final String link) {",
      "+        return new PageLink();",
      "+    }",
      "+",
      "+    private PageLink() {}",
      "+}",
      ""
    ]
  },
  {
    "type": "todo",
    "id": "97493dbc-223b-4196-a5d8-fe9d0096e427",
    "parameters": [
      "Show how to validate the inputs for the record class"
    ]
  },
  {
    "type": "command",
    "id": "68a2ea9e-9401-4eb7-a16f-41a9bf0ca8a5",
    "name": "Create the ScanResult source file",
    "workingDirectory": "broken-links",
    "parameters": [
      "touch",
      "src/main/java/programming/ScanResult.java"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "3b5075bc-e114-4210-8dc4-d042f69c5f9b",
    "name": "Create the ScanResult record",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/ScanResult.java b/src/main/java/programming/ScanResult.java",
      "index e69de29..12f5c11 100644",
      "--- a/src/main/java/programming/ScanResult.java",
      "+++ b/src/main/java/programming/ScanResult.java",
      "@@ -0,0 +1,4 @@",
      "+package programming;",
      "+",
      "+public record ScanResult(int brokenLinks, int testedLinks) {}",
      "+",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "f4f0c286-6b10-4d61-8ef2-070b57d949ff",
    "name": "Add the static scan method",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index 99878f1..c48fe3d 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -5,4 +5,7 @@ public class BrokenLinks {",
      "     public static void main(final String[] args) {",
      "         System.out.println(\"Broken Links - Mocking our way!!\");",
      "     }",
      "+",
      "+    public static ScanResult scan(final PageLink startPage) {",
      "+    }",
      " }",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "6c4546d9-add2-417a-b907-4cf789b1dc34",
    "name": "Simply make the code compile by returning null",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index bf87fcd..6495273 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -7,5 +7,6 @@ public class BrokenLinks {",
      "     }",
      " ",
      "     public static ScanResult scan(final PageLink startPage) {",
      "+        return null;",
      "     }",
      " }",
      ""
    ]
  },
  {
    "type": "command",
    "id": "f7fb8c6b-b245-47e3-8087-00089a2c08c4",
    "name": "Test project",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test"
    ],
    "expectedExitValue": 1
  },
  {
    "type": "git-apply-patch",
    "id": "73544038-2a4b-4c14-8516-0cb373ccf754",
    "name": "Make the test pass with the least effort",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index 6495273..7e638aa 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -7,6 +7,6 @@ public class BrokenLinks {",
      "     }",
      " ",
      "     public static ScanResult scan(final PageLink startPage) {",
      "-        return null;",
      "+        return new ScanResult(1, 1);",
      "     }",
      " }",
      ""
    ]
  },
  {
    "type": "command",
    "id": "04775cdd-9609-451c-a641-21e6b16aefc7",
    "name": "Test project",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "0f01bf19-dbef-4290-b53b-ea52bcc25c7f",
    "name": "Define a test that scans a website that has no links",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/BrokenLinksTest.java b/src/test/java/programming/BrokenLinksTest.java",
      "index 9bbf842..21c38cd 100644",
      "--- a/src/test/java/programming/BrokenLinksTest.java",
      "+++ b/src/test/java/programming/BrokenLinksTest.java",
      "@@ -18,4 +18,17 @@ class BrokenLinksTest {",
      "         final ScanResult expected = new ScanResult(1, 1);",
      "         assertEquals(expected, result);",
      "     }",
      "+",
      "+    @Test",
      "+    void resultsInNoBrokenLinksWhenTheStartPageIsReachable() {",
      "+        /* Given */",
      "+        final PageLink startPage = PageLink.of(\"https://start-page-is-reachable/\");",
      "+",
      "+        /* When */",
      "+        final ScanResult result = BrokenLinks.scan(startPage);",
      "+",
      "+        /* Then */",
      "+        final ScanResult expected = new ScanResult(0, 1);",
      "+        assertEquals(expected, result);",
      "+    }",
      " }",
      ""
    ]
  },
  {
    "type": "command",
    "id": "f29caba2-8298-4c2d-adc1-5a2b93b6e9d7",
    "name": "Test project",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test"
    ],
    "expectedExitValue": 1
  },
  {
    "type": "todo",
    "id": "1a19e306-0ef8-444f-b3e5-3c287c509951",
    "parameters": [
      "Introduce the concept of inversion of control",
      "Instead of having the `BrokenLinks` class creating the `PageGateway`, we will pass this to the class."
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "ca809dd0-2495-4dea-98e9-d568a94537a9",
    "name": "Mock the PageGateway and control the response returned",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/BrokenLinksTest.java b/src/test/java/programming/BrokenLinksTest.java",
      "index 21c38cd..0be2196 100644",
      "--- a/src/test/java/programming/BrokenLinksTest.java",
      "+++ b/src/test/java/programming/BrokenLinksTest.java",
      "@@ -23,6 +23,12 @@ class BrokenLinksTest {",
      "     void resultsInNoBrokenLinksWhenTheStartPageIsReachable() {",
      "         /* Given */",
      "         final PageLink startPage = PageLink.of(\"https://start-page-is-reachable/\");",
      "+        final PageGateway gateway = new PageGateway() {",
      "+            @Override",
      "+            public PageResult getPage(final PageLink pageLink) {",
      "+                return PageResult.ofBody(\"<html></html>\");",
      "+            }",
      "+        };",
      " ",
      "         /* When */",
      "         final ScanResult result = BrokenLinks.scan(startPage);",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "5b81b93b-7f56-406f-9b9c-cdadb273cf6c",
    "name": "Invoke the overloaded scan() method and pass the mocked PageGateway object",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/BrokenLinksTest.java b/src/test/java/programming/BrokenLinksTest.java",
      "index 0be2196..c91c192 100644",
      "--- a/src/test/java/programming/BrokenLinksTest.java",
      "+++ b/src/test/java/programming/BrokenLinksTest.java",
      "@@ -31,7 +31,7 @@ class BrokenLinksTest {",
      "         };",
      " ",
      "         /* When */",
      "-        final ScanResult result = BrokenLinks.scan(startPage);",
      "+        final ScanResult result = BrokenLinks.scan(gateway, startPage);",
      " ",
      "         /* Then */",
      "         final ScanResult expected = new ScanResult(0, 1);",
      ""
    ]
  },
  {
    "type": "command",
    "id": "ebdf9f8b-06ea-4086-8b1a-ae466bc99091",
    "name": "Create the PageGateway source file",
    "workingDirectory": "broken-links",
    "parameters": [
      "touch",
      "src/main/java/programming/PageGateway.java"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "5c83fd7b-0d36-4a7b-828b-731632f52880",
    "name": "Create the PageGateway class",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/PageGateway.java b/src/main/java/programming/PageGateway.java",
      "index e69de29..4519892 100644",
      "--- a/src/main/java/programming/PageGateway.java",
      "+++ b/src/main/java/programming/PageGateway.java",
      "@@ -0,0 +1,8 @@",
      "+package programming;",
      "+",
      "+public class PageGateway {",
      "+",
      "+    public PageResult getPage(final PageLink link) {",
      "+        throw new RuntimeException(\"Not yet implemented\");",
      "+    }",
      "+}",
      ""
    ]
  },
  {
    "type": "command",
    "id": "2a7e6c06-b023-4bbe-b1aa-9cdd3e60d878",
    "name": "Create the PageResult source file",
    "workingDirectory": "broken-links",
    "parameters": [
      "touch",
      "src/main/java/programming/PageResult.java"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "1fa47afe-89ad-4901-bf88-7038c1192cda",
    "name": "Create the PageResult class.patch",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/PageResult.java b/src/main/java/programming/PageResult.java",
      "index e69de29..3c84f3a 100644",
      "--- a/src/main/java/programming/PageResult.java",
      "+++ b/src/main/java/programming/PageResult.java",
      "@@ -0,0 +1,9 @@",
      "+package programming;",
      "+",
      "+public class PageResult {",
      "+    public static PageResult ofBody(final String body) {",
      "+        return new PageResult();",
      "+    }",
      "+",
      "+    private PageResult() {}",
      "+}",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "c975e7b6-f4fa-4f99-93e9-0f43e7a1a86b",
    "name": "Overload the scan() method and call the given PageGateway",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index 7e638aa..01de388 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -9,4 +9,15 @@ public class BrokenLinks {",
      "     public static ScanResult scan(final PageLink startPage) {",
      "         return new ScanResult(1, 1);",
      "     }",
      "+",
      "+    public static ScanResult scan(final PageGateway gateway, final PageLink startPage) {",
      "+        final PageResult startPageResult = gateway.getPage(startPage);",
      "+",
      "+        int brokenLinks = 0;",
      "+        if (startPageResult.isFailure()) {",
      "+            brokenLinks++;",
      "+        }",
      "+",
      "+        return new ScanResult(brokenLinks, 1);",
      "+    }",
      " }",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "689334c7-fe5e-42ab-bdc6-99a8447d6bd6",
    "name": "Implement the isFailure() method",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/PageResult.java b/src/main/java/programming/PageResult.java",
      "index 3c84f3a..1de741e 100644",
      "--- a/src/main/java/programming/PageResult.java",
      "+++ b/src/main/java/programming/PageResult.java",
      "@@ -1,9 +1,20 @@",
      " package programming;",
      " ",
      "+import java.util.Optional;",
      "+",
      " public class PageResult {",
      "+",
      "+    private final Optional<String> body;",
      "+",
      "     public static PageResult ofBody(final String body) {",
      "-        return new PageResult();",
      "+        return new PageResult(Optional.of(body));",
      "     }",
      " ",
      "-    private PageResult() {}",
      "+    private PageResult(final Optional<String> body) {",
      "+        this.body = body;",
      "+    }",
      "+",
      "+    public boolean isFailure() {",
      "+        return body.isEmpty();",
      "+    }",
      " }",
      ""
    ]
  },
  {
    "type": "command",
    "id": "9b3ee7d0-695b-4594-be5b-4b3b424051d0",
    "name": "Test project",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "b20c7307-3bc8-41eb-bc15-0c9f2925336e",
    "name": "Introduce a mocking framework",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/build.gradle b/build.gradle",
      "index 23504cf..e3ed0bf 100644",
      "--- a/build.gradle",
      "+++ b/build.gradle",
      "@@ -24,6 +24,7 @@ dependencies {",
      "     /* Testing */",
      "     testImplementation \"org.junit.jupiter:junit-jupiter:5.7.2\"",
      "     testImplementation \"org.mock-server:mockserver-junit-jupiter:5.11.2\"",
      "+    testImplementation \"org.mockito:mockito-core:3.11.2\"",
      " }",
      " ",
      " test {",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "b5e3e430-b13e-478b-88e1-7c28437f39a8",
    "name": "Replace our mock with the mocking framework",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/BrokenLinksTest.java b/src/test/java/programming/BrokenLinksTest.java",
      "index c91c192..b57a043 100644",
      "--- a/src/test/java/programming/BrokenLinksTest.java",
      "+++ b/src/test/java/programming/BrokenLinksTest.java",
      "@@ -1,6 +1,9 @@",
      " package programming;",
      " ",
      " import static org.junit.jupiter.api.Assertions.assertEquals;",
      "+import static org.mockito.ArgumentMatchers.eq;",
      "+import static org.mockito.Mockito.mock;",
      "+import static org.mockito.Mockito.when;",
      " ",
      " import org.junit.jupiter.api.Test;",
      " ",
      "@@ -23,12 +26,8 @@ class BrokenLinksTest {",
      "     void resultsInNoBrokenLinksWhenTheStartPageIsReachable() {",
      "         /* Given */",
      "         final PageLink startPage = PageLink.of(\"https://start-page-is-reachable/\");",
      "-        final PageGateway gateway = new PageGateway() {",
      "-            @Override",
      "-            public PageResult getPage(final PageLink pageLink) {",
      "-                return PageResult.ofBody(\"<html></html>\");",
      "-            }",
      "-        };",
      "+        final PageGateway gateway = mock(PageGateway.class);",
      "+        when(gateway.getPage(eq(startPage))).thenReturn(PageResult.ofBody(\"<html></html>\"));",
      " ",
      "         /* When */",
      "         final ScanResult result = BrokenLinks.scan(gateway, startPage);",
      ""
    ]
  },
  {
    "type": "command",
    "id": "c4af4d6b-3675-4050-827c-b101a0f0eca0",
    "name": "Test project",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "ade9cbc5-4971-44e9-b366-35b20f465648",
    "name": "Use mocks in the first tests too",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/BrokenLinksTest.java b/src/test/java/programming/BrokenLinksTest.java",
      "index b57a043..4660515 100644",
      "--- a/src/test/java/programming/BrokenLinksTest.java",
      "+++ b/src/test/java/programming/BrokenLinksTest.java",
      "@@ -13,9 +13,11 @@ class BrokenLinksTest {",
      "     void resultsInOneBrokenLinkWhenTheStartPageIsNotReachable() {",
      "         /* Given */",
      "         final PageLink startPage = PageLink.of(\"https://start-page-not-reachable/\");",
      "+        final PageGateway gateway = mock(PageGateway.class);",
      "+        when(gateway.getPage(eq(startPage))).thenReturn(PageResult.ofFailure());",
      " ",
      "         /* When */",
      "-        final ScanResult result = BrokenLinks.scan(startPage);",
      "+        final ScanResult result = BrokenLinks.scan(gateway, startPage);",
      " ",
      "         /* Then */",
      "         final ScanResult expected = new ScanResult(1, 1);",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "4b3d9f4b-8a9e-4377-a451-06258704bb9d",
    "name": "Add the ofFailure() static constructor",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/PageResult.java b/src/main/java/programming/PageResult.java",
      "index 1de741e..6de4cbe 100644",
      "--- a/src/main/java/programming/PageResult.java",
      "+++ b/src/main/java/programming/PageResult.java",
      "@@ -10,6 +10,10 @@ public class PageResult {",
      "         return new PageResult(Optional.of(body));",
      "     }",
      " ",
      "+    public static PageResult ofFailure() {",
      "+        return new PageResult(Optional.empty());",
      "+    }",
      "+",
      "     private PageResult(final Optional<String> body) {",
      "         this.body = body;",
      "     }",
      ""
    ]
  },
  {
    "type": "command",
    "id": "74f6c546-57cc-4e6e-b6c0-a6897bfe3051",
    "name": "Test project",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "cdcccec5-2bd7-481e-8e89-8719170e2c2c",
    "name": "Remove the unused scan method",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index 699eb30..a935c40 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -6,10 +6,6 @@ public class BrokenLinks {",
      "         System.out.println(\"Broken Links - Mocking our way!!\");",
      "     }",
      " ",
      "-    public static ScanResult scan(final PageLink startPage) {",
      "-        return new ScanResult(1, 1);",
      "-    }",
      "-",
      "     public static ScanResult scan(final PageGateway gateway, final PageLink startPage) {",
      "         final PageResult startPageResult = gateway.getPage(startPage);",
      " ",
      ""
    ]
  },
  {
    "type": "command",
    "id": "bfce15d9-298b-4b6b-aeba-69e0f8f95c48",
    "name": "Test project",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test"
    ]
  },
  {
    "type": "git-commit-changes",
    "id": "d1f1d10f-e10b-4883-91af-7856354bc6e9",
    "name": "Mocking our way",
    "workingDirectory": "broken-links",
    "parameters": [
      "Mocking our way",
      "v2.5.22"
    ]
  },
  {
    "type": "subsection",
    "id": "11fa971f-af25-4adc-8c3e-66a4e3970ef5",
    "parameters": [
      "Move away from static functions"
    ]
  },
  {
    "type": "git-tag-current-commit",
    "id": "2ef80e0d-3c99-4086-8d56-ff69bdbdc0eb",
    "name": "Move away from static functions",
    "workingDirectory": "broken-links",
    "parameters": [
      "v2.6.0",
      "Start of Move away from static functions"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "e080d2f1-8b34-44ec-bf5e-81f5946b75ea",
    "name": "Introduce PageGateway to BrokenLinks",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index a935c40..68a674c 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -2,6 +2,12 @@ package programming;",
      " ",
      " public class BrokenLinks {",
      " ",
      "+    private final PageGateway gateway;",
      "+",
      "+    public BrokenLinks(final PageGateway gateway) {",
      "+        this.gateway = gateway;",
      "+    }",
      "+",
      "     public static void main(final String[] args) {",
      "         System.out.println(\"Broken Links - Mocking our way!!\");",
      "     }",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "714050c1-0908-47a7-a2d1-38c82858a71e",
    "name": "Create the scan() instance method",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index 68a674c..237c66f 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -8,6 +8,17 @@ public class BrokenLinks {",
      "         this.gateway = gateway;",
      "     }",
      " ",
      "+    public ScanResult scan(final PageLink startPage) {",
      "+        final PageResult startPageResult = gateway.getPage(startPage);",
      "+",
      "+        int brokenLinks = 0;",
      "+        if (startPageResult.isFailure()) {",
      "+            brokenLinks++;",
      "+        }",
      "+",
      "+        return new ScanResult(brokenLinks, 1);",
      "+    }",
      "+",
      "     public static void main(final String[] args) {",
      "         System.out.println(\"Broken Links - Mocking our way!!\");",
      "     }",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "14723913-eac0-4da5-aa81-f78a57fe25eb",
    "name": "Use the instance scan() method in the first test",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/BrokenLinksTest.java b/src/test/java/programming/BrokenLinksTest.java",
      "index 4660515..9b34b12 100644",
      "--- a/src/test/java/programming/BrokenLinksTest.java",
      "+++ b/src/test/java/programming/BrokenLinksTest.java",
      "@@ -14,10 +14,11 @@ class BrokenLinksTest {",
      "         /* Given */",
      "         final PageLink startPage = PageLink.of(\"https://start-page-not-reachable/\");",
      "         final PageGateway gateway = mock(PageGateway.class);",
      "+        final BrokenLinks brokenLinks = new BrokenLinks(gateway);",
      "         when(gateway.getPage(eq(startPage))).thenReturn(PageResult.ofFailure());",
      " ",
      "         /* When */",
      "-        final ScanResult result = BrokenLinks.scan(gateway, startPage);",
      "+        final ScanResult result = brokenLinks.scan(startPage);",
      " ",
      "         /* Then */",
      "         final ScanResult expected = new ScanResult(1, 1);",
      ""
    ]
  },
  {
    "type": "command",
    "id": "007ed373-bc7f-4112-9e31-518ba0e63630",
    "name": "Test project",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "f1bed0fe-0d3a-4657-ad8e-5cb6974cc109",
    "name": "Use the instance scan() method in the second test",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/BrokenLinksTest.java b/src/test/java/programming/BrokenLinksTest.java",
      "index 9b34b12..854b9f8 100644",
      "--- a/src/test/java/programming/BrokenLinksTest.java",
      "+++ b/src/test/java/programming/BrokenLinksTest.java",
      "@@ -30,10 +30,11 @@ class BrokenLinksTest {",
      "         /* Given */",
      "         final PageLink startPage = PageLink.of(\"https://start-page-is-reachable/\");",
      "         final PageGateway gateway = mock(PageGateway.class);",
      "+        final BrokenLinks brokenLinks = new BrokenLinks(gateway);",
      "         when(gateway.getPage(eq(startPage))).thenReturn(PageResult.ofBody(\"<html></html>\"));",
      " ",
      "         /* When */",
      "-        final ScanResult result = BrokenLinks.scan(gateway, startPage);",
      "+        final ScanResult result = brokenLinks.scan(startPage);",
      " ",
      "         /* Then */",
      "         final ScanResult expected = new ScanResult(0, 1);",
      ""
    ]
  },
  {
    "type": "command",
    "id": "017e164c-1da7-47a8-a40e-7bbddf544789",
    "name": "Test project",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "7c13b2bf-c501-42a5-a378-ca9a6c1e06b3",
    "name": "Delete the unused static scan() method",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index 237c66f..3ca1add 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -22,15 +22,4 @@ public class BrokenLinks {",
      "     public static void main(final String[] args) {",
      "         System.out.println(\"Broken Links - Mocking our way!!\");",
      "     }",
      "-",
      "-    public static ScanResult scan(final PageGateway gateway, final PageLink startPage) {",
      "-        final PageResult startPageResult = gateway.getPage(startPage);",
      "-",
      "-        int brokenLinks = 0;",
      "-        if (startPageResult.isFailure()) {",
      "-            brokenLinks++;",
      "-        }",
      "-",
      "-        return new ScanResult(brokenLinks, 1);",
      "-    }",
      " }",
      ""
    ]
  },
  {
    "type": "command",
    "id": "b9e20e8d-df79-49e7-936f-aacf255343d6",
    "name": "Compile project",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "compileTestJava"
    ]
  },
  {
    "type": "todo",
    "id": "19340dff-ab68-4884-b51b-4ed9cac6e5e3",
    "parameters": [
      "The following changes are optional and more of a personal preference.",
      "With that being said, I see value in these changes."
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "83957514-c915-4e28-abc7-c6472622811d",
    "name": "Move the object creation to the test class level and reset the mock before each test",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/BrokenLinksTest.java b/src/test/java/programming/BrokenLinksTest.java",
      "index 854b9f8..7620ffb 100644",
      "--- a/src/test/java/programming/BrokenLinksTest.java",
      "+++ b/src/test/java/programming/BrokenLinksTest.java",
      "@@ -3,18 +3,26 @@ package programming;",
      " import static org.junit.jupiter.api.Assertions.assertEquals;",
      " import static org.mockito.ArgumentMatchers.eq;",
      " import static org.mockito.Mockito.mock;",
      "+import static org.mockito.Mockito.reset;",
      " import static org.mockito.Mockito.when;",
      " ",
      "+import org.junit.jupiter.api.BeforeEach;",
      " import org.junit.jupiter.api.Test;",
      " ",
      " class BrokenLinksTest {",
      " ",
      "+    private final PageGateway gateway = mock(PageGateway.class);",
      "+    private final BrokenLinks brokenLinks = new BrokenLinks(gateway);",
      "+",
      "+    @BeforeEach",
      "+    void setUp() {",
      "+        reset(gateway);",
      "+    }",
      "+",
      "     @Test",
      "     void resultsInOneBrokenLinkWhenTheStartPageIsNotReachable() {",
      "         /* Given */",
      "         final PageLink startPage = PageLink.of(\"https://start-page-not-reachable/\");",
      "-        final PageGateway gateway = mock(PageGateway.class);",
      "-        final BrokenLinks brokenLinks = new BrokenLinks(gateway);",
      "         when(gateway.getPage(eq(startPage))).thenReturn(PageResult.ofFailure());",
      " ",
      "         /* When */",
      "@@ -29,8 +37,6 @@ class BrokenLinksTest {",
      "     void resultsInNoBrokenLinksWhenTheStartPageIsReachable() {",
      "         /* Given */",
      "         final PageLink startPage = PageLink.of(\"https://start-page-is-reachable/\");",
      "-        final PageGateway gateway = mock(PageGateway.class);",
      "-        final BrokenLinks brokenLinks = new BrokenLinks(gateway);",
      "         when(gateway.getPage(eq(startPage))).thenReturn(PageResult.ofBody(\"<html></html>\"));",
      " ",
      "         /* When */",
      ""
    ]
  },
  {
    "type": "command",
    "id": "e7e29612-0b60-4174-a4fb-c3eca11570a6",
    "name": "Test project",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test"
    ]
  },
  {
    "type": "command",
    "id": "7d861013-56d2-4635-a1ad-80d15ba965d8",
    "name": "Create source file",
    "workingDirectory": "broken-links",
    "parameters": [
      "touch",
      "src/main/java/programming/Main.java"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "040cd256-2206-462d-b814-0f3a79098e91",
    "name": "Create Main class and main() method",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/Main.java b/src/main/java/programming/Main.java",
      "index e69de29..6649b9f 100644",
      "--- a/src/main/java/programming/Main.java",
      "+++ b/src/main/java/programming/Main.java",
      "@@ -0,0 +1,7 @@",
      "+package programming;",
      "+",
      "+public class Main {",
      "+    public static void main(final String[] args) {",
      "+        System.out.println(\"Broken Links - Mocking our way!!\");",
      "+    }",
      "+}",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "1c2d3d97-5b66-443b-b0c6-faa8840f2223",
    "name": "Configure Gradle to use the new Main class",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/build.gradle b/build.gradle",
      "index e3ed0bf..eaba837 100644",
      "--- a/build.gradle",
      "+++ b/build.gradle",
      "@@ -10,7 +10,7 @@ java {",
      " }",
      " ",
      " application {",
      "-    getMainClass().set(\"programming.BrokenLinks\")",
      "+    getMainClass().set(\"programming.Main\")",
      " }",
      " ",
      " repositories {",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "7397dacb-5876-4210-95c4-fca8ec488d69",
    "name": "Delete the original main() method",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index 3ca1add..3a1f800 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -18,8 +18,4 @@ public class BrokenLinks {",
      " ",
      "         return new ScanResult(brokenLinks, 1);",
      "     }",
      "-",
      "-    public static void main(final String[] args) {",
      "-        System.out.println(\"Broken Links - Mocking our way!!\");",
      "-    }",
      " }",
      ""
    ]
  },
  {
    "type": "command",
    "id": "8f669d9e-d141-4eb5-91b1-1fa21e0a83a0",
    "name": "Run project",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "run"
    ]
  },
  {
    "type": "git-commit-changes",
    "id": "b188a2a6-f522-4a7f-b2c5-777128f78940",
    "name": "Move away from static functions",
    "workingDirectory": "broken-links",
    "parameters": [
      "Move away from static functions",
      "v2.6.9"
    ]
  },
  {
    "type": "subsection",
    "id": "2966c238-a68e-4f66-a2af-b131958d6503",
    "parameters": [
      "Parse links"
    ]
  },
  {
    "type": "git-tag-current-commit",
    "id": "fa7f6b83-33a7-4d22-bac9-c0d4ee5faa5a",
    "name": "Parse links",
    "workingDirectory": "broken-links",
    "parameters": [
      "v2.7.0",
      "Start of Parse links"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "35c82e1d-adbc-44fe-ba5f-79e0f359cf61",
    "name": "Test page with only external links",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/BrokenLinksTest.java b/src/test/java/programming/BrokenLinksTest.java",
      "index 631a9ed..1f7bcca 100644",
      "--- a/src/test/java/programming/BrokenLinksTest.java",
      "+++ b/src/test/java/programming/BrokenLinksTest.java",
      "@@ -1,6 +1,7 @@",
      " package programming;",
      " ",
      " import static org.junit.jupiter.api.Assertions.assertEquals;",
      "+import static org.mockito.AdditionalMatchers.not;",
      " import static org.mockito.ArgumentMatchers.eq;",
      " import static org.mockito.Mockito.mock;",
      " import static org.mockito.Mockito.reset;",
      "@@ -46,4 +47,29 @@ class BrokenLinksTest {",
      "         final ScanResult expected = new ScanResult(0, 1);",
      "         assertEquals(expected, result);",
      "     }",
      "+",
      "+    @Test",
      "+    void testAllLinksFoundInTheStartPage() {",
      "+        /* Given */",
      "+        final PageLink startPage = PageLink.of(\"https://start-page-is-reachable/\");",
      "+        final PageLink externalPage1 = PageLink.of(\"https://external/page-1\");",
      "+        final PageLink internalPage1 = PageLink.of(\"https://start-page-is-reachable/page-1\");",
      "+        final PageResult startPageResult = PageResult.ofBody(\"\"\"",
      "+                <html>",
      "+                  <body>",
      "+                    <a href=\"https://external/page-1\">External Page</a>",
      "+                    <a href=\"https://start-page-is-reachable/page-1\">Internal Page</a>",
      "+                  </body>",
      "+                </html>",
      "+                \"\"\");",
      "+        when(gateway.getPage(eq(startPage))).thenReturn(startPageResult);",
      "+        when(gateway.getPage(not(eq(startPage)))).thenReturn(PageResult.ofBody(\"<html></html>\"));",
      "+",
      "+        /* When */",
      "+        final ScanResult result = brokenLinks.scan(startPage);",
      "+",
      "+        /* Then */",
      "+        final ScanResult expected = new ScanResult(0, 3);",
      "+        assertEquals(expected, result);",
      "+    }",
      " }",
      ""
    ]
  },
  {
    "type": "command",
    "id": "4ea88fab-aa4f-4c64-aeab-83836bb23833",
    "name": "Test project",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test"
    ],
    "expectedExitValue": 1
  },
  {
    "type": "git-apply-patch",
    "id": "ab0c851b-a875-4ba0-801e-99452823df2d",
    "name": "Introduce the PageParser to the test",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/BrokenLinksTest.java b/src/test/java/programming/BrokenLinksTest.java",
      "index 2460a0d..c4dd42f 100644",
      "--- a/src/test/java/programming/BrokenLinksTest.java",
      "+++ b/src/test/java/programming/BrokenLinksTest.java",
      "@@ -13,11 +13,12 @@ import org.junit.jupiter.api.Test;",
      " class BrokenLinksTest {",
      " ",
      "     private final PageGateway gateway = mock(PageGateway.class);",
      "+    private final PageParser parser = mock(PageParser.class);",
      "     private final BrokenLinks brokenLinks = new BrokenLinks(gateway);",
      " ",
      "     @BeforeEach",
      "     void setUp() {",
      "-        reset(gateway);",
      "+        reset(gateway, parser);",
      "     }",
      " ",
      "     @Test",
      "@@ -62,6 +63,7 @@ class BrokenLinksTest {",
      "                 \"\"\");",
      "         when(gateway.getPage(eq(startPage))).thenReturn(startPageResult);",
      "         when(gateway.getPage(not(eq(startPage)))).thenReturn(PageResult.ofBody(\"<html></html>\"));",
      "+        when(parser.getLinks(eq(startPageResult))).thenReturn(PageLinks.of(externalPage1, internalPage1));",
      " ",
      "         /* When */",
      "         final ScanResult result = brokenLinks.scan(startPage);",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "342a90cb-c589-4842-95e9-9422599bf490",
    "name": "Verify the correct interaction with the gateway",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/BrokenLinksTest.java b/src/test/java/programming/BrokenLinksTest.java",
      "index b4cb018..68f8522 100644",
      "--- a/src/test/java/programming/BrokenLinksTest.java",
      "+++ b/src/test/java/programming/BrokenLinksTest.java",
      "@@ -5,6 +5,9 @@ import static org.mockito.AdditionalMatchers.not;",
      " import static org.mockito.ArgumentMatchers.eq;",
      " import static org.mockito.Mockito.mock;",
      " import static org.mockito.Mockito.reset;",
      "+import static org.mockito.Mockito.times;",
      "+import static org.mockito.Mockito.verify;",
      "+import static org.mockito.Mockito.verifyNoMoreInteractions;",
      " import static org.mockito.Mockito.when;",
      " ",
      " import org.junit.jupiter.api.BeforeEach;",
      "@@ -75,5 +78,10 @@ class BrokenLinksTest {",
      "         /* Then */",
      "         final ScanResult expected = new ScanResult(0, 3);",
      "         assertEquals(expected, result);",
      "+",
      "+        verify(gateway, times(1)).getPage(startPage);",
      "+        verify(gateway, times(1)).getPage(externalPage1);",
      "+        verify(gateway, times(1)).getPage(internalPage1);",
      "+        verifyNoMoreInteractions(gateway);",
      "     }",
      " }",
      ""
    ]
  },
  {
    "type": "command",
    "id": "1355d3a2-f82d-41d0-8263-6c2c3cbe199f",
    "name": "Create source file",
    "workingDirectory": "broken-links",
    "parameters": [
      "touch",
      "src/main/java/programming/PageParser.java"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "57c491f9-a4ca-4aa2-87cb-a0d5c1c8159b",
    "name": "Create PageParser class",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/PageParser.java b/src/main/java/programming/PageParser.java",
      "index 3f90fb5..951ab33 100644",
      "--- a/src/main/java/programming/PageParser.java",
      "+++ b/src/main/java/programming/PageParser.java",
      "@@ -0,0 +1,8 @@",
      "+package programming;",
      "+",
      "+public class PageParser {",
      "+",
      "+    public PageLinks getLinks(final PageResult page) {",
      "+        throw new RuntimeException(\"Not yet implemented\");",
      "+    }",
      "+}",
      ""
    ]
  },
  {
    "type": "command",
    "id": "b3d2321b-8a79-45df-8381-56d7d6b2524d",
    "name": "Create source file",
    "workingDirectory": "broken-links",
    "parameters": [
      "touch",
      "src/main/java/programming/PageLinks.java"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "23782a64-1299-49d1-93a3-a12b1aa30bb4",
    "name": "Create PageLinks class",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/PageLinks.java b/src/main/java/programming/PageLinks.java",
      "index e69de29..bd15441 100644",
      "--- a/src/main/java/programming/PageLinks.java",
      "+++ b/src/main/java/programming/PageLinks.java",
      "@@ -0,0 +1,10 @@",
      "+package programming;",
      "+",
      "+public class PageLinks {",
      "+",
      "+    public static PageLinks of(final PageLink... links) {",
      "+        return new PageLinks();",
      "+    }",
      "+",
      "+    private PageLinks() {}",
      "+}",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "54065030-5e62-4b0e-9cd7-ab427b4a32f2",
    "name": "Pass the PageParser to the BrokenLinks in the test",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/BrokenLinksTest.java b/src/test/java/programming/BrokenLinksTest.java",
      "index c4dd42f..c80c1df 100644",
      "--- a/src/test/java/programming/BrokenLinksTest.java",
      "+++ b/src/test/java/programming/BrokenLinksTest.java",
      "@@ -14,7 +14,7 @@ class BrokenLinksTest {",
      " ",
      "     private final PageGateway gateway = mock(PageGateway.class);",
      "     private final PageParser parser = mock(PageParser.class);",
      "-    private final BrokenLinks brokenLinks = new BrokenLinks(gateway);",
      "+    private final BrokenLinks brokenLinks = new BrokenLinks(gateway, parser);",
      " ",
      "     @BeforeEach",
      "     void setUp() {",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "fb8b0994-149e-4e79-a576-e96ac41c822b",
    "name": "Add PageParser to BrokenLinks",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index 3a1f800..2f29fe3 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -3,9 +3,11 @@ package programming;",
      " public class BrokenLinks {",
      " ",
      "     private final PageGateway gateway;",
      "+    private final PageParser parser;",
      " ",
      "-    public BrokenLinks(final PageGateway gateway) {",
      "+    public BrokenLinks(final PageGateway gateway, final PageParser parser) {",
      "         this.gateway = gateway;",
      "+        this.parser = parser;",
      "     }",
      " ",
      "     public ScanResult scan(final PageLink startPage) {",
      ""
    ]
  },
  {
    "type": "command",
    "id": "1e4deebf-7c7d-4c0d-98a5-ffc8b71fe12a",
    "name": "Compile project",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "compileTestJava"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "f082a7c3-9987-44d6-9992-84e5ad925ea5",
    "name": "Test links found in the start page",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index 421f850..4938c0d 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -16,6 +16,14 @@ public class BrokenLinks {",
      "         int brokenLinks = 0;",
      "         if (startPageResult.isFailure()) {",
      "             brokenLinks++;",
      "+        } else {",
      "+            final PageLinks links = parser.getLinks(startPageResult);",
      "+            for (final PageLink link : links) {",
      "+                final PageResult pageResult = gateway.getPage(link);",
      "+                if (pageResult.isFailure()) {",
      "+                    brokenLinks++;",
      "+                }",
      "+            }",
      "         }",
      " ",
      "         return new ScanResult(brokenLinks, 1);",
      ""
    ]
  },
  {
    "type": "todo",
    "id": "41941efd-a98b-4180-8cf9-83ecc4bc29ff",
    "parameters": [
      "The `PageLinks` class contains the list of links. There are different options to make the links accessible",
      "- getter (provide a getter method and expose the list and then iterate on this)",
      "- Implement `Iterable<PageLink>` (without exposing the backing list)"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "16a30988-b7a8-4a3d-8a3f-b297519cb70b",
    "name": "Count the number of tested links",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index 56bc343..359c40c 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -14,18 +14,23 @@ public class BrokenLinks {",
      "         final PageResult startPageResult = gateway.getPage(startPage);",
      " ",
      "         int brokenLinks = 0;",
      "+        int testedLinks = 0;",
      "+",
      "+        testedLinks++;",
      "         if (startPageResult.isFailure()) {",
      "             brokenLinks++;",
      "         } else {",
      "             final PageLinks links = parser.getLinks(startPageResult);",
      "             for (final PageLink link : links) {",
      "                 final PageResult pageResult = gateway.getPage(link);",
      "+",
      "+                testedLinks++;",
      "                 if (pageResult.isFailure()) {",
      "                     brokenLinks++;",
      "                 }",
      "             }",
      "         }",
      " ",
      "-        return new ScanResult(brokenLinks, 1);",
      "+        return new ScanResult(brokenLinks, testedLinks);",
      "     }",
      " }",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "d2b47908-0ce5-4b0e-a4e6-bc1e41667c0f",
    "name": "PageLinks implements Iterable<PageLink>",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/PageLinks.java b/src/main/java/programming/PageLinks.java",
      "index bd15441..19e52d4 100644",
      "--- a/src/main/java/programming/PageLinks.java",
      "+++ b/src/main/java/programming/PageLinks.java",
      "@@ -1,10 +1,18 @@",
      " package programming;",
      " ",
      "-public class PageLinks {",
      "+import java.util.Collections;",
      "+import java.util.Iterator;",
      "+",
      "+public class PageLinks implements Iterable<PageLink> {",
      " ",
      "     public static PageLinks of(final PageLink... links) {",
      "         return new PageLinks();",
      "     }",
      " ",
      "     private PageLinks() {}",
      "+",
      "+    @Override",
      "+    public Iterator<PageLink> iterator() {",
      "+        return Collections.emptyIterator();",
      "+    }",
      " }",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "8b77bf80-6df5-442a-922c-a13a3db06dba",
    "name": "Implement the iterator() method",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/PageLinks.java b/src/main/java/programming/PageLinks.java",
      "index 19e52d4..bdc7708 100644",
      "--- a/src/main/java/programming/PageLinks.java",
      "+++ b/src/main/java/programming/PageLinks.java",
      "@@ -1,18 +1,22 @@",
      " package programming;",
      " ",
      "-import java.util.Collections;",
      " import java.util.Iterator;",
      "+import java.util.List;",
      " ",
      " public class PageLinks implements Iterable<PageLink> {",
      " ",
      "+    private final List<PageLink> links;",
      "+",
      "     public static PageLinks of(final PageLink... links) {",
      "-        return new PageLinks();",
      "+        return new PageLinks(List.of(links));",
      "     }",
      " ",
      "-    private PageLinks() {}",
      "+    private PageLinks(final List<PageLink> links) {",
      "+        this.links = links;",
      "+    }",
      " ",
      "     @Override",
      "     public Iterator<PageLink> iterator() {",
      "-        return Collections.emptyIterator();",
      "+        return links.iterator();",
      "     }",
      " }",
      ""
    ]
  },
  {
    "type": "command",
    "id": "a3310773-365d-419b-bbce-a76505ac0a33",
    "name": "Test project",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test"
    ],
    "expectedExitValue": 1
  },
  {
    "type": "git-apply-patch",
    "id": "9867e7e0-f5d9-4da5-9383-b80833130a5d",
    "name": "Fix broken test",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/BrokenLinksTest.java b/src/test/java/programming/BrokenLinksTest.java",
      "index de55862..6f0cbf3 100644",
      "--- a/src/test/java/programming/BrokenLinksTest.java",
      "+++ b/src/test/java/programming/BrokenLinksTest.java",
      "@@ -39,7 +39,9 @@ class BrokenLinksTest {",
      "     void resultsInNoBrokenLinksWhenTheStartPageIsReachable() {",
      "         /* Given */",
      "         final PageLink startPage = PageLink.of(\"https://start-page-is-reachable/\");",
      "-        when(gateway.getPage(eq(startPage))).thenReturn(PageResult.ofBody(\"<html></html>\"));",
      "+        final PageResult startPageResult = PageResult.ofBody(\"<html></html>\");",
      "+        when(gateway.getPage(eq(startPage))).thenReturn(startPageResult);",
      "+        when(parser.getLinks(eq(startPageResult))).thenReturn(PageLinks.empty());",
      " ",
      "         /* When */",
      "         final ScanResult result = brokenLinks.scan(startPage);",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "5ba25d1b-a1bf-4536-9a28-2084c9558917",
    "name": "Implement empty() static factory method",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/PageLinks.java b/src/main/java/programming/PageLinks.java",
      "index 63bf4e8..9c666ab 100644",
      "--- a/src/main/java/programming/PageLinks.java",
      "+++ b/src/main/java/programming/PageLinks.java",
      "@@ -1,5 +1,6 @@",
      " package programming;",
      " ",
      "+import java.util.Collections;",
      " import java.util.Iterator;",
      " import java.util.List;",
      " ",
      "@@ -7,6 +8,10 @@ public class PageLinks implements Iterable<PageLink> {",
      " ",
      "     private final List<PageLink> links;",
      " ",
      "+    public static PageLinks empty() {",
      "+        return new PageLinks(Collections.emptyList());",
      "+    }",
      "+",
      "     public static PageLinks of(final PageLink... links) {",
      "         return new PageLinks(List.of(links));",
      "     }",
      ""
    ]
  },
  {
    "type": "command",
    "id": "81f39756-6078-43de-baa6-feb94dc7a8b4",
    "name": "Test project",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "75bd6333-c215-422b-901d-fb1254363b58",
    "name": "Does the body content matter?",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/BrokenLinksTest.java b/src/test/java/programming/BrokenLinksTest.java",
      "index 68f8522..bc197af 100644",
      "--- a/src/test/java/programming/BrokenLinksTest.java",
      "+++ b/src/test/java/programming/BrokenLinksTest.java",
      "@@ -60,14 +60,7 @@ class BrokenLinksTest {",
      "         final PageLink startPage = PageLink.of(\"https://start-page-is-reachable/\");",
      "         final PageLink externalPage1 = PageLink.of(\"https://external/page-1\");",
      "         final PageLink internalPage1 = PageLink.of(\"https://start-page-is-reachable/page-1\");",
      "-        final PageResult startPageResult = PageResult.ofBody(\"\"\"",
      "-                <html>",
      "-                  <body>",
      "-                    <a href=\"https://external/page-1\">External Page</a>",
      "-                    <a href=\"https://start-page-is-reachable/page-1\">Internal Page</a>",
      "-                  </body>",
      "-                </html>",
      "-                \"\"\");",
      "+        final PageResult startPageResult = PageResult.ofBody(\"Page with two links\");",
      "         when(gateway.getPage(eq(startPage))).thenReturn(startPageResult);",
      "         when(gateway.getPage(not(eq(startPage)))).thenReturn(PageResult.ofBody(\"<html></html>\"));",
      "         when(parser.getLinks(eq(startPageResult))).thenReturn(PageLinks.of(externalPage1, internalPage1));",
      ""
    ]
  },
  {
    "type": "command",
    "id": "446d52c9-80a6-42c2-8ddb-97577a2a1acf",
    "name": "Test project",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "9a25616e-76d8-4ebe-827f-974dc115439e",
    "name": "Add test to verify that external pages are not parsed and their links followed",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/BrokenLinksTest.java b/src/test/java/programming/BrokenLinksTest.java",
      "index 657c9e9..e810804 100644",
      "--- a/src/test/java/programming/BrokenLinksTest.java",
      "+++ b/src/test/java/programming/BrokenLinksTest.java",
      "@@ -77,4 +77,25 @@ class BrokenLinksTest {",
      "         verify(gateway, times(1)).getPage(internalPage1);",
      "         verifyNoMoreInteractions(gateway);",
      "     }",
      "+",
      "+    @Test",
      "+    void doesNotParseExternalPagesAndFollowTheirLinks() {",
      "+        /* Given */",
      "+        final PageLink startPage = PageLink.of(\"https://start-page-is-reachable/\");",
      "+        final PageLink externalPage1 = PageLink.of(\"https://external/page-1\");",
      "+        final PageResult startPageResult = PageResult.ofBody(\"Page with two links\");",
      "+        when(gateway.getPage(eq(startPage))).thenReturn(startPageResult);",
      "+        when(gateway.getPage(eq(externalPage1))).thenReturn(PageResult.ofBody(\"<html></html>\"));",
      "+        when(parser.getLinks(eq(startPageResult))).thenReturn(PageLinks.of(externalPage1));",
      "+",
      "+        /* When */",
      "+        final ScanResult result = brokenLinks.scan(startPage);",
      "+",
      "+        /* Then */",
      "+        final ScanResult expected = new ScanResult(0, 2);",
      "+        assertEquals(expected, result);",
      "+",
      "+        verify(parser, times(1)).getLinks(startPageResult);",
      "+        verifyNoMoreInteractions(parser);",
      "+    }",
      " }",
      ""
    ]
  },
  {
    "type": "command",
    "id": "18c92cf0-a596-477a-8d05-f4583182ab08",
    "name": "Test project",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "22b391cb-717f-44e1-8790-d4048ff4b959",
    "name": "Add test to verify that internal pages are parsed and followed",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/BrokenLinksTest.java b/src/test/java/programming/BrokenLinksTest.java",
      "index e810804..d8545a9 100644",
      "--- a/src/test/java/programming/BrokenLinksTest.java",
      "+++ b/src/test/java/programming/BrokenLinksTest.java",
      "@@ -97,4 +97,33 @@ class BrokenLinksTest {",
      "         verify(parser, times(1)).getLinks(startPageResult);",
      "         verifyNoMoreInteractions(parser);",
      "     }",
      "+",
      "+    @Test",
      "+    void parseInternalPagesAndFollowTheirLinks() {",
      "+        /* Given */",
      "+        final PageLink startPage = PageLink.of(\"https://start-page-is-reachable/\");",
      "+        final PageLink internalPage1 = PageLink.of(\"https://start-page-is-reachable/page-1\");",
      "+        final PageLink internalPage2 = PageLink.of(\"https://start-page-is-reachable/page-2\");",
      "+        final PageResult startPageResult = PageResult.ofBody(\"Page with a links\");",
      "+        final PageResult internalPage1Result = PageResult.ofBody(\"Page with a link\");",
      "+        final PageResult internalPage2Result = PageResult.ofBody(\"Page without links\");",
      "+        when(gateway.getPage(eq(startPage))).thenReturn(startPageResult);",
      "+        when(gateway.getPage(eq(internalPage1))).thenReturn(internalPage1Result);",
      "+        when(gateway.getPage(eq(internalPage2))).thenReturn(internalPage2Result);",
      "+        when(parser.getLinks(eq(startPageResult))).thenReturn(PageLinks.of(internalPage1));",
      "+        when(parser.getLinks(eq(internalPage1Result))).thenReturn(PageLinks.of(internalPage2));",
      "+        when(parser.getLinks(eq(internalPage2Result))).thenReturn(PageLinks.empty());",
      "+",
      "+        /* When */",
      "+        final ScanResult result = brokenLinks.scan(startPage);",
      "+",
      "+        /* Then */",
      "+        final ScanResult expected = new ScanResult(0, 3);",
      "+        assertEquals(expected, result);",
      "+",
      "+        verify(parser, times(1)).getLinks(startPageResult);",
      "+        verify(parser, times(1)).getLinks(internalPage1Result);",
      "+        verify(parser, times(1)).getLinks(internalPage2Result);",
      "+        verifyNoMoreInteractions(parser);",
      "+    }",
      " }",
      ""
    ]
  },
  {
    "type": "command",
    "id": "728c31f4-5404-4c4f-b36b-e1919145c31c",
    "name": "Test project",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test"
    ],
    "expectedExitValue": 1
  },
  {
    "type": "git-apply-patch",
    "id": "b56d1894-3ac1-4c4c-851a-2e5ee42e79c1",
    "name": "Move the counters up",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index 72a3adc..1c15abb 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -11,10 +11,10 @@ public class BrokenLinks {",
      "     }",
      " ",
      "     public ScanResult scan(final PageLink startPage) {",
      "-        final PageResult startPageResult = gateway.getPage(startPage);",
      "-",
      "         int brokenLinks = 0;",
      "         int testedLinks = 0;",
      "+",
      "+        final PageResult startPageResult = gateway.getPage(startPage);",
      " ",
      "         testedLinks++;",
      "         if (startPageResult.isFailure()) {",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "5a83cc0d-ed93-44c8-82d6-c6b271223d89",
    "name": "Introduce a list of pending links",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index 1c15abb..878f274 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -1,5 +1,8 @@",
      " package programming;",
      " ",
      "+import java.util.ArrayList;",
      "+import java.util.List;",
      "+",
      " public class BrokenLinks {",
      " ",
      "     private final PageGateway gateway;",
      "@@ -14,6 +17,9 @@ public class BrokenLinks {",
      "         int brokenLinks = 0;",
      "         int testedLinks = 0;",
      " ",
      "+        final List<PageLink> pending = new ArrayList<>();",
      "+        pending.add(startPage);",
      "+",
      "         final PageResult startPageResult = gateway.getPage(startPage);",
      " ",
      "         testedLinks++;",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "b6889918-34d3-43c4-ae98-fbbc771fcdf7",
    "name": "Take the next pending link",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index 563f86b..8443022 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -20,7 +20,8 @@ public class BrokenLinks {",
      "         final List<PageLink> pending = new ArrayList<>();",
      "         pending.add(startPage);",
      " ",
      "-        final PageResult startPageResult = gateway.getPage(startPage);",
      "+        final PageLink pageLink = pending.remove(0);",
      "+        final PageResult startPageResult = gateway.getPage(pageLink);",
      " ",
      "         testedLinks++;",
      "         if (startPageResult.isFailure()) {",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "f8dca9e2-2aac-43be-b6c8-d7c0c71a8e0e",
    "name": "Check if link is an internal page",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index 8443022..743bc85 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -26,7 +26,7 @@ public class BrokenLinks {",
      "         testedLinks++;",
      "         if (startPageResult.isFailure()) {",
      "             brokenLinks++;",
      "-        } else {",
      "+        } else if (pageLink.isWithin(startPage)) {",
      "             final PageLinks links = parser.getLinks(startPageResult);",
      "             for (final PageLink link : links) {",
      "                 final PageResult pageResult = gateway.getPage(link);",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "fe25a47d-4e63-4ec9-9e09-da1d9fa00133",
    "name": "Add the links to the pending links list",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index 743bc85..e36a11a 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -28,14 +28,7 @@ public class BrokenLinks {",
      "             brokenLinks++;",
      "         } else if (pageLink.isWithin(startPage)) {",
      "             final PageLinks links = parser.getLinks(startPageResult);",
      "-            for (final PageLink link : links) {",
      "-                final PageResult pageResult = gateway.getPage(link);",
      "-",
      "-                testedLinks++;",
      "-                if (pageResult.isFailure()) {",
      "-                    brokenLinks++;",
      "-                }",
      "-            }",
      "+            links.forEach(pending::add);",
      "         }",
      " ",
      "         return new ScanResult(brokenLinks, testedLinks);",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "068df300-528e-4dd0-bac2-2da54cddedf5",
    "name": "Implement the isWithin() method",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/PageLink.java b/src/main/java/programming/PageLink.java",
      "index b7755b8..4ab2947 100644",
      "--- a/src/main/java/programming/PageLink.java",
      "+++ b/src/main/java/programming/PageLink.java",
      "@@ -2,9 +2,17 @@ package programming;",
      " ",
      " public class PageLink {",
      " ",
      "+    private final String link;",
      "+",
      "     public static PageLink of(final String link) {",
      "-        return new PageLink();",
      "+        return new PageLink(link);",
      "+    }",
      "+",
      "+    private PageLink(final String link) {",
      "+        this.link = link;",
      "     }",
      " ",
      "-    private PageLink() {}",
      "+    public boolean isWithin(final PageLink other) {",
      "+        return link.startsWith(other.link);",
      "+    }",
      " }",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "468f7c18-9185-455f-aa65-5b22210b7ca9",
    "name": "Wrap the logic into a loop",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index e36a11a..62d5ae8 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -20,16 +20,18 @@ public class BrokenLinks {",
      "         final List<PageLink> pending = new ArrayList<>();",
      "         pending.add(startPage);",
      " ",
      "-        final PageLink pageLink = pending.remove(0);",
      "-        final PageResult startPageResult = gateway.getPage(pageLink);",
      "-",
      "-        testedLinks++;",
      "-        if (startPageResult.isFailure()) {",
      "-            brokenLinks++;",
      "-        } else if (pageLink.isWithin(startPage)) {",
      "-            final PageLinks links = parser.getLinks(startPageResult);",
      "-            links.forEach(pending::add);",
      "-        }",
      "+        do {",
      "+            final PageLink pageLink = pending.remove(0);",
      "+            final PageResult startPageResult = gateway.getPage(pageLink);",
      "+",
      "+            testedLinks++;",
      "+            if (startPageResult.isFailure()) {",
      "+                brokenLinks++;",
      "+            } else if (pageLink.isWithin(startPage)) {",
      "+                final PageLinks links = parser.getLinks(startPageResult);",
      "+                links.forEach(pending::add);",
      "+            }",
      "+        } while (pending.isEmpty() == false);",
      " ",
      "         return new ScanResult(brokenLinks, testedLinks);",
      "     }",
      ""
    ]
  },
  {
    "type": "todo",
    "id": "6a69f9c0-4df9-4118-b7cc-4cf211598a58",
    "parameters": [
      "Some fo the other tests will now fail as these are not properly mocked"
    ]
  },
  {
    "type": "command",
    "id": "d1260d37-a535-4604-b3ee-034cccc68821",
    "name": "Test project",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test",
      "--tests",
      "programming.BrokenLinksTest.parseInternalPagesAndFollowTheirLinks"
    ]
  },
  {
    "type": "command",
    "id": "311d0eb7-8e7c-4e7e-9cca-bbd73cc912ef",
    "name": "Test project",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test"
    ],
    "expectedExitValue": 1
  },
  {
    "type": "git-apply-patch",
    "id": "1e372f8b-8adb-40a0-bb4f-07581bdc7878",
    "name": "Fix broken test",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/BrokenLinksTest.java b/src/test/java/programming/BrokenLinksTest.java",
      "index 31863ce..e853a0d 100644",
      "--- a/src/test/java/programming/BrokenLinksTest.java",
      "+++ b/src/test/java/programming/BrokenLinksTest.java",
      "@@ -64,6 +64,7 @@ class BrokenLinksTest {",
      "         when(gateway.getPage(eq(startPage))).thenReturn(startPageResult);",
      "         when(gateway.getPage(not(eq(startPage)))).thenReturn(PageResult.ofBody(\"<html></html>\"));",
      "         when(parser.getLinks(eq(startPageResult))).thenReturn(PageLinks.of(externalPage1, internalPage1));",
      "+        when(parser.getLinks(not(eq(startPageResult)))).thenReturn(PageLinks.empty());",
      " ",
      "         /* When */",
      "         final ScanResult result = brokenLinks.scan(startPage);",
      ""
    ]
  },
  {
    "type": "command",
    "id": "9e11aecc-437a-43fd-94ed-4f5debb6c7f0",
    "name": "Test project",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "83b1bd6e-9133-46b2-9817-0151021f9e3e",
    "name": "Fail if the same link is fetched more than once",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/BrokenLinksTest.java b/src/test/java/programming/BrokenLinksTest.java",
      "index e853a0d..47bd314 100644",
      "--- a/src/test/java/programming/BrokenLinksTest.java",
      "+++ b/src/test/java/programming/BrokenLinksTest.java",
      "@@ -12,6 +12,7 @@ import static org.mockito.Mockito.when;",
      " ",
      " import org.junit.jupiter.api.BeforeEach;",
      " import org.junit.jupiter.api.Test;",
      "+import org.opentest4j.AssertionFailedError;",
      " ",
      " class BrokenLinksTest {",
      " ",
      "@@ -128,4 +129,13 @@ class BrokenLinksTest {",
      "         verify(parser, times(1)).getLinks(internalPage2Result);",
      "         verifyNoMoreInteractions(parser);",
      "     }",
      "+",
      "+    @Test",
      "+    void doesNotFollowTheSamePageTwice() {",
      "+        /* Given */",
      "+        final PageLink startPage = PageLink.of(\"https://start-page-is-reachable/\");",
      "+        final PageResult pageResult = PageResult.ofBody(\"Page with a link to itself\");",
      "+        when(gateway.getPage(eq(startPage))).thenReturn(pageResult)",
      "+                .thenThrow(new AssertionFailedError(\"The gateway was expected to be invoked only once for this page\"));",
      "+    }",
      " }",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "0929886a-4978-4092-99c8-cba383e087bc",
    "name": "Return the link to the same page simulating an infinite loop",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/BrokenLinksTest.java b/src/test/java/programming/BrokenLinksTest.java",
      "index 47bd314..11c9680 100644",
      "--- a/src/test/java/programming/BrokenLinksTest.java",
      "+++ b/src/test/java/programming/BrokenLinksTest.java",
      "@@ -137,5 +137,6 @@ class BrokenLinksTest {",
      "         final PageResult pageResult = PageResult.ofBody(\"Page with a link to itself\");",
      "         when(gateway.getPage(eq(startPage))).thenReturn(pageResult)",
      "                 .thenThrow(new AssertionFailedError(\"The gateway was expected to be invoked only once for this page\"));",
      "+        when(parser.getLinks(eq(pageResult))).thenReturn(PageLinks.of(startPage));",
      "     }",
      " }",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "bccd2224-4c59-4619-aca1-b70b7cb83c54",
    "name": "Add the assertions",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/BrokenLinksTest.java b/src/test/java/programming/BrokenLinksTest.java",
      "index 47bd314..11c9680 100644",
      "--- a/src/test/java/programming/BrokenLinksTest.java",
      "+++ b/src/test/java/programming/BrokenLinksTest.java",
      "@@ -137,6 +137,13 @@ class BrokenLinksTest {",
      "         final PageResult pageResult = PageResult.ofBody(\"Page with a link to itself\");",
      "         when(gateway.getPage(eq(startPage))).thenReturn(pageResult)",
      "                 .thenThrow(new AssertionFailedError(\"The gateway was expected to be invoked only once for this page\"));",
      "         when(parser.getLinks(eq(pageResult))).thenReturn(PageLinks.of(startPage));",
      "+",
      "+        /* When */",
      "+        final ScanResult result = brokenLinks.scan(startPage);",
      "+",
      "+        /* Then */",
      "+        final ScanResult expected = new ScanResult(0, 1);",
      "+        assertEquals(expected, result);",
      "     }",
      " }",
      ""
    ]
  },
  {
    "type": "command",
    "id": "81967bd9-ae3e-48c8-8474-31a1c27eca78",
    "name": "Test project",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test"
    ],
    "expectedExitValue": 1
  },
  {
    "type": "git-apply-patch",
    "id": "68e9d661-0f37-4653-8525-618d47b41850",
    "name": "Create queued set",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index 62d5ae8..0dcc74b 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -1,7 +1,9 @@",
      " package programming;",
      " ",
      " import java.util.ArrayList;",
      "+import java.util.HashSet;",
      " import java.util.List;",
      "+import java.util.Set;",
      " ",
      " public class BrokenLinks {",
      " ",
      "@@ -20,6 +22,9 @@ public class BrokenLinks {",
      "         final List<PageLink> pending = new ArrayList<>();",
      "         pending.add(startPage);",
      " ",
      "+        final Set<PageLink> queued = new HashSet<>();",
      "+        queued.add(startPage);",
      "+",
      "         do {",
      "             final PageLink pageLink = pending.remove(0);",
      "             final PageResult startPageResult = gateway.getPage(pageLink);",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "c1359395-e7cd-451f-8e88-ec34fdcde39c",
    "name": "Filter queued links",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/BrokenLinks.java b/src/main/java/programming/BrokenLinks.java",
      "index 0dcc74b..285db7a 100644",
      "--- a/src/main/java/programming/BrokenLinks.java",
      "+++ b/src/main/java/programming/BrokenLinks.java",
      "@@ -34,7 +34,11 @@ public class BrokenLinks {",
      "                 brokenLinks++;",
      "             } else if (pageLink.isWithin(startPage)) {",
      "                 final PageLinks links = parser.getLinks(startPageResult);",
      "-                links.forEach(pending::add);",
      "+                links.forEach(link -> {",
      "+                    if (queued.add(link)) {",
      "+                        pending.add(link);",
      "+                    }",
      "+                });",
      "             }",
      "         } while (pending.isEmpty() == false);",
      " ",
      ""
    ]
  },
  {
    "type": "command",
    "id": "8c314077-52ee-4dff-9dc9-86484aee626e",
    "name": "Test project",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test"
    ]
  },
  {
    "type": "git-commit-changes",
    "id": "af031207-e52d-4e7f-a050-c619bfa1c5c6",
    "name": "Parse links",
    "workingDirectory": "broken-links",
    "parameters": [
      "Parse links",
      "v2.7.30"
    ]
  },
  {
    "type": "section",
    "id": "06531cda-e513-4c75-b5c8-fff84a0655ef",
    "parameters": [
      "Overlapping Tests"
    ]
  },
  {
    "type": "todo",
    "id": "af5710e8-5129-42f0-a714-61d92c882af4",
    "parameters": [
      "The TDD process may generate overlapping tests.",
      "Instead if simply deleting these, we can use Mutation testing to make sure that we are not introducing gaps in our tests.",
      "Also, Mutation testing can help us identify existing gaps."
    ]
  },
  {
    "type": "subsection",
    "id": "8a413138-cc58-40fd-8493-b64afcd2219f",
    "parameters": [
      "Mutation Testing"
    ]
  },
  {
    "type": "git-tag-current-commit",
    "id": "9a78f719-a1fe-4814-83c0-89dc73aec7b4",
    "name": "Mutation Testing",
    "workingDirectory": "broken-links",
    "parameters": [
      "v3.0.0",
      "Start of Mutation Testing"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "e0cbfb1a-43e9-447f-9a9d-9170a0f15865",
    "name": "Add the Pitest gradle plugin",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/build.gradle b/build.gradle",
      "index eaba837..d250cda 100644",
      "--- a/build.gradle",
      "+++ b/build.gradle",
      "@@ -1,5 +1,6 @@",
      " plugins {",
      "     id \"application\"",
      "+    id \"info.solidsoft.pitest\" version \"1.6.0\"",
      " }",
      " ",
      " java {",
      ""
    ]
  },
  {
    "type": "command",
    "id": "8a172f0b-e11a-4459-bfdb-9385eec3f865",
    "name": "Run Pitest",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "tasks"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "d3a36a19-c4a8-4e3d-b316-72d1e3b32ada",
    "name": "Configure the Pitest gradle plugin",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/build.gradle b/build.gradle",
      "index d250cda..5fdc825 100644",
      "--- a/build.gradle",
      "+++ b/build.gradle",
      "@@ -14,6 +14,18 @@ application {",
      "     getMainClass().set(\"programming.Main\")",
      " }",
      " ",
      "+pitest {",
      "+    getTargetClasses().set([\"programming.*\"])",
      "+    getTestPlugin().set(\"junit5\")",
      "+    getPitestVersion().set(\"1.6.9\")",
      "+    getThreads().set(4)",
      "+    getOutputFormats().set([\"XML\", \"HTML\"])",
      "+    getTimestampedReports().set(false)",
      "+    getCoverageThreshold().set(70)",
      "+    getMutationThreshold().set(70)",
      "+    getTestStrengthThreshold().set(70)",
      "+}",
      "+",
      " repositories {",
      "     mavenCentral()",
      " }",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "3607d677-ef8e-4776-a330-5d409ce0c4ea",
    "name": "Add the JUnit 5 Pitest runtime",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/build.gradle b/build.gradle",
      "index 5fdc825..3a7553e 100644",
      "--- a/build.gradle",
      "+++ b/build.gradle",
      "@@ -37,6 +37,7 @@ dependencies {",
      "     testImplementation \"org.junit.jupiter:junit-jupiter:5.7.2\"",
      "     testImplementation \"org.mock-server:mockserver-junit-jupiter:5.11.2\"",
      "     testImplementation \"org.mockito:mockito-core:3.11.2\"",
      "+    testRuntimeOnly \"org.pitest:pitest-junit5-plugin:0.14\"",
      " }",
      " ",
      " test {",
      ""
    ]
  },
  {
    "type": "command",
    "id": "0577898c-8274-4535-b787-fb329c118e42",
    "name": "Run Pitest",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "pitest"
    ]
  },
  {
    "type": "todo",
    "id": "5a6c3f7a-0345-41c0-9da9-011f86df952c",
    "parameters": [
      "Pitest does not support records well yet and report these as untested.",
      "See: [Filter junk mutations from java records](https://github.com/hcoles/pitest/pull/919) for more details.",
      "We will bump the version once released."
    ]
  },
  {
    "type": "command",
    "id": "429cda1e-4f85-40cb-b50f-b99ce5be66bb",
    "name": "Open Pitest report",
    "workingDirectory": "broken-links",
    "parameters": [
      "open",
      "build/reports/pitest/index.html"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "de3d473d-0df4-44c7-87ca-cbe62a9de5bb",
    "name": "Set the thresholds to the current values",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/build.gradle b/build.gradle",
      "index 9493c0e..62cb08e 100644",
      "--- a/build.gradle",
      "+++ b/build.gradle",
      "@@ -21,9 +21,9 @@ pitest {",
      "     getThreads().set(4)",
      "     getOutputFormats().set([\"XML\", \"HTML\"])",
      "     getTimestampedReports().set(false)",
      "-    getCoverageThreshold().set(70)",
      "-    getMutationThreshold().set(70)",
      "-    getTestStrengthThreshold().set(70)",
      "+    getCoverageThreshold().set(85)",
      "+    getMutationThreshold().set(76)",
      "+    getTestStrengthThreshold().set(95)",
      " }",
      " ",
      " repositories {",
      ""
    ]
  },
  {
    "type": "command",
    "id": "5933e163-2434-4566-a859-a0ead83064e6",
    "name": "Run Pitest",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "pitest"
    ]
  },
  {
    "type": "todo",
    "id": "1a3822da-b28f-4e29-8a92-00b9ccab9f79",
    "parameters": [
      "I want to keep the test `resultsInOneBrokenLinkWhenTheStartPageIsNotReachable` because this describing a particular case.",
      "Tests are the best form of documentation."
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "f1415518-c5c8-4193-93dc-da5b30bf27bd",
    "name": "Disable all tests",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/BrokenLinksTest.java b/src/test/java/programming/BrokenLinksTest.java",
      "index 10dc35b..203dffe 100644",
      "--- a/src/test/java/programming/BrokenLinksTest.java",
      "+++ b/src/test/java/programming/BrokenLinksTest.java",
      "@@ -11,9 +11,11 @@ import static org.mockito.Mockito.verifyNoMoreInteractions;",
      " import static org.mockito.Mockito.when;",
      " ",
      " import org.junit.jupiter.api.BeforeEach;",
      "+import org.junit.jupiter.api.Disabled;",
      " import org.junit.jupiter.api.Test;",
      " import org.opentest4j.AssertionFailedError;",
      " ",
      "+@Disabled",
      " class BrokenLinksTest {",
      " ",
      "     private final PageGateway gateway = mock(PageGateway.class);",
      ""
    ]
  },
  {
    "type": "command",
    "id": "b0a371bc-0ae6-4b8b-b3e9-a05113d87b54",
    "name": "Run Pitest",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "pitest"
    ],
    "expectedExitValue": 1
  },
  {
    "type": "git-apply-patch",
    "id": "f947769f-9417-4ab0-98fa-f0b546d2b0cd",
    "name": "Enable all tests",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/BrokenLinksTest.java b/src/test/java/programming/BrokenLinksTest.java",
      "index 203dffe..10dc35b 100644",
      "--- a/src/test/java/programming/BrokenLinksTest.java",
      "+++ b/src/test/java/programming/BrokenLinksTest.java",
      "@@ -11,11 +11,9 @@ import static org.mockito.Mockito.verifyNoMoreInteractions;",
      " import static org.mockito.Mockito.when;",
      " ",
      " import org.junit.jupiter.api.BeforeEach;",
      "-import org.junit.jupiter.api.Disabled;",
      " import org.junit.jupiter.api.Test;",
      " import org.opentest4j.AssertionFailedError;",
      " ",
      "-@Disabled",
      " class BrokenLinksTest {",
      " ",
      "     private final PageGateway gateway = mock(PageGateway.class);",
      ""
    ]
  },
  {
    "type": "command",
    "id": "f3f25ca0-d465-4557-ac85-71fa87653979",
    "name": "Run Pitest",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "pitest"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "f2e65065-8532-4744-9b10-7c1e0c724aaf",
    "name": "Disable the resultsInNoBrokenLinksWhenTheStartPageIsReachable() test",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/BrokenLinksTest.java b/src/test/java/programming/BrokenLinksTest.java",
      "index 10dc35b..78a368f 100644",
      "--- a/src/test/java/programming/BrokenLinksTest.java",
      "+++ b/src/test/java/programming/BrokenLinksTest.java",
      "@@ -11,6 +11,7 @@ import static org.mockito.Mockito.verifyNoMoreInteractions;",
      " import static org.mockito.Mockito.when;",
      " ",
      " import org.junit.jupiter.api.BeforeEach;",
      "+import org.junit.jupiter.api.Disabled;",
      " import org.junit.jupiter.api.Test;",
      " import org.opentest4j.AssertionFailedError;",
      " ",
      "@@ -40,6 +41,7 @@ class BrokenLinksTest {",
      "     }",
      " ",
      "     @Test",
      "+    @Disabled",
      "     void resultsInNoBrokenLinksWhenTheStartPageIsReachable() {",
      "         /* Given */",
      "         final PageLink startPage = PageLink.of(\"https://start-page-is-reachable/\");",
      ""
    ]
  },
  {
    "type": "command",
    "id": "552f9b5b-6e0e-42aa-b7d2-451522c0e26b",
    "name": "Run Pitest",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "pitest"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "a2c4d405-fc49-4262-8f24-293ce63f6817",
    "name": "Remove the resultsInNoBrokenLinksWhenTheStartPageIsReachable() test",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/BrokenLinksTest.java b/src/test/java/programming/BrokenLinksTest.java",
      "index 78a368f..de040c4 100644",
      "--- a/src/test/java/programming/BrokenLinksTest.java",
      "+++ b/src/test/java/programming/BrokenLinksTest.java",
      "@@ -11,7 +11,6 @@ import static org.mockito.Mockito.verifyNoMoreInteractions;",
      " import static org.mockito.Mockito.when;",
      " ",
      " import org.junit.jupiter.api.BeforeEach;",
      "-import org.junit.jupiter.api.Disabled;",
      " import org.junit.jupiter.api.Test;",
      " import org.opentest4j.AssertionFailedError;",
      " ",
      "@@ -40,23 +39,6 @@ class BrokenLinksTest {",
      "         assertEquals(expected, result);",
      "     }",
      " ",
      "-    @Test",
      "-    @Disabled",
      "-    void resultsInNoBrokenLinksWhenTheStartPageIsReachable() {",
      "-        /* Given */",
      "-        final PageLink startPage = PageLink.of(\"https://start-page-is-reachable/\");",
      "-        final PageResult startPageResult = PageResult.ofBody(\"<html></html>\");",
      "-        when(gateway.getPage(eq(startPage))).thenReturn(startPageResult);",
      "-        when(parser.getLinks(eq(startPageResult))).thenReturn(PageLinks.empty());",
      "-",
      "-        /* When */",
      "-        final ScanResult result = brokenLinks.scan(startPage);",
      "-",
      "-        /* Then */",
      "-        final ScanResult expected = new ScanResult(0, 1);",
      "-        assertEquals(expected, result);",
      "-    }",
      "-",
      "     @Test",
      "     void testAllLinksFoundInTheStartPage() {",
      "         /* Given */",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "3bd07161-3e91-422b-8a2e-a4910242630f",
    "name": "Disable the testAllLinksFoundInTheStartPage() test",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/BrokenLinksTest.java b/src/test/java/programming/BrokenLinksTest.java",
      "index de040c4..b31deb1 100644",
      "--- a/src/test/java/programming/BrokenLinksTest.java",
      "+++ b/src/test/java/programming/BrokenLinksTest.java",
      "@@ -11,6 +11,7 @@ import static org.mockito.Mockito.verifyNoMoreInteractions;",
      " import static org.mockito.Mockito.when;",
      " ",
      " import org.junit.jupiter.api.BeforeEach;",
      "+import org.junit.jupiter.api.Disabled;",
      " import org.junit.jupiter.api.Test;",
      " import org.opentest4j.AssertionFailedError;",
      " ",
      "@@ -40,6 +41,7 @@ class BrokenLinksTest {",
      "     }",
      " ",
      "     @Test",
      "+    @Disabled",
      "     void testAllLinksFoundInTheStartPage() {",
      "         /* Given */",
      "         final PageLink startPage = PageLink.of(\"https://start-page-is-reachable/\");",
      ""
    ]
  },
  {
    "type": "command",
    "id": "1a9c8aea-58db-47ee-a1cf-a3fc64234896",
    "name": "Run Pitest",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "pitest"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "2a1681c9-96a4-42e9-8a8c-345b89bfc77f",
    "name": "Remove the testAllLinksFoundInTheStartPage() test",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/BrokenLinksTest.java b/src/test/java/programming/BrokenLinksTest.java",
      "index b31deb1..84950cf 100644",
      "--- a/src/test/java/programming/BrokenLinksTest.java",
      "+++ b/src/test/java/programming/BrokenLinksTest.java",
      "@@ -1,7 +1,6 @@",
      " package programming;",
      " ",
      " import static org.junit.jupiter.api.Assertions.assertEquals;",
      "-import static org.mockito.AdditionalMatchers.not;",
      " import static org.mockito.ArgumentMatchers.eq;",
      " import static org.mockito.Mockito.mock;",
      " import static org.mockito.Mockito.reset;",
      "@@ -11,7 +10,6 @@ import static org.mockito.Mockito.verifyNoMoreInteractions;",
      " import static org.mockito.Mockito.when;",
      " ",
      " import org.junit.jupiter.api.BeforeEach;",
      "-import org.junit.jupiter.api.Disabled;",
      " import org.junit.jupiter.api.Test;",
      " import org.opentest4j.AssertionFailedError;",
      " ",
      "@@ -40,32 +38,6 @@ class BrokenLinksTest {",
      "         assertEquals(expected, result);",
      "     }",
      " ",
      "-    @Test",
      "-    @Disabled",
      "-    void testAllLinksFoundInTheStartPage() {",
      "-        /* Given */",
      "-        final PageLink startPage = PageLink.of(\"https://start-page-is-reachable/\");",
      "-        final PageLink externalPage1 = PageLink.of(\"https://external/page-1\");",
      "-        final PageLink internalPage1 = PageLink.of(\"https://start-page-is-reachable/page-1\");",
      "-        final PageResult startPageResult = PageResult.ofBody(\"Page with two links\");",
      "-        when(gateway.getPage(eq(startPage))).thenReturn(startPageResult);",
      "-        when(gateway.getPage(not(eq(startPage)))).thenReturn(PageResult.ofBody(\"<html></html>\"));",
      "-        when(parser.getLinks(eq(startPageResult))).thenReturn(PageLinks.of(externalPage1, internalPage1));",
      "-        when(parser.getLinks(not(eq(startPageResult)))).thenReturn(PageLinks.empty());",
      "-",
      "-        /* When */",
      "-        final ScanResult result = brokenLinks.scan(startPage);",
      "-",
      "-        /* Then */",
      "-        final ScanResult expected = new ScanResult(0, 3);",
      "-        assertEquals(expected, result);",
      "-",
      "-        verify(gateway, times(1)).getPage(startPage);",
      "-        verify(gateway, times(1)).getPage(externalPage1);",
      "-        verify(gateway, times(1)).getPage(internalPage1);",
      "-        verifyNoMoreInteractions(gateway);",
      "-    }",
      "-",
      "     @Test",
      "     void doesNotParseExternalPagesAndFollowTheirLinks() {",
      "         /* Given */",
      ""
    ]
  },
  {
    "type": "git-commit-changes",
    "id": "82a51c51-65df-4ee2-a81e-1aa092236c58",
    "name": "Mutation Testing",
    "workingDirectory": "broken-links",
    "parameters": [
      "Mutation Testing",
      "v3.0.10"
    ]
  },
  {
    "type": "section",
    "id": "4ddb9caa-e3ff-4e13-b9cb-6f911261a22a",
    "parameters": [
      "Finalise the Project"
    ]
  },
  {
    "type": "subsection",
    "id": "f1edb766-cb50-4313-87fb-995b9d968555",
    "parameters": [
      "PageGateway"
    ]
  },
  {
    "type": "git-tag-current-commit",
    "id": "f6fa01f7-045c-46e0-89dd-220d39c53219",
    "name": "PageGateway",
    "workingDirectory": "broken-links",
    "parameters": [
      "v4.0.0",
      "Start of PageGateway"
    ]
  },
  {
    "type": "command",
    "id": "0a87c991-d4d6-4d8a-9000-74524e8cf6aa",
    "name": "Create PageGatewayTest test file",
    "workingDirectory": "broken-links",
    "parameters": [
      "touch",
      "src/test/java/programming/PageGatewayTest.java"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "086f57ef-ca6e-447c-b0a3-7e2bb8441968",
    "name": "Create the PageGatewayTest test class",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/PageGatewayTest.java b/src/test/java/programming/PageGatewayTest.java",
      "index e69de29..0aa7cbf 100644",
      "--- a/src/test/java/programming/PageGatewayTest.java",
      "+++ b/src/test/java/programming/PageGatewayTest.java",
      "@@ -0,0 +1,4 @@",
      "+package programming;",
      "+",
      "+class PageGatewayTest {",
      "+}",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "53d52d69-c9aa-491b-aee8-d4c78503483d",
    "name": "Add test when the domain is not found",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/PageGatewayTest.java b/src/test/java/programming/PageGatewayTest.java",
      "index 0aa7cbf..2ddbf7d 100644",
      "--- a/src/test/java/programming/PageGatewayTest.java",
      "+++ b/src/test/java/programming/PageGatewayTest.java",
      "@@ -1,4 +1,22 @@",
      " package programming;",
      " ",
      "+import static org.junit.jupiter.api.Assertions.assertEquals;",
      "+",
      "+import org.junit.jupiter.api.Test;",
      "+",
      " class PageGatewayTest {",
      "+",
      "+    @Test",
      "+    void resultInFailureWhenTheGivenDomainIsUnresolvable() {",
      "+        /* Given */",
      "+        final PageLink link = PageLink.of(\"https://some-non-existent-domain/\");",
      "+        final PageGateway gateway = new PageGateway();",
      "+",
      "+        /* When */",
      "+        final PageResult result = gateway.getPage(link);",
      "+",
      "+        /* Then */",
      "+        final PageResult expected = PageResult.ofFailure();",
      "+        assertEquals(expected, result);",
      "+    }",
      " }",
      ""
    ]
  },
  {
    "type": "command",
    "id": "498fe74b-0862-4a0d-b728-be5262a47ca7",
    "name": "Run new test",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test",
      "--tests",
      "programming.PageGatewayTest.resultInFailureWhenTheGivenDomainIsUnresolvable"
    ],
    "expectedExitValue": 1
  },
  {
    "type": "git-apply-patch",
    "id": "06e70ad5-5afc-4117-bb82-0ef3948481a8",
    "name": "First attempt to make the test pass",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/PageGateway.java b/src/main/java/programming/PageGateway.java",
      "index 4519892..8765a70 100644",
      "--- a/src/main/java/programming/PageGateway.java",
      "+++ b/src/main/java/programming/PageGateway.java",
      "@@ -3,6 +3,6 @@ package programming;",
      " public class PageGateway {",
      " ",
      "     public PageResult getPage(final PageLink link) {",
      "-        throw new RuntimeException(\"Not yet implemented\");",
      "+        return PageResult.ofFailure();",
      "     }",
      " }",
      ""
    ]
  },
  {
    "type": "command",
    "id": "4d8625ea-8c9a-4c31-a8b5-218d6661b8cf",
    "name": "Run new test",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test",
      "--tests",
      "programming.PageGatewayTest.resultInFailureWhenTheGivenDomainIsUnresolvable"
    ],
    "expectedExitValue": 1
  },
  {
    "type": "git-apply-patch",
    "id": "fd9554ae-dcc0-4bfc-9089-219d45be0763",
    "name": "Cache the empty PageResponse",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/PageResult.java b/src/main/java/programming/PageResult.java",
      "index 6de4cbe..34861e4 100644",
      "--- a/src/main/java/programming/PageResult.java",
      "+++ b/src/main/java/programming/PageResult.java",
      "@@ -4,6 +4,8 @@ import java.util.Optional;",
      " ",
      " public class PageResult {",
      " ",
      "+    private static final PageResult EMPTY = new PageResult(Optional.empty());",
      "+",
      "     private final Optional<String> body;",
      " ",
      "     public static PageResult ofBody(final String body) {",
      "@@ -11,7 +13,7 @@ public class PageResult {",
      "     }",
      " ",
      "     public static PageResult ofFailure() {",
      "-        return new PageResult(Optional.empty());",
      "+        return EMPTY;",
      "     }",
      " ",
      "     private PageResult(final Optional<String> body) {",
      ""
    ]
  },
  {
    "type": "command",
    "id": "ef75ea34-b6ad-477d-933c-9c1e49c58b27",
    "name": "Run new test",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "7ccfddc9-b16b-40ef-b6bc-fb64a04c413a",
    "name": "Move the test subject as a property",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/PageGatewayTest.java b/src/test/java/programming/PageGatewayTest.java",
      "index 2ddbf7d..5a2174f 100644",
      "--- a/src/test/java/programming/PageGatewayTest.java",
      "+++ b/src/test/java/programming/PageGatewayTest.java",
      "@@ -6,11 +6,12 @@ import org.junit.jupiter.api.Test;",
      " ",
      " class PageGatewayTest {",
      " ",
      "+    private final PageGateway gateway = new PageGateway();",
      "+",
      "     @Test",
      "     void resultInFailureWhenTheGivenDomainIsUnresolvable() {",
      "         /* Given */",
      "         final PageLink link = PageLink.of(\"https://some-non-existent-domain/\");",
      "-        final PageGateway gateway = new PageGateway();",
      " ",
      "         /* When */",
      "         final PageResult result = gateway.getPage(link);",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "2d0478c2-a690-499a-b66e-a36d7c6ec211",
    "name": "Add the Mock-Server test annotations",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/PageGatewayTest.java b/src/test/java/programming/PageGatewayTest.java",
      "index 5a2174f..3f4f872 100644",
      "--- a/src/test/java/programming/PageGatewayTest.java",
      "+++ b/src/test/java/programming/PageGatewayTest.java",
      "@@ -3,7 +3,12 @@ package programming;",
      " import static org.junit.jupiter.api.Assertions.assertEquals;",
      " ",
      " import org.junit.jupiter.api.Test;",
      "+import org.junit.jupiter.api.extension.ExtendWith;",
      "+import org.mockserver.junit.jupiter.MockServerExtension;",
      "+import org.mockserver.junit.jupiter.MockServerSettings;",
      " ",
      "+@MockServerSettings(ports = {8888})",
      "+@ExtendWith(MockServerExtension.class)",
      " class PageGatewayTest {",
      " ",
      "     private final PageGateway gateway = new PageGateway();",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "a8b6256b-f218-4aba-b39e-ac38ec289d1b",
    "name": "Add the Mock-Server client",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/PageGatewayTest.java b/src/test/java/programming/PageGatewayTest.java",
      "index 3f4f872..9e7a1f3 100644",
      "--- a/src/test/java/programming/PageGatewayTest.java",
      "+++ b/src/test/java/programming/PageGatewayTest.java",
      "@@ -2,8 +2,10 @@ package programming;",
      " ",
      " import static org.junit.jupiter.api.Assertions.assertEquals;",
      " ",
      "+import org.junit.jupiter.api.BeforeEach;",
      " import org.junit.jupiter.api.Test;",
      " import org.junit.jupiter.api.extension.ExtendWith;",
      "+import org.mockserver.integration.ClientAndServer;",
      " import org.mockserver.junit.jupiter.MockServerExtension;",
      " import org.mockserver.junit.jupiter.MockServerSettings;",
      " ",
      "@@ -13,6 +15,17 @@ class PageGatewayTest {",
      " ",
      "     private final PageGateway gateway = new PageGateway();",
      " ",
      "+    private final ClientAndServer client;",
      "+",
      "+    public PageGatewayTest(final ClientAndServer client) {",
      "+        this.client = client;",
      "+    }",
      "+",
      "+    @BeforeEach",
      "+    void setUp() {",
      "+        client.reset();",
      "+    }",
      "+",
      "     @Test",
      "     void resultInFailureWhenTheGivenDomainIsUnresolvable() {",
      "         /* Given */",
      ""
    ]
  },
  {
    "type": "command",
    "id": "15b8e8ab-bf4c-465a-b0fd-761fc9b6704e",
    "name": "Run new test",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "c2e98d87-0941-44f6-9157-021a4fb46fd7",
    "name": "Add test when the page is not found",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/PageGatewayTest.java b/src/test/java/programming/PageGatewayTest.java",
      "index 9e7a1f3..513ab6e 100644",
      "--- a/src/test/java/programming/PageGatewayTest.java",
      "+++ b/src/test/java/programming/PageGatewayTest.java",
      "@@ -1,7 +1,10 @@",
      " package programming;",
      " ",
      " import static org.junit.jupiter.api.Assertions.assertEquals;",
      "+import static org.mockserver.model.HttpRequest.request;",
      "+import static org.mockserver.model.HttpResponse.response;",
      " ",
      "+import org.apache.http.HttpStatus;",
      " import org.junit.jupiter.api.BeforeEach;",
      " import org.junit.jupiter.api.Test;",
      " import org.junit.jupiter.api.extension.ExtendWith;",
      "@@ -38,4 +41,19 @@ class PageGatewayTest {",
      "         final PageResult expected = PageResult.ofFailure();",
      "         assertEquals(expected, result);",
      "     }",
      "+",
      "+    @Test",
      "+    void resultInFailureWhenTheGivenPageIsNotFound() {",
      "+        /* Given */",
      "+        final PageLink link = PageLink.of(\"http://localhost:8888/page-not-found\");",
      "+        client.when(request(\"/page-not-found\"))",
      "+                .respond(response().withStatusCode(HttpStatus.SC_NOT_FOUND));",
      "+",
      "+        /* When */",
      "+        final PageResult result = gateway.getPage(link);",
      "+",
      "+        /* Then */",
      "+        final PageResult expected = PageResult.ofFailure();",
      "+        assertEquals(expected, result);",
      "+    }",
      " }",
      ""
    ]
  },
  {
    "type": "command",
    "id": "8c5a4799-3a55-4a10-9b5c-60df704ed0cf",
    "name": "Run new test",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "8b6c0b1b-bde2-4931-ab27-59bf1bc91599",
    "name": "Add test when the page is found",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/PageGatewayTest.java b/src/test/java/programming/PageGatewayTest.java",
      "index 513ab6e..8e9057b 100644",
      "--- a/src/test/java/programming/PageGatewayTest.java",
      "+++ b/src/test/java/programming/PageGatewayTest.java",
      "@@ -56,4 +56,20 @@ class PageGatewayTest {",
      "         final PageResult expected = PageResult.ofFailure();",
      "         assertEquals(expected, result);",
      "     }",
      "+",
      "+    @Test",
      "+    void resultWithThePageBodyWhenTheGivenPageIsFound() {",
      "+        /* Given */",
      "+        final PageLink link = PageLink.of(\"http://localhost:8888/page-found\");",
      "+        final String body = \"<html></html>\";",
      "+        client.when(request(\"/page-found\"))",
      "+                .respond(response().withStatusCode(HttpStatus.SC_OK).withBody(body));",
      "+",
      "+        /* When */",
      "+        final PageResult result = gateway.getPage(link);",
      "+",
      "+        /* Then */",
      "+        final PageResult expected = PageResult.ofBody(body);",
      "+        assertEquals(expected, result);",
      "+    }",
      " }",
      ""
    ]
  },
  {
    "type": "command",
    "id": "295036fc-12e5-426e-9eeb-f8dfe5666a3a",
    "name": "Run new test",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test",
      "--tests",
      "programming.PageGatewayTest.resultWithThePageBodyWhenTheGivenPageIsFound"
    ],
    "expectedExitValue": 1
  },
  {
    "type": "git-apply-patch",
    "id": "c5c448ab-0cdd-4e9e-b27c-5bfe623b94ff",
    "name": "Add the HttpClient",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/PageGateway.java b/src/main/java/programming/PageGateway.java",
      "index 8765a70..bb110d3 100644",
      "--- a/src/main/java/programming/PageGateway.java",
      "+++ b/src/main/java/programming/PageGateway.java",
      "@@ -1,8 +1,12 @@",
      " package programming;",
      " ",
      "+import java.net.http.HttpClient;",
      "+",
      " public class PageGateway {",
      " ",
      "     public PageResult getPage(final PageLink link) {",
      "+        final HttpClient client = HttpClient.newBuilder().build();",
      "+",
      "         return PageResult.ofFailure();",
      "     }",
      " }",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "04f67511-f6cb-4e25-9725-c71483d5c054",
    "name": "Add the HttpRequest",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/PageGateway.java b/src/main/java/programming/PageGateway.java",
      "index bb110d3..95eaedb 100644",
      "--- a/src/main/java/programming/PageGateway.java",
      "+++ b/src/main/java/programming/PageGateway.java",
      "@@ -1,12 +1,17 @@",
      " package programming;",
      " ",
      " import java.net.http.HttpClient;",
      "+import java.net.http.HttpRequest;",
      " ",
      " public class PageGateway {",
      " ",
      "     public PageResult getPage(final PageLink link) {",
      "         final HttpClient client = HttpClient.newBuilder().build();",
      " ",
      "+        final HttpRequest request = HttpRequest.newBuilder()",
      "+                .uri(link.asUri())",
      "+                .build();",
      "+",
      "         return PageResult.ofFailure();",
      "     }",
      " }",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "bf7818e5-d6b0-47b3-ba68-84e7a3655d7d",
    "name": "Implement the asUri() method",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/PageLink.java b/src/main/java/programming/PageLink.java",
      "index 4ab2947..618309d 100644",
      "--- a/src/main/java/programming/PageLink.java",
      "+++ b/src/main/java/programming/PageLink.java",
      "@@ -1,5 +1,7 @@",
      " package programming;",
      " ",
      "+import java.net.URI;",
      "+",
      " public class PageLink {",
      " ",
      "     private final String link;",
      "@@ -15,4 +17,8 @@ public class PageLink {",
      "     public boolean isWithin(final PageLink other) {",
      "         return link.startsWith(other.link);",
      "     }",
      "+",
      "+    public URI asUri() {",
      "+        return URI.create(link);",
      "+    }",
      " }",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "0c8d81df-f1b9-4b45-8b8e-3068ef628fa7",
    "name": "Make the request and return the PageResult",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/PageGateway.java b/src/main/java/programming/PageGateway.java",
      "index 95eaedb..c35fcc8 100644",
      "--- a/src/main/java/programming/PageGateway.java",
      "+++ b/src/main/java/programming/PageGateway.java",
      "@@ -2,6 +2,7 @@ package programming;",
      " ",
      " import java.net.http.HttpClient;",
      " import java.net.http.HttpRequest;",
      "+import java.net.http.HttpResponse;",
      " ",
      " public class PageGateway {",
      " ",
      "@@ -12,6 +13,15 @@ public class PageGateway {",
      "                 .uri(link.asUri())",
      "                 .build();",
      " ",
      "+        try {",
      "+            final HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());",
      "+            if (response.statusCode() == 200) {",
      "+                return PageResult.ofBody(response.body());",
      "+            }",
      "+        } catch (final Exception e) {",
      "+            throw new RuntimeException(\"Failed to follow link\", e);",
      "+        }",
      "+",
      "         return PageResult.ofFailure();",
      "     }",
      " }",
      ""
    ]
  },
  {
    "type": "command",
    "id": "16e5321b-22ea-48c6-a9db-c6362cfc5b4e",
    "name": "Run new test",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test",
      "--tests",
      "programming.PageGatewayTest.resultWithThePageBodyWhenTheGivenPageIsFound"
    ],
    "expectedExitValue": 1
  },
  {
    "type": "git-apply-patch",
    "id": "f86c75ea-ef22-48ad-ac67-047aebf2a6d2",
    "name": "Implement the PageResult equals() and hashCode() methods",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/PageResult.java b/src/main/java/programming/PageResult.java",
      "index 34861e4..8da1998 100644",
      "--- a/src/main/java/programming/PageResult.java",
      "+++ b/src/main/java/programming/PageResult.java",
      "@@ -23,4 +23,18 @@ public class PageResult {",
      "     public boolean isFailure() {",
      "         return body.isEmpty();",
      "     }",
      "+",
      "+    @Override",
      "+    public boolean equals(final Object object) {",
      "+        if (this == object) { return true; }",
      "+        if (object == null || getClass() != object.getClass()) { return false; }",
      "+",
      "+        final PageResult other = (PageResult) object;",
      "+        return body.equals(other.body);",
      "+    }",
      "+",
      "+    @Override",
      "+    public int hashCode() {",
      "+        return body.hashCode();",
      "+    }",
      " }",
      ""
    ]
  },
  {
    "type": "command",
    "id": "43cfd5a2-70fd-4dd8-b45e-179e04ec82ea",
    "name": "Run new test",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test",
      "--tests",
      "programming.PageGatewayTest.resultWithThePageBodyWhenTheGivenPageIsFound"
    ]
  },
  {
    "type": "command",
    "id": "437aa6d8-ea1b-43ca-b83d-aa06d2368b28",
    "name": "Run new test",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test",
      "--tests",
      "programming.PageGatewayTest"
    ],
    "expectedExitValue": 1
  },
  {
    "type": "git-apply-patch",
    "id": "55c24045-0400-4ecf-9bba-77975d4cf95a",
    "name": "Suppress IOExceptions",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/PageGateway.java b/src/main/java/programming/PageGateway.java",
      "index c35fcc8..cd0a4cb 100644",
      "--- a/src/main/java/programming/PageGateway.java",
      "+++ b/src/main/java/programming/PageGateway.java",
      "@@ -1,5 +1,6 @@",
      " package programming;",
      " ",
      "+import java.io.IOException;",
      " import java.net.http.HttpClient;",
      " import java.net.http.HttpRequest;",
      " import java.net.http.HttpResponse;",
      "@@ -18,6 +19,8 @@ public class PageGateway {",
      "             if (response.statusCode() == 200) {",
      "                 return PageResult.ofBody(response.body());",
      "             }",
      "+        } catch (final IOException e) {",
      "+            /* Do nothing and return a failure */",
      "         } catch (final Exception e) {",
      "             throw new RuntimeException(\"Failed to follow link\", e);",
      "         }",
      ""
    ]
  },
  {
    "type": "command",
    "id": "1b97d286-cff3-41f5-a850-ac8e3222e66e",
    "name": "Run new test",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test",
      "--tests",
      "programming.PageGatewayTest.resultWithThePageBodyWhenTheGivenPageIsFound"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "7cce9775-952c-456d-a9aa-774a2995c88b",
    "name": "Add test when the server takes long to reply",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/PageGatewayTest.java b/src/test/java/programming/PageGatewayTest.java",
      "index 8e9057b..5c8062c 100644",
      "--- a/src/test/java/programming/PageGatewayTest.java",
      "+++ b/src/test/java/programming/PageGatewayTest.java",
      "@@ -4,13 +4,17 @@ import static org.junit.jupiter.api.Assertions.assertEquals;",
      " import static org.mockserver.model.HttpRequest.request;",
      " import static org.mockserver.model.HttpResponse.response;",
      " ",
      "+import java.util.concurrent.TimeUnit;",
      "+",
      " import org.apache.http.HttpStatus;",
      " import org.junit.jupiter.api.BeforeEach;",
      " import org.junit.jupiter.api.Test;",
      "+import org.junit.jupiter.api.Timeout;",
      " import org.junit.jupiter.api.extension.ExtendWith;",
      " import org.mockserver.integration.ClientAndServer;",
      " import org.mockserver.junit.jupiter.MockServerExtension;",
      " import org.mockserver.junit.jupiter.MockServerSettings;",
      "+import org.mockserver.model.Delay;",
      " ",
      " @MockServerSettings(ports = {8888})",
      " @ExtendWith(MockServerExtension.class)",
      "@@ -57,6 +61,22 @@ class PageGatewayTest {",
      "         assertEquals(expected, result);",
      "     }",
      " ",
      "+    @Test",
      "+    @Timeout(value = 6, unit = TimeUnit.SECONDS)",
      "+    void resultInFailureWhenTheServerTakesLongerThan5SecondsToReply() {",
      "+        /* Given */",
      "+        final PageLink link = PageLink.of(\"http://localhost:8888/page-take-too-long\");",
      "+        client.when(request(\"/page-take-too-long\"))",
      "+                .respond(response().withStatusCode(HttpStatus.SC_OK).withDelay(Delay.seconds(6)));",
      "+",
      "+        /* When */",
      "+        final PageResult result = gateway.getPage(link);",
      "+",
      "+        /* Then */",
      "+        final PageResult expected = PageResult.ofFailure();",
      "+        assertEquals(expected, result);",
      "+    }",
      "+",
      "     @Test",
      "     void resultWithThePageBodyWhenTheGivenPageIsFound() {",
      "         /* Given */",
      ""
    ]
  },
  {
    "type": "command",
    "id": "e75467ec-9d99-4336-a5c2-1a71c260ad3e",
    "name": "Run new test",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test",
      "--tests",
      "programming.PageGatewayTest.resultWithThePageBodyWhenTheGivenPageIsFound"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "a15f0f69-478f-4d19-9b5d-5ed7e7628b53",
    "name": "Add the timeout to request",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/PageGateway.java b/src/main/java/programming/PageGateway.java",
      "index cd0a4cb..f2fe32d 100644",
      "--- a/src/main/java/programming/PageGateway.java",
      "+++ b/src/main/java/programming/PageGateway.java",
      "@@ -4,6 +4,7 @@ import java.io.IOException;",
      " import java.net.http.HttpClient;",
      " import java.net.http.HttpRequest;",
      " import java.net.http.HttpResponse;",
      "+import java.time.Duration;",
      " ",
      " public class PageGateway {",
      " ",
      "@@ -11,6 +12,7 @@ public class PageGateway {",
      "         final HttpClient client = HttpClient.newBuilder().build();",
      " ",
      "         final HttpRequest request = HttpRequest.newBuilder()",
      "+                .timeout(Duration.ofSeconds(5))",
      "                 .uri(link.asUri())",
      "                 .build();",
      " ",
      ""
    ]
  },
  {
    "type": "command",
    "id": "20126418-ff89-4f86-a061-93d6d7a6b8f2",
    "name": "Run the tests",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test",
      "--tests",
      "programming.PageGatewayTest"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "d51681b6-6e46-410f-9003-d6fffcfa02a5",
    "name": "Add test when current Thread is interrupted when waiting for response",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/PageGatewayTest.java b/src/test/java/programming/PageGatewayTest.java",
      "index 5a05cfd..9a3fad0 100644",
      "--- a/src/test/java/programming/PageGatewayTest.java",
      "+++ b/src/test/java/programming/PageGatewayTest.java",
      "@@ -1,6 +1,8 @@",
      " package programming;",
      " ",
      " import static org.junit.jupiter.api.Assertions.assertEquals;",
      "+import static org.junit.jupiter.api.Assertions.assertThrows;",
      "+import static org.junit.jupiter.api.Assertions.assertTrue;",
      " import static org.mockserver.model.HttpRequest.request;",
      " import static org.mockserver.model.HttpResponse.response;",
      " ",
      "@@ -11,6 +13,7 @@ import org.junit.jupiter.api.BeforeEach;",
      " import org.junit.jupiter.api.Test;",
      " import org.junit.jupiter.api.Timeout;",
      " import org.junit.jupiter.api.extension.ExtendWith;",
      "+import org.junit.jupiter.api.function.Executable;",
      " import org.mockserver.integration.ClientAndServer;",
      " import org.mockserver.junit.jupiter.MockServerExtension;",
      " import org.mockserver.junit.jupiter.MockServerSettings;",
      "@@ -77,6 +80,22 @@ class PageGatewayTest {",
      "         assertEquals(expected, result);",
      "     }",
      " ",
      "+    @Test",
      "+    void resultInARuntimeExceptionAsTheCurrentThreadIsInterruptedWhileWaitingForTheReply() {",
      "+        /* Given */",
      "+        final PageLink link = PageLink.of(\"http://localhost:8888/interrupt-while-waiting\");",
      "+        client.when(request(\"/interrupt-while-waiting\"))",
      "+                .respond(response().withStatusCode(HttpStatus.SC_OK).withDelay(Delay.seconds(2)));",
      "+        Thread.currentThread().interrupt();",
      "+",
      "+        /* When */",
      "+        final Executable getPageExecutes = () -> gateway.getPage(link);",
      "+",
      "+        /* Then */",
      "+        assertThrows(RuntimeException.class, getPageExecutes);",
      "+        assertTrue(Thread.interrupted());",
      "+    }",
      "+",
      "     @Test",
      "     void resultWithThePageBodyWhenTheGivenPageIsFound() {",
      "         /* Given */",
      ""
    ]
  },
  {
    "type": "command",
    "id": "21d308d1-0c18-4e30-bead-87abba2187fe",
    "name": "Run the new test",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test",
      "--tests",
      "programming.PageGatewayTest.resultInARuntimeExceptionAsTheCurrentThreadIsInterruptedWhileWaitingForTheReply"
    ],
    "expectedExitValue": 1
  },
  {
    "type": "git-apply-patch",
    "id": "b0d33508-735b-4882-9555-29e1f5f247c4",
    "name": "Handle Thread interruptions",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/PageGateway.java b/src/main/java/programming/PageGateway.java",
      "index f2fe32d..4d3dc15 100644",
      "--- a/src/main/java/programming/PageGateway.java",
      "+++ b/src/main/java/programming/PageGateway.java",
      "@@ -23,8 +23,9 @@ public class PageGateway {",
      "             }",
      "         } catch (final IOException e) {",
      "             /* Do nothing and return a failure */",
      "-        } catch (final Exception e) {",
      "-            throw new RuntimeException(\"Failed to follow link\", e);",
      "+        } catch (final InterruptedException e) {",
      "+            Thread.currentThread().interrupt();",
      "+            throw new RuntimeException(\"Was interrupted while waiting for the response\", e);",
      "         }",
      " ",
      "         return PageResult.ofFailure();",
      ""
    ]
  },
  {
    "type": "command",
    "id": "67feb092-2ed6-4ea8-bf40-90d9fd3ffefa",
    "name": "Run the tests",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test"
    ]
  },
  {
    "type": "todo",
    "id": "0baf0279-d509-439e-90e4-c5974bd4944a",
    "parameters": [
      "I have an issue with PITEST",
      "I created another sample and works well there, but it is failing with this code.",
      "Need to investigate this further as some mutations are succeeding when the tests actually fail",
      "The following command is skipped for now"
    ]
  },
  {
    "type": "command",
    "id": "3024894c-f1fc-48f2-967e-3aa047a47831",
    "name": "Run the mutation tests",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "pitest"
    ],
    "dryRun": true
  },
  {
    "type": "todo",
    "id": "7bbc78ef-90ca-48c9-9b1e-6e1fda3b4498",
    "parameters": [
      "While the following is optional, I believe it makes the code read better"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "e82becd8-d084-484b-abae-b6b05c3878c6",
    "name": "Extract the HTTP client",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/PageGateway.java b/src/main/java/programming/PageGateway.java",
      "index 4d3dc15..4d8dc83 100644",
      "--- a/src/main/java/programming/PageGateway.java",
      "+++ b/src/main/java/programming/PageGateway.java",
      "@@ -8,9 +8,9 @@ import java.time.Duration;",
      " ",
      " public class PageGateway {",
      " ",
      "-    public PageResult getPage(final PageLink link) {",
      "-        final HttpClient client = HttpClient.newBuilder().build();",
      "+    final HttpClient client = HttpClient.newBuilder().build();",
      " ",
      "+    public PageResult getPage(final PageLink link) {",
      "         final HttpRequest request = HttpRequest.newBuilder()",
      "                 .timeout(Duration.ofSeconds(5))",
      "                 .uri(link.asUri())",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "020607bb-db32-48a5-8edd-c938d5ad28e8",
    "name": "Create a static factory method to create the HTTP client",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/PageGateway.java b/src/main/java/programming/PageGateway.java",
      "index 4d8dc83..59f8573 100644",
      "--- a/src/main/java/programming/PageGateway.java",
      "+++ b/src/main/java/programming/PageGateway.java",
      "@@ -8,7 +8,7 @@ import java.time.Duration;",
      " ",
      " public class PageGateway {",
      " ",
      "-    final HttpClient client = HttpClient.newBuilder().build();",
      "+    final HttpClient client = createHttpClient();",
      " ",
      "     public PageResult getPage(final PageLink link) {",
      "         final HttpRequest request = HttpRequest.newBuilder()",
      "@@ -30,4 +30,8 @@ public class PageGateway {",
      " ",
      "         return PageResult.ofFailure();",
      "     }",
      "+",
      "+    private static HttpClient createHttpClient() {",
      "+        return HttpClient.newBuilder().build();",
      "+    }",
      " }",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "5c779d26-9e65-439b-a795-70020fef5a44",
    "name": "Create a static factory method to create the HTTP request",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/PageGateway.java b/src/main/java/programming/PageGateway.java",
      "index 59f8573..030b1a4 100644",
      "--- a/src/main/java/programming/PageGateway.java",
      "+++ b/src/main/java/programming/PageGateway.java",
      "@@ -11,10 +11,7 @@ public class PageGateway {",
      "     final HttpClient client = createHttpClient();",
      " ",
      "     public PageResult getPage(final PageLink link) {",
      "-        final HttpRequest request = HttpRequest.newBuilder()",
      "-                .timeout(Duration.ofSeconds(5))",
      "-                .uri(link.asUri())",
      "-                .build();",
      "+        final HttpRequest request = createHttpRequest(link);",
      " ",
      "         try {",
      "             final HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());",
      "@@ -31,6 +28,13 @@ public class PageGateway {",
      "         return PageResult.ofFailure();",
      "     }",
      " ",
      "+    private static HttpRequest createHttpRequest(final PageLink link) {",
      "+        return HttpRequest.newBuilder()",
      "+                .timeout(Duration.ofSeconds(5))",
      "+                .uri(link.asUri())",
      "+                .build();",
      "+    }",
      "+",
      "     private static HttpClient createHttpClient() {",
      "         return HttpClient.newBuilder().build();",
      "     }",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "f531d351-68da-4924-abd8-58ee18db698a",
    "name": "Create a method that takes the link and makes the request",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/PageGateway.java b/src/main/java/programming/PageGateway.java",
      "index 030b1a4..99d40ad 100644",
      "--- a/src/main/java/programming/PageGateway.java",
      "+++ b/src/main/java/programming/PageGateway.java",
      "@@ -11,10 +11,8 @@ public class PageGateway {",
      "     final HttpClient client = createHttpClient();",
      " ",
      "     public PageResult getPage(final PageLink link) {",
      "-        final HttpRequest request = createHttpRequest(link);",
      "-",
      "         try {",
      "-            final HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());",
      "+            final HttpResponse<String> response = requestPage(link);",
      "             if (response.statusCode() == 200) {",
      "                 return PageResult.ofBody(response.body());",
      "             }",
      "@@ -28,6 +26,11 @@ public class PageGateway {",
      "         return PageResult.ofFailure();",
      "     }",
      " ",
      "+    private HttpResponse<String> requestPage(final PageLink link) throws IOException, InterruptedException {",
      "+        final HttpRequest request = createHttpRequest(link);",
      "+        return client.send(request, HttpResponse.BodyHandlers.ofString());",
      "+    }",
      "+",
      "     private static HttpRequest createHttpRequest(final PageLink link) {",
      "         return HttpRequest.newBuilder()",
      "                 .timeout(Duration.ofSeconds(5))",
      ""
    ]
  },
  {
    "type": "command",
    "id": "81fa74e0-7709-4da7-848c-1addf2c521ab",
    "name": "Run the tests",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test"
    ]
  },
  {
    "type": "git-commit-changes",
    "id": "8885f5aa-102f-4c5a-89af-64f7d2084d31",
    "name": "PageGateway",
    "workingDirectory": "broken-links",
    "parameters": [
      "PageGateway",
      "v4.0.23"
    ]
  },
  {
    "type": "subsection",
    "id": "efef59eb-c7d3-4802-9492-d6c4c5f6129d",
    "parameters": [
      "PageParser"
    ]
  },
  {
    "type": "git-tag-current-commit",
    "id": "17549052-3553-4a93-9806-ca6ff111085f",
    "name": "PageParser",
    "workingDirectory": "broken-links",
    "parameters": [
      "v4.1.0",
      "Start of PageParser"
    ]
  },
  {
    "type": "command",
    "id": "88f4dff6-db76-47e1-bec1-3065a4d46c93",
    "name": "Create PageParserTest test file",
    "workingDirectory": "broken-links",
    "parameters": [
      "touch",
      "src/test/java/programming/PageParserTest.java"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "93a09185-9e0b-4129-ac3c-6c63f093807e",
    "name": "Create the PageParserTest test class",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/PageParserTest.java b/src/test/java/programming/PageParserTest.java",
      "index e69de29..7864069 100644",
      "--- a/src/test/java/programming/PageParserTest.java",
      "+++ b/src/test/java/programming/PageParserTest.java",
      "@@ -0,0 +1,7 @@",
      "+package programming;",
      "+",
      "+class PageParserTest {",
      "+",
      "+    private final PageParser parser = new PageParser();",
      "+",
      "+}",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "bfb0bd6c-aa43-47d9-a5a9-dff45130ff06",
    "name": "Add test when given a failed PageResult",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/PageParserTest.java b/src/test/java/programming/PageParserTest.java",
      "index 7864069..8466736 100644",
      "--- a/src/test/java/programming/PageParserTest.java",
      "+++ b/src/test/java/programming/PageParserTest.java",
      "@@ -1,7 +1,23 @@",
      " package programming;",
      " ",
      "+import static org.junit.jupiter.api.Assertions.assertEquals;",
      "+",
      "+import org.junit.jupiter.api.Test;",
      "+",
      " class PageParserTest {",
      " ",
      "     private final PageParser parser = new PageParser();",
      " ",
      "+    @Test",
      "+    void resultsInAnEmptyListWhenGivenAFailedResult() {",
      "+        /* Given */",
      "+        final PageResult result = PageResult.ofFailure();",
      "+",
      "+        /* When */",
      "+        final PageLinks links = parser.getLinks(result);",
      "+",
      "+        /* Then */",
      "+        final PageLinks expected = PageLinks.empty();",
      "+        assertEquals(expected, links);",
      "+    }",
      " }",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "abd5b2e7-d511-4eb7-9ae5-5d034d95d18c",
    "name": "First attempt to make the test pass",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/PageParser.java b/src/main/java/programming/PageParser.java",
      "index 951ab33..581a2fc 100644",
      "--- a/src/main/java/programming/PageParser.java",
      "+++ b/src/main/java/programming/PageParser.java",
      "@@ -3,6 +3,6 @@ package programming;",
      " public class PageParser {",
      " ",
      "     public PageLinks getLinks(final PageResult page) {",
      "-        throw new RuntimeException(\"Not yet implemented\");",
      "+        return PageLinks.empty();",
      "     }",
      " }",
      ""
    ]
  },
  {
    "type": "command",
    "id": "0cc3c893-8902-4b23-afd5-88be8a6e49cc",
    "name": "Run the new test",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test",
      "--tests",
      "programming.PageParserTest.resultsInAnEmptyListWhenGivenAFailedResult"
    ],
    "expectedExitValue": 1
  },
  {
    "type": "git-apply-patch",
    "id": "68b346bd-067e-4b5c-ac0d-e5376b8f4657",
    "name": "Cache the empty PageLinks",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/PageLinks.java b/src/main/java/programming/PageLinks.java",
      "index 9c666ab..c3abae7 100644",
      "--- a/src/main/java/programming/PageLinks.java",
      "+++ b/src/main/java/programming/PageLinks.java",
      "@@ -6,10 +6,12 @@ import java.util.List;",
      " ",
      " public class PageLinks implements Iterable<PageLink> {",
      " ",
      "+    private static final PageLinks EMPTY = new PageLinks(Collections.emptyList());",
      "+",
      "     private final List<PageLink> links;",
      " ",
      "     public static PageLinks empty() {",
      "-        return new PageLinks(Collections.emptyList());",
      "+        return EMPTY;",
      "     }",
      " ",
      "     public static PageLinks of(final PageLink... links) {",
      ""
    ]
  },
  {
    "type": "command",
    "id": "0a3a090d-4be0-44d2-b045-2a8a32fa8e31",
    "name": "Run the tests",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "12be40ac-2628-4298-8c06-69530bc4f3bb",
    "name": "Add test when given non HTML PageResult",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/PageParserTest.java b/src/test/java/programming/PageParserTest.java",
      "index 2eabe47..a488066 100644",
      "--- a/src/test/java/programming/PageParserTest.java",
      "+++ b/src/test/java/programming/PageParserTest.java",
      "@@ -20,4 +20,17 @@ class PageParserTest {",
      "         final PageLinks expected = PageLinks.empty();",
      "         assertEquals(expected, links);",
      "     }",
      "+",
      "+    @Test",
      "+    void resultsInAnEmptyListWhenGivenNonHtml() {",
      "+        /* Given */",
      "+        final PageResult result = PageResult.ofBody(\"some random text\");",
      "+",
      "+        /* When */",
      "+        final PageLinks links = parser.getLinks(result);",
      "+",
      "+        /* Then */",
      "+        final PageLinks expected = PageLinks.empty();",
      "+        assertEquals(expected, links);",
      "+    }",
      " }",
      ""
    ]
  },
  {
    "type": "command",
    "id": "d7df32e2-d25c-4762-886f-4a3253f5152d",
    "name": "Run the tests",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "ab0985b4-c510-4e3c-b2f1-28633a5cacae",
    "name": "Add test when given a valid HTML without links PageResult",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/PageParserTest.java b/src/test/java/programming/PageParserTest.java",
      "index a488066..ba59f9d 100644",
      "--- a/src/test/java/programming/PageParserTest.java",
      "+++ b/src/test/java/programming/PageParserTest.java",
      "@@ -33,4 +33,17 @@ class PageParserTest {",
      "         final PageLinks expected = PageLinks.empty();",
      "         assertEquals(expected, links);",
      "     }",
      "+",
      "+    @Test",
      "+    void resultsInAnEmptyListWhenGivenHtmlWithoutLinks() {",
      "+        /* Given */",
      "+        final PageResult result = PageResult.ofBody(\"<html></html>\");",
      "+",
      "+        /* When */",
      "+        final PageLinks links = parser.getLinks(result);",
      "+",
      "+        /* Then */",
      "+        final PageLinks expected = PageLinks.empty();",
      "+        assertEquals(expected, links);",
      "+    }",
      " }",
      ""
    ]
  },
  {
    "type": "command",
    "id": "7b79df1c-d020-4275-adb9-7222a1bd1577",
    "name": "Run the tests",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "a824d799-70b6-4fc1-85bb-4f9a9eabd209",
    "name": "Add test when given a valid HTML with links PageResult",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/PageParserTest.java b/src/test/java/programming/PageParserTest.java",
      "index ba59f9d..83083b2 100644",
      "--- a/src/test/java/programming/PageParserTest.java",
      "+++ b/src/test/java/programming/PageParserTest.java",
      "@@ -46,4 +46,27 @@ class PageParserTest {",
      "         final PageLinks expected = PageLinks.empty();",
      "         assertEquals(expected, links);",
      "     }",
      "+",
      "+    @Test",
      "+    void resultsInAListOfAllLinksFoundInTheGivenHtml() {",
      "+        /* Given */",
      "+        final PageResult result = PageResult.ofBody(\"\"\"",
      "+                <html>",
      "+                  <result>",
      "+                    <a href=\"https://website/page-1\">Page 1</a>",
      "+                    <a href=\"https://website/page-2\">Page 2</a>",
      "+                  </result>",
      "+                </html>",
      "+                \"\"\");",
      "+",
      "+        /* When */",
      "+        final PageLinks links = parser.getLinks(result);",
      "+",
      "+        /* Then */",
      "+        final PageLinks expected = PageLinks.of(",
      "+                PageLink.of(\"https://website/page-1\"),",
      "+                PageLink.of(\"https://website/page-2\")",
      "+        );",
      "+        assertEquals(expected, links);",
      "+    }",
      " }",
      ""
    ]
  },
  {
    "type": "command",
    "id": "12246d3f-af4f-4d8d-bcb2-42b9c12d922a",
    "name": "Run the new test",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test",
      "--tests",
      "programming.PageParserTest.resultsInAListOfAllLinksFoundInTheGivenHtml"
    ],
    "expectedExitValue": 1
  },
  {
    "type": "git-apply-patch",
    "id": "ea10c89b-3197-48dd-8c2d-e5378ec36e86",
    "name": "Map the PageResult to PageLinks",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/PageParser.java b/src/main/java/programming/PageParser.java",
      "index 581a2fc..7b7825e 100644",
      "--- a/src/main/java/programming/PageParser.java",
      "+++ b/src/main/java/programming/PageParser.java",
      "@@ -1,8 +1,22 @@",
      " package programming;",
      " ",
      "+import org.jsoup.Jsoup;",
      "+",
      "+import java.util.List;",
      "+",
      " public class PageParser {",
      " ",
      "     public PageLinks getLinks(final PageResult page) {",
      "-        return PageLinks.empty();",
      "+        return page.map(",
      "+                body -> {",
      "+                    final List<PageLink> links = Jsoup.parse(body)",
      "+                            .select(\"a[href]\")",
      "+                            .stream()",
      "+                            .map(a -> a.attr(\"href\"))",
      "+                            .map(PageLink::of)",
      "+                            .toList();",
      "+                    return PageLinks.of(links);",
      "+                },",
      "+                () -> PageLinks.empty());",
      "     }",
      " }",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "96717d9d-d00a-4150-989d-bcdba21813e2",
    "name": "Add map method to the PageResult",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/PageResult.java b/src/main/java/programming/PageResult.java",
      "index 8da1998..789e8ed 100644",
      "--- a/src/main/java/programming/PageResult.java",
      "+++ b/src/main/java/programming/PageResult.java",
      "@@ -1,6 +1,8 @@",
      " package programming;",
      " ",
      " import java.util.Optional;",
      "+import java.util.function.Function;",
      "+import java.util.function.Supplier;",
      " ",
      " public class PageResult {",
      " ",
      "@@ -24,6 +26,11 @@ public class PageResult {",
      "         return body.isEmpty();",
      "     }",
      " ",
      "+    public <R> R map(final Function<String, R> bodyMapper, final Supplier<R> errorMapper) {",
      "+        return body.map(bodyMapper)",
      "+                .orElseGet(errorMapper);",
      "+    }",
      "+",
      "     @Override",
      "     public boolean equals(final Object object) {",
      "         if (this == object) { return true; }",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "3cb46baf-f34d-48e9-b771-d4d334a14b3e",
    "name": "Overload the PageLinks static constructor to support collection",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/PageLinks.java b/src/main/java/programming/PageLinks.java",
      "index c3abae7..581fa23 100644",
      "--- a/src/main/java/programming/PageLinks.java",
      "+++ b/src/main/java/programming/PageLinks.java",
      "@@ -1,5 +1,6 @@",
      " package programming;",
      " ",
      "+import java.util.Collection;",
      " import java.util.Collections;",
      " import java.util.Iterator;",
      " import java.util.List;",
      "@@ -18,6 +19,10 @@ public class PageLinks implements Iterable<PageLink> {",
      "         return new PageLinks(List.of(links));",
      "     }",
      " ",
      "+    public static PageLinks of(final Collection<PageLink> links) {",
      "+        return new PageLinks(List.copyOf(links));",
      "+    }",
      "+",
      "     private PageLinks(final List<PageLink> links) {",
      "         this.links = links;",
      "     }",
      ""
    ]
  },
  {
    "type": "command",
    "id": "47a3692a-abfa-4e64-bfae-ea430f9eb88b",
    "name": "Run the new test",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test",
      "--tests",
      "programming.PageParserTest.resultsInAListOfAllLinksFoundInTheGivenHtml"
    ],
    "expectedExitValue": 1
  },
  {
    "type": "git-apply-patch",
    "id": "cb85342e-7bb4-4eab-bd1c-c081ec837e6a",
    "name": "Implement the PageLinks equals() and hashCode() methods",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/PageLinks.java b/src/main/java/programming/PageLinks.java",
      "index 581fa23..520df4e 100644",
      "--- a/src/main/java/programming/PageLinks.java",
      "+++ b/src/main/java/programming/PageLinks.java",
      "@@ -31,4 +31,18 @@ public class PageLinks implements Iterable<PageLink> {",
      "     public Iterator<PageLink> iterator() {",
      "         return links.iterator();",
      "     }",
      "+",
      "+    @Override",
      "+    public boolean equals(final Object object) {",
      "+        if (this == object) return true;",
      "+        if (object == null || getClass() != object.getClass()) return false;",
      "+",
      "+        final PageLinks pageLinks = (PageLinks) object;",
      "+        return links.equals(pageLinks.links);",
      "+    }",
      "+",
      "+    @Override",
      "+    public int hashCode() {",
      "+        return links.hashCode();",
      "+    }",
      " }",
      ""
    ]
  },
  {
    "type": "command",
    "id": "10be0ffd-ac09-4f95-bbf6-39b48599cad1",
    "name": "Run the new test",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test",
      "--tests",
      "programming.PageParserTest.resultsInAListOfAllLinksFoundInTheGivenHtml"
    ],
    "expectedExitValue": 1
  },
  {
    "type": "git-apply-patch",
    "id": "dacf7b1b-54eb-4dc8-9ca4-e808e882e845",
    "name": "Implement the PageLink equals() and hashCode() methods",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/PageLink.java b/src/main/java/programming/PageLink.java",
      "index 618309d..d563f64 100644",
      "--- a/src/main/java/programming/PageLink.java",
      "+++ b/src/main/java/programming/PageLink.java",
      "@@ -21,4 +21,18 @@ public class PageLink {",
      "     public URI asUri() {",
      "         return URI.create(link);",
      "     }",
      "+",
      "+    @Override",
      "+    public boolean equals(final Object object) {",
      "+        if (this == object) return true;",
      "+        if (object == null || getClass() != object.getClass()) return false;",
      "+",
      "+        final PageLink pageLink = (PageLink) object;",
      "+        return link.equals(pageLink.link);",
      "+    }",
      "+",
      "+    @Override",
      "+    public int hashCode() {",
      "+        return link.hashCode();",
      "+    }",
      " }",
      ""
    ]
  },
  {
    "type": "command",
    "id": "42c641db-611d-4226-8c47-469e209e8f94",
    "name": "Run the new test",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "b64179cd-ffce-4110-9b21-8233db9b842b",
    "name": "Refactor the link parsing into its own method",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/PageParser.java b/src/main/java/programming/PageParser.java",
      "index 7b7825e..5e0e1d3 100644",
      "--- a/src/main/java/programming/PageParser.java",
      "+++ b/src/main/java/programming/PageParser.java",
      "@@ -8,15 +8,17 @@ public class PageParser {",
      " ",
      "     public PageLinks getLinks(final PageResult page) {",
      "         return page.map(",
      "-                body -> {",
      "-                    final List<PageLink> links = Jsoup.parse(body)",
      "-                            .select(\"a[href]\")",
      "-                            .stream()",
      "-                            .map(a -> a.attr(\"href\"))",
      "-                            .map(PageLink::of)",
      "-                            .toList();",
      "-                    return PageLinks.of(links);",
      "-                },",
      "+                body -> getLinks(body),",
      "                 () -> PageLinks.empty());",
      "     }",
      "+",
      "+    private static PageLinks getLinks(final String body) {",
      "+        final List<PageLink> links = Jsoup.parse(body)",
      "+                .select(\"a[href]\")",
      "+                .stream()",
      "+                .map(a -> a.attr(\"href\"))",
      "+                .map(PageLink::of)",
      "+                .toList();",
      "+        return PageLinks.of(links);",
      "+    }",
      " }",
      ""
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "1fe068a2-dec9-4da4-aa7c-5542574a0a7d",
    "name": "Simplify the lambda functions",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/PageParser.java b/src/main/java/programming/PageParser.java",
      "index 5e0e1d3..3b91d6c 100644",
      "--- a/src/main/java/programming/PageParser.java",
      "+++ b/src/main/java/programming/PageParser.java",
      "@@ -8,8 +8,8 @@ public class PageParser {",
      " ",
      "     public PageLinks getLinks(final PageResult page) {",
      "         return page.map(",
      "-                body -> getLinks(body),",
      "-                () -> PageLinks.empty());",
      "+                PageParser::getLinks,",
      "+                PageLinks::empty);",
      "     }",
      " ",
      "     private static PageLinks getLinks(final String body) {",
      ""
    ]
  },
  {
    "type": "command",
    "id": "cd2c7c36-3daf-489f-a884-5e42a70e263b",
    "name": "Run the new test",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "a0550530-321c-461f-bc0d-7228aff7c010",
    "name": "Add test to confirm that only absolute links are considered",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/test/java/programming/PageParserTest.java b/src/test/java/programming/PageParserTest.java",
      "index e458d38..8d6f572 100644",
      "--- a/src/test/java/programming/PageParserTest.java",
      "+++ b/src/test/java/programming/PageParserTest.java",
      "@@ -69,4 +69,27 @@ class PageParserTest {",
      "         );",
      "         assertEquals(expected, links);",
      "     }",
      "+",
      "+    @Test",
      "+    void includeOnlyAbsoluteLinks() {",
      "+        /* Given */",
      "+        final PageResult result = PageResult.ofBody(\"\"\"",
      "+                <html>",
      "+                  <result>",
      "+                    <a href=\"https://website/page-1\">Page 1</a>",
      "+                    <a href=\"page-2\">Relative Page 2</a>",
      "+                    <a href=\"#Section 3\">Section 3</a>",
      "+                  </result>",
      "+                </html>",
      "+                \"\"\");",
      "+",
      "+        /* When */",
      "+        final PageLinks links = parser.getLinks(result);",
      "+",
      "+        /* Then */",
      "+        final PageLinks expected = PageLinks.of(",
      "+                PageLink.of(\"https://website/page-1\")",
      "+        );",
      "+        assertEquals(expected, links);",
      "+    }",
      " }",
      ""
    ]
  },
  {
    "type": "command",
    "id": "5c988537-2578-4819-8342-04fd0d59e9b8",
    "name": "Run the new test",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test",
      "--tests",
      "programming.PageParserTest.includeOnlyAbsoluteLinks"
    ],
    "expectedExitValue": 1
  },
  {
    "type": "git-apply-patch",
    "id": "743a3698-5f2a-48dc-b2e5-81acbc2d6f29",
    "name": "Update the regex to only consider absolute links",
    "workingDirectory": "broken-links",
    "parameters": [
      "diff --git a/src/main/java/programming/PageParser.java b/src/main/java/programming/PageParser.java",
      "index 3b91d6c..83a5b1b 100644",
      "--- a/src/main/java/programming/PageParser.java",
      "+++ b/src/main/java/programming/PageParser.java",
      "@@ -14,7 +14,7 @@ public class PageParser {",
      " ",
      "     private static PageLinks getLinks(final String body) {",
      "         final List<PageLink> links = Jsoup.parse(body)",
      "-                .select(\"a[href]\")",
      "+                .select(\"a[href~=http(s|)://.+]\")",
      "                 .stream()",
      "                 .map(a -> a.attr(\"href\"))",
      "                 .map(PageLink::of)",
      ""
    ]
  },
  {
    "type": "command",
    "id": "c2ae9df8-6231-49e6-bed3-cc589d71a9ec",
    "name": "Run the tests",
    "workingDirectory": "broken-links",
    "parameters": [
      "./gradlew",
      "test"
    ]
  },
  {
    "type": "git-commit-changes",
    "id": "8a323cac-1f0a-4be7-8e00-509b0318af22",
    "name": "PageParser",
    "workingDirectory": "broken-links",
    "parameters": [
      "PageParser",
      "v4.1.999"
    ]
  }
]
