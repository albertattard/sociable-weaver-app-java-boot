[
  {
    "type": "chapter",
    "id": "37a31d06-f5de-4e48-b47f-82e44f77c857",
    "parameters": [
      "Hello World"
    ]
  },
  {
    "type": "markdown",
    "id": "47169f83-0024-4df7-837d-e75bc0046c75",
    "parameters": [
      "‘Hello World’ is the first program that many programmers write, and this text will not break the tradition. We will",
      "stretch this beyond programming and use it as excuse to introduce dependency management, testing, and automation,",
      "amongst other things. Why complicate such a simple program, you may ask. While that is a good question, programmers",
      "nowadays need to do more than just programming.",
      "",
      "My daughter spent some time with me during her [Praktikum](https://de.wikipedia.org/wiki/Praktikum). She pointed out",
      "that programming is a very sociable job as we talk to others in different roles, such as programmers, business analysts,",
      "quality assurance, product owners, stakeholders and many more.",
      "",
      "The programming role is at the hearth of the industry and the programmer needs to connect everything together. A",
      "programmer needs to do more than just write programs. The programmer needs to interact with stakeholders and negotiate",
      "features. Once the program is ready, the programmer needs to deliver the program. This is usually packaged and deployed",
      "into the cloud or as a mobile application. How did the programs you use on your phone got there? There is a process that",
      "takes the programs written by the programmers and somehow move this to your phone.",
      "",
      "Some may say, in our company we have specialized people that do just that. Why is it the programmer's responsibility?",
      "",
      "A few years back, a friend of mine asked me to help him. They had a Java program and needed to make a very small",
      "modification to it. Unfortunately, they had no source code as this was lost somewhere. As you may have imagined, my",
      "friend was in a pickle. With no source code and no tests, it is hard to change a program without breaking its existing",
      "functionality. If this source code was saved within a source version control, such as [Git](https://git-scm.com/), then",
      "that would have been simpler. Once the changes were made, I had to rebuild the project. Build project can be tricky as",
      "you need to include the correct dependencies. For example, this project made use of a specific version a video rendering",
      "library and did not work with a newer version of the same library. Finally, the project needs to be deployed, which has",
      "its own challenges. A small change, that should not take more than 30 minutes, took a week to finish because of these",
      "challenges.",
      "",
      "This would have been much simpler if some common good practices, such as source version control, automated testing,",
      "automated build and deploy, were used. While the above example is an extreme case, changing old code can prove as",
      "challenging. Many programmers came across programs that no one in the company dares changing. Such programs are often",
      "referred to a legacy system as while these are important to the business, no one know how these work and everyone is",
      "afraid to modify them. Such programs become more like hardware than software. Many believe that such programs become",
      "hard to change as these were written using bad design patterns and bad programming practices, but I tend to subscribe to",
      "a different opinion.",
      "",
      "While bad design patterns and bad programming practices add to the friction, these are usually not the cause.",
      "Programmers are afraid of modifying a program as they lack confidence. Computer programs can become too complicated. To",
      "make things worse, we tend to forget things, which makes it harder for us to continue building on what we did without",
      "breaking existing functionality. Projects tend to involve more than one programmer which makes it even harder. Knowledge",
      "silos tend to form where the knowledge is distributed across the team with no one having the full picture.",
      "",
      "Given that this is such a common problem, it is unavoidable? Is this the destiny so to say of all computer programs? No.",
      "I believe that this can be mitigated by following few practices.",
      "",
      "Recently I was interviewing a graduate candidate who, as many others at the early stages of their career, had little",
      "programming experience. During the interview we refactored some code. At the end of these changes, the candidate was not",
      "sure whether the changes they made were correct or not. I've asked them to run the tests, and their face lit up. The",
      "fact that they could rely on something to confirm whether what they did was correct or not released them from",
      "unnecessary pressure and filled them with confidence. They kept refactoring and rerunning the tests. They added new test",
      "too to make sure that the new functionality they introduced works well and to safeguard them during future refactoring.",
      "",
      "Testing is one of the things that can help us, but it is not the only tool. Other tools, such as source version control",
      "and automation pipelines, can too help us to mitigate the risk of turning software into hardware.",
      "",
      "How can we achieve this? In this chapter we will take the simplest program ever written and will move it through several",
      "phases showing how we can take advantage of existing tooling. We start with the simplest form of Hello world program and",
      "will keep evolving it until we end up with something that can be easily updated and redistributed to its final",
      "destination.",
      "",
      "The examples used in this book are in the Java programming language. While this is not a Java book, all examples are",
      "explained, and no prior Java knowledge is required. A basic knowledge of programming is required if you like to follow",
      "along. If you understood this section, then you are good to go. This is not a book about the Java programming language",
      "and many important aspects of the Java programming language are not covered in this book."
    ]
  },
  {
    "type": "variable",
    "id": "08298402-b313-4bae-a368-bb9dbe83a4e1",
    "name": "NAME"
  },
  {
    "type": "section",
    "id": "01832d88-bd02-428f-a059-8a8d1d98d63b",
    "parameters": [
      "Commands"
    ]
  },
  {
    "type": "markdown",
    "id": "48dc0646-5c06-4622-b964-b780cd2fffc9",
    "parameters": [
      "This text contains examples that you can try. These examples come in different forms, such as commands or code changes. ",
      "Commands that need to be executed contain the `$` (dollar symbol), as shown next."
    ]
  },
  {
    "type": "command",
    "id": "cb9fbe95-c549-4403-844d-ac4078847b67",
    "parameters": [
      "echo",
      "Hello World!!"
    ]
  },
  {
    "type": "markdown",
    "id": "2bfb7d21-e961-4d02-a161-fa8d9664cee0",
    "parameters": [
      "The `$` represent the command prompt and you don't need to type that when running the command. Just",
      "type: `echo 'Hello World!!'` (with _single quotes_ as shown in the example and not _double quotes_) and press the",
      "_return key_, also known as _enter_.",
      "",
      "What's the difference between the `'` and the `\"` and why do we need to use the former? In",
      "[bash](https://www.gnu.org/software/bash/), the `!` (_exclamation mark_) is part of history expansion and bash will",
      "replace the `!` with a command fom the history. You need to either escape each `!`, with the `\\` (backslash),",
      "like `Hello\\ World\\!\\!`, or wrap the command argument within `'`, like `'Hello World!!'`, which is simpler. Text within",
      "the `'` is treated as string and not evaluated. I have digressed a bit. Please refer",
      "to [this bash manual page](https://www.gnu.org/software/bash/manual/html_node/History-Interaction.html) for more",
      "information about how to interact with the history in bash.",
      "",
      "Back to the topic, the command `echo 'Hello World!!'` should print the following messaged to the command prompt.",
      "",
      "```",
      "Hello World!!",
      "```",
      "",
      "The above is an example of an output. Different from the commands that you can execute, the output does not contain",
      "the `$`. You can use the output produced by the command as a reference and compare it with the output you saw on your",
      "screen when you tried the same command.",
      "",
      "Some commands need to be executed from within a specific folder as they need to interact with files within that folder",
      "or relative to that folder. Take for example the next example."
    ]
  },
  {
    "type": "command",
    "id": "12a74f4f-1e9a-41d2-affc-b8dadda01444",
    "name": "Run command from within a specific directory",
    "workingDirectory": "hello-world",
    "parameters": [
      "echo",
      "Run command from within the hello-world folder"
    ]
  },
  {
    "type": "markdown",
    "id": "a0b1999e-4cd3-47a4-bde4-7fd97ebc3a1e",
    "parameters": [
      "The text `hello-world` preceding the `$`, represents the name of the folder from where the command needs to be executed.",
      "It is important to execute such commands from the proper folder as some these commands refer to files which are in a",
      "relative position to the mentioned folder. Executing the commands from a different folder may produce unwanted results.",
      "",
      "To go into the directory, you can use the `cd` command, as shown next",
      "",
      "```",
      "$ cd hello-world",
      "```",
      "",
      "Running the above command now, may produce errors are there may be no folder named `hello-world`, that you can go in."
    ]
  },
  {
    "type": "section",
    "id": "70126d12-b0fd-420a-9275-134d1892b57e",
    "parameters": [
      "Programming Languages"
    ]
  },
  {
    "type": "markdown",
    "id": "85b02307-58da-4d32-8987-afc7612a3589",
    "parameters": [
      "In this text we will use the [Java programming language](https://www.oracle.com/java/technologies/javase-downloads.html)",
      ". There are many very good programming languages and the concepts shown here can be used with any programming language",
      "you like. I picked Java, because that's the language I like the most. Surprisingly enough, and despite being old, Java",
      "is among the most popular programming languages ([reference @ October 2021](https://www.tiobe.com/tiobe-index/))."
    ]
  },
  {
    "type": "subsection",
    "id": "42a99cb2-3536-474d-9684-1ea4202b27f4",
    "parameters": [
      "What is Java?"
    ]
  },
  {
    "type": "markdown",
    "id": "fb4e5a76-3078-4514-a040-ad89ab741bd4",
    "parameters": [
      "Java is a general-purpose programming language and was first released by Sun Microsystems in 1995. A general-purpose",
      "programming language is a programming language that is not tied to one specific",
      "domain. [HTML](https://en.wikipedia.org/wiki/HTML), on the other hand, is a domain specific programming language and is",
      "used to render webpages. The web browser takes the HTML received and then renders the webpage as you see it.",
      "",
      "Java was originally intended for the embedded world, but then found itself everywhere from smartcards to servers and",
      "much more.",
      "",
      "Unfortunately, Java is an overloaded term. Sometimes the term Java is used to refer to the programming language while",
      "other times it is used to refer to the Java Virtual Machine. Following is a non-exhaustive list of what sometimes people",
      "mean when saying Java.",
      "",
      "- The Java Programming Language",
      "- The Java Language Specification",
      "- The Java Standard Library",
      "- The Java Virtual Machine (JVM)",
      "- The Java Virtual Machine Specification",
      "- The Java Development Kit (JDK)",
      "- The Java Runtime Environment (JRE) sometimes also referred to as Platform",
      "- The Java Standard Edition (JSE)",
      "- The Java Micro Edition (JME)",
      "- The Java Enterprise Environment (JEE)",
      "",
      "Do not worry if you don't know what these are. I've listed them here just to make you aware of what Java means. When you",
      "are talking to others and they mention Java without providing enough context, ask so that you clarify what's meant. For",
      "example, someone may ask you \"do you have Java?\"  Java is not a cigarette and what they mean is, is Java installed on",
      "your computer. In this case you may replay with another question, which type, the JDK or the JRE?"
    ]
  },
  {
    "type": "subsection",
    "id": "885a4936-7906-407a-9362-d0b08530f353",
    "parameters": [
      "How do we develop Java Applications?"
    ]
  },
  {
    "type": "markdown",
    "id": "2ed66040-1f6c-42bb-afa4-96662bc7c7c1",
    "parameters": [
      "An application running on the Java platform starts from source code written in one of the JVM languages as shown next.",
      "",
      "![Java from Development to Runtime](https://i.ibb.co/BfsRp7K/Java-from-Development-to-Runtime.png)",
      "",
      "The source code is compiled into Bytecode. Bytecode is a form of instruction set designed for efficient execution by the",
      "Java JIT compiler. Each Bytecode is composed of one byte that represents the",
      "[opcode](https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-7.html), along with zero or more bytes for operands. Of",
      "the 256 possible byte-long opcodes, 202 are currently in use.",
      "",
      "The Bytecode is machine independent and it does not matter on which OS the Bytecode is generated. The source code can be",
      "compiled into Bytecode on a Windows machine and then used on a Mac or vice versa. The JIT takes the Bytecode and then",
      "convert this into machine dependent code.",
      "",
      "It is important to note that to develop and compile Java source code you need to have a JDK installed. To run a Java",
      "application (including all programming languages that run on the JVM) you need to have the JRE installed. Note that a",
      "JDK also includes the JRE and no need to install a separate JRE when you have a JDK installed."
    ]
  },
  {
    "type": "subsection",
    "id": "9e66e7dd-2766-445a-9e99-8b222cafd84d",
    "parameters": [
      "The Java Language Specification"
    ]
  },
  {
    "type": "markdown",
    "id": "82e42f53-d064-4409-8800-b04133e7e695",
    "parameters": [
      "The [Java Language Specification (JLS)](https://docs.oracle.com/javase/specs/jls/se14/html/index.html) is the definitive technical ",
      "reference for the Java programming language. Anything related to the Java programming language and its behaviour is documented in ",
      "the Java language specification.",
      "",
      "The specification is the authority on language behaviour, but it is terse and not user-friendly. If you are ever in any doubt about ",
      "the behaviour of Java code, the specification provides the definitive answer.",
      "",
      "These specifications are not always easy to read and not meant as a beginner's tutorial. Given that the specification is hard to ",
      "read and understand, why should I care?",
      "",
      "With the understanding that this may be too technical and do not worry if you do not understand any of this. Consider the following ",
      "code fragment.",
      "",
      "```",
      "int a = -7;",
      "int b = +a;",
      "```",
      "",
      "The above code fragment shows the use of the `+` unary operator. This operator is rarely used, and its behaviour is unknown to many. ",
      "The description provided by an [official Java tutorial](https://docs.oracle.com/javase/tutorial/java/nutsandbolts/op1.html) is:",
      "",
      "\"_Unary plus operator; indicates positive value (numbers are positive without this, however)_\"",
      "",
      "Many believe that the unary `+` operator is the opposite of the unary `-` operator, and the following should print `7`.",
      "",
      "```",
      "int a = -7;",
      "int b = +a;",
      "System.out.println(b);",
      "```",
      "",
      "That is maybe misleading. This operator's real functionality is explained in the Java Language Specifications, section ",
      "[15.15.3. Unary Plus Operator +](https://docs.oracle.com/javase/specs/jls/se14/html/jls-15.html#jls-15.15.3).",
      "",
      "\"_Unary numeric promotion ([§5.6](https://docs.oracle.com/javase/specs/jls/se14/html/jls-5.html#jls-5.6)) is performed on the ",
      "operand. The type of the unary plus expression is the promoted type of the operand. The result of the unary plus expression is ",
      "not a variable, but a value, even if the result of the operand expression is a variable._\"",
      "",
      "In other words, variables of types `byte`, `short`, and `char` are promoted to type `int`. The previous example will simply ",
      "print `-7`."
    ]
  },
  {
    "type": "subsection",
    "id": "fe7b4907-b93c-4b36-a76e-c16155fbe542",
    "parameters": [
      "Setup Java"
    ]
  },
  {
    "type": "markdown",
    "id": "4ce70208-c031-4347-9cbe-ee6ad281165b",
    "parameters": [
      "What do we need to program with the Java programming language? We need",
      "the [Java Development Kit](https://www.oracle.com/java/technologies/downloads/#java17). The development kit contains the",
      "Java compiler which is required to compile Java source code into byte code. This is not to be confused with",
      "the [Java Runtime Environment](https://www.ibm.com/cloud/blog/jvm-vs-jre-vs-jdk), which only contains the things",
      "required to run a Java program. Note that the Java Development Kit contains the Java Runtime Environment and that's all",
      "we, the programmers, need to install.",
      "",
      "There are several ways to install the Java Development Kit. The simplest way to install the Java Development Kit on a",
      "MAC operating system is to use [SDKMAN](https://sdkman.io/). SDKMAN is a program that can be used to install and manage",
      "multiple versions of Java.",
      "",
      "Why would you need more than one Java version? Programmers may work on more than one project. Newer projects may opt for",
      "a more recent version of Java to take advantage of newly released features, while older projects may still be lacking",
      "behind. While the team behind Java works very hard to be backward compatible, this does not always work as expected. Not",
      "all programs work with a newer version of Java, as Java is not 100% backward compatible.",
      "",
      "What do you mean by, Java is not 100% backward compatible? In Java 5, enums were introduced amongst other things, and",
      "the new `enum` keyword was added to the Java programming",
      "language ([reference](https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html)). This means that up to",
      "Java 1.4, you could have a variable named `enum` as this was not a keyword, a word reserved for the programming language",
      "and cannot be used by the programmer. But that would mean that since Java 1.5, such programs will fail to compile, and",
      "while minor, these require a modification. This is not the only case. Programmers using a very popular",
      "library, [Lombok](https://projectlombok.org/), faced many issues when switching to Java",
      "16 ([reference](https://github.com/projectlombok/lombok/issues/2681)), which was cased by",
      "the [JEP 396: Strongly Encapsulate JDK Internals by Default](https://openjdk.java.net/jeps/396) feature, delivered as",
      "part of Java 16.",
      "",
      "To be safe, it is best to work with the same Java version that the program is expected to run on. If our program is",
      "expected to run on [Java 8](https://adoptopenjdk.net/?variant=openjdk8&jvmVariant=hotspot), then it is best to develop",
      "the program with the same version of Java.",
      "",
      "SDKMAN can be easily installed on a MAC operating system, in two steps. First run the following command",
      "",
      "```",
      "$ curl -s \"https://get.sdkman.io\" | bash",
      "```",
      "",
      "This will download a [bash script](https://www.educative.io/edpresso/what-is-a-bash-script) and executes it on the fly.",
      "Once ready, run the `sdkman-init.sh` script, as shown next, to setup and configure SDKMAN on your computer.",
      "",
      "```",
      "$ source \"${HOME}/.sdkman/bin/sdkman-init.sh\"",
      "```",
      "",
      "That's it. Like in all examples shown in this text, simply following the provided instructions and you will be good to",
      "go, or at least I hope so.",
      "",
      "Do you remember when talked about the history expansion and the `'` (_single quotes_)? Note that in the above command we",
      "are using the `${HOME}` variable in a path. This is expanded and replaced to your home path, which is",
      "typically `/Users/username`. In my case, it is `/Users/albertattard`. If instead of `\"` (_double quotes_), we use single",
      "quotes, the variable is not replace. Try the following command.",
      "",
      "```",
      "$ echo \"${HOME}\"",
      "```",
      "",
      "The above command will first evaluate the variable `${HOME}`, and then prints the variable value instead. Now, let's use",
      "the `'` instead.",
      "",
      "```",
      "$ echo '${HOME}'",
      "```",
      "",
      "Note that this time, `echo` simply prints",
      "",
      "```",
      "${HOME}",
      "```",
      "",
      "Where were we? Installing the Java Developers kit. Let's first verify that SDKMAN was properly installed by running the",
      "following command to print the installed version.",
      "",
      "```",
      "$ sdk version",
      "```",
      "",
      "This should print something like the following",
      "",
      "```",
      "SDKMAN 5.12.3",
      "```",
      "",
      "SDKMAN checks for updates and may prompt you to update if you are not running the latest version, something similar to",
      "the following.",
      "",
      "```",
      "...",
      "ATTENTION: A new version of SDKMAN is available...",
      "",
      "The current version is 5.12.4, but you have 5.12.3.",
      "",
      "Would you like to upgrade now? (Y/n):",
      "```",
      "",
      "Note that there may be other output preceding the message shown above, and that's why the example output starts",
      "with `...`. I've removed it for brevity.",
      "",
      "I had the version `5.12.3` installed when I ran the `sdk version` and was prompted to upgrade to `5.12.4`. In such case,",
      "feel free to update to the latest version. Note that SDKMAN is only used to install the Java Development Kit and not",
      "required to compile Java programs.",
      "",
      "Back to installing the Java Development Kit. Let's first list the versions of Java that we can install.",
      "",
      "```",
      "$ sdk list java",
      "```",
      "",
      "This command will print a table like, similar to the onw shown next.",
      "",
      "```",
      "================================================================================",
      "Available Java Versions",
      "================================================================================",
      " Vendor        | Use | Version      | Dist    | Status     | Identifier",
      "--------------------------------------------------------------------------------",
      " AdoptOpenJDK  |     | 16.0.1.j9    | adpt    |            | 16.0.1.j9-adpt",
      "               | >>> | 16.0.1.hs    | adpt    | installed  | 16.0.1.hs-adpt",
      "               |     | 11.0.11.j9   | adpt    |            | 11.0.11.j9-adpt",
      "               |     | 11.0.11.hs   | adpt    | installed  | 11.0.11.hs-adpt",
      "               |     | 8.0.292.j9   | adpt    |            | 8.0.292.j9-adpt",
      "               |     | 8.0.292.hs   | adpt    | installed  | 8.0.292.hs-adpt",
      " Corretto      |     | 16.0.2.7.1   | amzn    |            | 16.0.2.7.1-amzn",
      "               |     | 11.0.12.7.2  | amzn    |            | 11.0.12.7.2-amzn",
      "               |     | 8.302.08.1   | amzn    |            | 8.302.08.1-amzn",
      "...",
      "```",
      "",
      "As before, the above output was truncated for brevity.",
      "",
      "What's the Vendor column? The Java Development Kit can be built by different",
      "vendors. [Sun Microsystems](https://en.wikipedia.org/wiki/Sun_Microsystems) was the company that invented the Java",
      "programming language ([reference](https://www.britannica.com/technology/Java-computer-programming-language)) and the",
      "first source of the Java Development Kit. Other companies, such as [Amazon](https://aws.amazon.com/corretto/)",
      ", [Microsoft](https://www.microsoft.com/openjdk), [IBM](https://www.ibm.com/support/pages/java-sdk-downloads), and",
      "others, created their own flavour of the Java Development Kit. Sun Microsystems was then acquired by   ",
      "[Oracle](https://www.oracle.com/) has on January 27, 2010, which became the official source. The vendor column indicates",
      "the entity behind the Java Development Kit.",
      "",
      "What's the difference between [AdoptOpenJDK](https://adoptopenjdk.net/), _Oracle_",
      "and [Temurin](https://projects.eclipse.org/projects/adoptium.temurin) vendors, and which one should I use? Java was free",
      "to use in production until Oracle introduced paid licenses. This gave rise to the [OpenJDK](https://openjdk.java.net/)",
      "movement. The OpenJDK is the free and open-source version of the Oracle JDK. The AdoptOpenJDK project builds the OpenJDK",
      "binaries. In other words, the source files are found under the OpenJDK while the compiled programs are found under",
      "AdoptOpenJDK. On te 24th of July 2021, the AdoptOpenJDK moved to",
      "the [Eclipse Foundation](https://www.eclipse.org/org/foundation/) and was renamed to _Eclipse Temurin_. Starting from",
      "Java 17, Oracle changed their licensing again making Java free to use in",
      "production ([reference](https://www.oracle.com/de/java/technologies/javase/jdk-faqs.html)).",
      "",
      "Why should I pay for a license where I can get it for free? Many years ago, I was talking to a friend of mine about how",
      "expensive some licenses, such as databases, can be. I've asked them why they don't use open source databases",
      "such [PortgreSQL](https://www.postgresql.org/) or [MySQL](https://www.mysql.com/) instead. Their answer was, support.",
      "Whenever they had a problem, they called the vendor and together resolve the issues in a matter of minutes and not hours",
      "or days. Having a critical application not working for a day may cost the business millions in direct losses and many",
      "more in indirect losses, such as bad reputation. Would you trust a bank that lost your money due to a database bug, for",
      "example?",
      "",
      "What happened to Java versions 12, 13, 14, and 15? Java 8 introduced many new features, back in March",
      "2014  ([reference](https://www.oracle.com/java/technologies/javase/8-whats-new.html)). I met programmers who are still",
      "not familiar with Java 8's key features and I don't blame them, as this was a major release. Moving from one Java",
      "version to the next is not easy. Big Java releases produced two challenges",
      "",
      "- Many new features",
      "- Hard to migrate from one version to the next",
      "",
      "To address this, Oracle moved into six month cadence releases, where a new version of Java is released every six months.",
      "Similar to many other programs, such as Ubuntu ([reference](https://ubuntu.com/blog/what-is-an-ubuntu-lts-release)),",
      "there are two types of releases, the short term support (STS) and the long term support (LTS). Java 11, released in",
      "September 2018, will be supported by Oracle until September",
      "2023 ([reference](https://www.oracle.com/java/technologies/java-se-support-roadmap.html)), as this is marked as a long",
      "term support version of Java. Java 17 is the next long term support version and it will be supported between September",
      "2021, when it is release and September 2026. Note that Java 11 will be supported for two years after Java 17 is released",
      "giving companies enough time to migrate from one version to the next. This ensures security updates which are very",
      "important as security vulnerabilities are continually discovered.",
      "",
      "Java versions 12, 13, 14, 15, and 16 are short term support versions of Java, and these are only supported until the",
      "next version of Java is released. If you are not able to quickly move from one short term release to the next, then it",
      "is best to stick to the long term support as otherwise you may be exposed to security vulnerabilities. For example,",
      "the [QuoVadis(DigiCert)](https://www.quovadisglobal.com/) root certificate expired in March 2021 and an action was",
      "required, before its expiry. This was fixed in as part",
      "of [JDK-8258630](https://bugs.openjdk.java.net/browse/JDK-8258630) and release as part of Java 11 update",
      "11 ([reference](https://bugs.openjdk.java.net/browse/JDK-8258630)). Java versions 12, 13, 14, and 15 were not updated",
      "with this, and other, security fixes, thus are exposed.",
      "",
      "Which version of Java should we pick? This depends a lot on the context. In this text we don't have mission critical",
      "programs and all examples are written in [Java 17](https://jdk.java.net/17/). This helps us demonstrate new features of",
      "the Java programming language. When working in a missing critical programs, support is very important. If you are not",
      "able to move to the next short or long term releases, then it is best to stick to the long term support versions fo",
      "Java. Java 17 will receive support until September",
      "2026 ([reference](https://www.oracle.com/java/technologies/java-se-support-roadmap.html)).",
      "",
      "There are two entries for each version of Java, such as `16.0.1.j9-adpt` and `16.0.1.hs-adpt`. What's the difference?",
      "OpenJDK comes in two flavours:",
      "",
      "- HotSpot (`...x.hs-adpt`) is the VM from the OpenJDK community. It is the most widely used VM today and is used in",
      "  Oracle's JDK ([reference](https://openjdk.java.net/groups/hotspot/)).",
      "- Eclipse OpenJ9 (`...x.j9-adpt`) is the VM from the Eclipse community. It is an enterprise-grade VM designed for low",
      "  memory footprint and fast start-up and is used in IBM's JDK ([reference](https://www.eclipse.org/openj9/)).",
      "",
      "The OpenJ9 tends to be better with memory, but the HotSpot tends to have better performance. In our case, either will make",
      "a difference, but it is always good to test your hypothesis/decisions by benchmark your application. You may be",
      "surprised and if your original choice was the best option, then you have evidence backing this decision up.",
      "",
      "Let's install the latest version of Java, Java 17. We will use the Oracle version, given that this is free to use in",
      "production.",
      "",
      "```",
      "$ sdk install java 17.0.0-oracle",
      "```",
      "",
      "This will take a minute. At the end of the installation, SDKMAN may ask you to set this as the default version of Java.",
      "Do so if asked. Alternative, you can set the default version of Java using the following command.",
      "",
      "```",
      "$ sdk default java 17.0.0-oracle",
      "```",
      "",
      "This will produce something like the following.",
      "",
      "```",
      "Default java version set to 17.0.0-oracle",
      "```",
      "",
      "Once ready, run the following command to confirm that the proper very of Java is installed."
    ]
  },
  {
    "type": "command",
    "id": "208cca49-d26b-4712-9c8c-dbcf99b2ea71",
    "name": "Print the version of Java",
    "parameters": [
      "java",
      "--version"
    ]
  },
  {
    "type": "markdown",
    "id": "9e75f9c0-6552-43b7-a4c2-ed5ef74f4614",
    "parameters": [
      "This will print the current version of Java install and set as default, similar to what shown next.",
      "",
      "```",
      "java 17 2021-09-14 LTS",
      "Java(TM) SE Runtime Environment (build 17+35-LTS-2724)",
      "Java HotSpot(TM) 64-Bit Server VM (build 17+35-LTS-2724, mixed mode, sharing)",
      "```",
      "",
      "Java is installed and we are ready to program.",
      "",
      "I have several Java versions installed, and to help me switch from one version to the other, I've created",
      "several [aliases](https://www.tecmint.com/create-alias-in-linux/).",
      "",
      "```",
      "alias java8='sdk default java 8.0.292.hs-adpt'",
      "alias java11='sdk default java 11.0.11.hs-adpt'",
      "alias java16='sdk default java 16.0.1.hs-adpt'",
      "alias java17='sdk default java 17.0.0-oracle'",
      "```",
      "",
      "These commands help me switch between the four versions of Java I have installed."
    ]
  },
  {
    "type": "section",
    "id": "525aff71-8dcb-45a3-9f6e-c0a334c70bc9",
    "parameters": [
      "Integrated Development Environment (IDE)"
    ]
  },
  {
    "type": "markdown",
    "id": "1dd1b48e-2977-469d-82c8-32fba81be402",
    "parameters": [
      "If you like to write a document about a product, you need a word processing program, such",
      "as  [Microsoft Word](https://www.microsoft.com/en-us/microsoft-365/word). You can use simpler programs,",
      "like [TextEdit](https://support.apple.com/en-gb/guide/textedit/welcome/mac), but these tend to lack the nice features",
      "that we are used, such as Styles, References, or Table of Contents, to name a few.",
      "",
      "Same with programming. While we can write all our programs using [vi](https://en.wikipedia.org/wiki/Vi), it is better to",
      "use an Integrated Development Environment, more commonly known as IDE, instead. IDEs tend to provide many nice features",
      "that help us, like syntax highlighting and code completion to name a few.",
      "",
      "There are many IDEs that we can use. Following are some common IDEs, freely available to download.",
      "",
      "- [IntelliJ IDEA](https://www.jetbrains.com/idea/download/)",
      "- [Visual Studio Code (also known as VS Code)](https://code.visualstudio.com/)",
      "- [Eclipse IDE](https://www.eclipse.org/ide/)",
      "- [NetBeans](http://netbeans.apache.org/)",
      "",
      "Different programmers prefer different IDEs. In the past I've used [Spring Tools for Eclipse](https://spring.io/tools),",
      "which is a variant of the Eclipse IDE as it provided nice features that helped my productivity. Nowadays, I am working",
      "with the IntelliJ IDEA, which comes in two variants, the _Community Edition_ which is free and the _Ultimate Edition_",
      "which requires a paid subscription.",
      "",
      "For this text we recommend the IntelliJ IDEA Community Edition, which can be downloaded for free",
      "from [here](https://www.jetbrains.com/idea/download/). Download the IDE and follow the provided instructions. Open the",
      "IDE once installed. An IDE is a very powerful tool and can overwhelm you. Don't be afraid. IntelliJ comes with great",
      "tutorials that you can follow.",
      "",
      "It's highly recommended spending some time learning the tools that you will be using. On the left side you will see",
      "several options, one of them named _Learning IntelliJ IDEA_. You can use this option to learn about this IDE and how you",
      "can make the best use of it.",
      "",
      "![Learning IntelliJ IDEA](https://i.ibb.co/ygPbVHG/Learning-Intelli-J-IDEA.png)",
      "",
      "If you like to get your hands dirty with some programming, you can also follow courses directly though the IntelliJ",
      "IDEA. This is quite convenient as these course will show you not only how to write simple programs with the programming",
      "language of your choice, but also what you need to do to perform certain tasks.",
      "",
      "![My Courses](https://i.ibb.co/2sjyNgF/My-Courses.png)",
      "",
      "You can read more about this feature of the IntelliJ",
      "IDE [here](https://blog.jetbrains.com/idea/2021/06/intellij-ideas-feature-trainer/).",
      "",
      "This text assumes that if you like to try the examples shown by now you know how to create an empty project with your",
      "IDE, create files and edit them.  All other commands can be executed from the terminal and not through the IDE."
    ]
  },
  {
    "type": "section",
    "id": "749a5790-b3c3-4b32-9fe2-3975c91e7f9e",
    "parameters": [
      "Create Project"
    ]
  },
  {
    "type": "markdown",
    "id": "065a7c2b-5fff-4f56-b203-f5043b8d4421",
    "parameters": [
      "In a house, you typically find things organized in rooms. For example, the kitchen utensils are usually found in the",
      "kitchen while the bathroom relating things are found in the bathroom. This helps us find things quickly.",
      "",
      "We organize things in a similar fashion when writing programs. Let us start by creating a folder, with the",
      "name `hello-world`. While you are free to choose a name of your liking, the following examples will assume that you have",
      "used the proposed name. We will save any files that we will create under this folder. I like to save my projects under a",
      "folder named `Projects`, within home directory (in my case `/Users/albertattard/Projects/`), but you are free to save it",
      "in the most convenient place for you.",
      "",
      "You can use the following command to create the `hello-world` folder."
    ]
  },
  {
    "type": "command",
    "id": "9fc669a1-3c54-4459-b748-b536583107b0",
    "name": "Set up directory",
    "parameters": [
      "rm",
      "-rf",
      "hello-world"
    ],
    "visible": false
  },
  {
    "type": "command",
    "id": "61223f01-4453-410f-b89e-aef485f24334",
    "name": "Create directory",
    "parameters": [
      "mkdir",
      "hello-world"
    ]
  },
  {
    "type": "markdown",
    "id": "9da1ea29-13aa-4810-80af-d4c4275d4fac",
    "parameters": [
      "Can I create the project directly from the IntelliJ IDEA? I don't recommend creating an empty project using IntelliJ",
      "IDEA as it will require lots of manual fiddling. It is better to create an empty folder, using the command shown above",
      "and then open this as a project in the IDE.",
      "",
      "Open IntelliJ IDEA and click the _open_ button. Then select the `hello-world` folder created before. This will open the",
      "IDE, as shown next.",
      "",
      "![Hello World Project](https://i.ibb.co/P9QQcSy/Hello-World-Project.png)",
      "",
      "The IntelliJ IDEA IDE provides a terminal tab that we can use to input command. You can open the terminal tab by",
      "pressing the key shortcut `⌥` (option key) together with the `F12` key. Alternatively, you can simply click on the tab",
      "titled _Terminal_ at the bottom left of the IDE.",
      "",
      "![Terminal Tab](https://i.ibb.co/Tv5Yd4K/Terminal-tab.png)",
      "",
      "You can enter any command shown in this text in this terminal. It will work the same as the other terminal window you",
      "have been using so far.",
      "",
      "What's the _.idea_ folder? The _.idea_ folder contains configuration files about the project created and used by",
      "IntelliJ IDEA ([reference](https://rider-support.jetbrains.com/hc/en-us/articles/207097529-What-is-the-idea-folder-)).",
      "You don't need to worry about this folder."
    ]
  },
  {
    "type": "section",
    "id": "5fd3f327-1ca3-410e-a8a2-05964805e247",
    "parameters": [
      "Create Program"
    ]
  },
  {
    "type": "markdown",
    "id": "83e80677-127a-4c79-97d4-908a73a18279",
    "parameters": [
      "Java 11 introduced the Java Single File Execution ([JEP-330](https://openjdk.java.net/jeps/330)), which enhanced the",
      "Java launcher to run a program supplied as a single file of Java source code. This allows us to run simple Java",
      "programs, like our hello world program, in a similar fashion to a shell script without having to compile it first. Do",
      "not worry if this does not make much sense to you, as maybe you are new to shell scripts. Things will become clearer",
      "once we create our first hello world program.",
      "",
      "Create a file named `HelloWorld`, without spaces or extensions, under the `hello-world` folder, created before. For",
      "those who are familiar with Java, the Java Single File Execution do not have the `.java` extension as expected from the",
      "Java source files."
    ]
  },
  {
    "type": "create",
    "id": "b9d4b6c5-c802-4f70-83bd-93e01d848262",
    "name": "Create Hello World",
    "workingDirectory": "hello-world",
    "parameters": [
      "HelloWorld",
      "#!/usr/bin/java --source 17",
      "",
      "public class HelloWorld {",
      "    public static void main(final String[] args) {",
      "        System.out.println(\"Hello World!!\");",
      "    }",
      "}",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "424f265d-2513-4ce4-a6f5-9cf1e7d13a6a",
    "parameters": [
      "Your program should look like the following image.",
      "",
      "![HelloWorld File](https://i.ibb.co/xLSSzzP/Hello-World-File.png)",
      "",
      "Let's have a simple look at this example. We will start from the inner-most line and will work our way out.",
      "",
      "- We want to print _Hello World!!_, and this is the simplest way to do it.",
      "",
      "  ```",
      "          System.out.println(\"Hello World!!\");",
      "  ```",
      "",
      "  The above example, prints the message _Hello World!!_ to the operating",
      "  system's [standard output](https://en.wikipedia.org/wiki/Standard_streams). All major operating systems have standard",
      "  output and standard error streams where programs can output messages and errors respectively. We can print to the",
      "  standard error instead by switching `out` with `err`, and the message will go to the error stream, as shown next.",
      "",
      "  ```",
      "          System.err.println(\"Hello World!!\");",
      "  ```",
      "",
      "  Why do we need different output streams? A program may output lots of messages to the operating system. Errors can be",
      "  saved into a separate file so that programmers looking after the can easily see the errors without having to filter",
      "  long files. Printing directly to the output streams is not so common and instead we make use of loggers. Do not worry",
      "  if you don't know what loggers are as we will explore this topic later on in this chapter.",
      "",
      "  All major operating systems also support a standard input stream, which is usually connected to the keyboard.",
      "",
      "  We can change what's printed by simply changing what's between the `\"` (_double quotes_).",
      "",
      "- In Java, code like the one shown above needs to go within a method, such as the one we have below.",
      "",
      "  ```",
      "      public static void main(final String[] args) {",
      "  ",
      "      }",
      "  ```",
      "",
      "  The above method is a special method called the main method and all Java programs required one. Java will look for",
      "  this method to start our program. If this program is missing, then Java will fail to start our program.",
      "",
      "- All method in Java needs to be within a class, like the `HelloWorld` class",
      "",
      "  ```",
      "  public class HelloWorld {",
      "  ",
      "  }",
      "  ```",
      "",
      "  A class can contain one or more methods, each having a different method signature. Two methods in the same class need",
      "  to have a unique way to be identified, such as different method name or different method parameters. Otherwise, there",
      "  will be no way for Java to differentiate between the methods.",
      "",
      "- This example is a special Java program that looks more like a bash script. Similar to back scripts, the first line is",
      "  indicating what version of Java we will be using",
      "",
      "  ```",
      "  #!/usr/bin/java --source 17",
      "  ```",
      "",
      "  In our case, we are using Java 17.",
      "",
      "That's our program.",
      "",
      "How do we run this? Like any other shell script, we need to make this file executable. Otherwise, we will not be able to",
      "run it as expected. We can do that using the `chmod` ([wiki](https://en.wikipedia.org/wiki/Chmod)) command, as shown",
      "next.",
      "",
      "Make sure that you execute the command shown next from within the `hello-world` directory. Note that the command is",
      "prefixed with `hello-world $`, to indicate from which folder this command needs to be executed."
    ]
  },
  {
    "type": "command",
    "id": "6de7e17d-212d-4a1c-bbf6-ae8cac9819d9",
    "name": "Make file executable",
    "workingDirectory": "hello-world",
    "parameters": [
      "chmod",
      "+x",
      "HelloWorld"
    ]
  },
  {
    "type": "markdown",
    "id": "ab27c2d7-56e9-4e39-ac56-f5db2b4eab57",
    "parameters": [
      "We are all set to run our hello world program. Run the hello world program using the file name as shown next. As before,",
      "we need to run this command from the same folder where the `HelloWorld` file is."
    ]
  },
  {
    "type": "command",
    "id": "e057d635-a7ff-4c35-a513-f747271a3a2f",
    "name": "Run file",
    "workingDirectory": "hello-world",
    "parameters": [
      "./HelloWorld"
    ]
  },
  {
    "type": "markdown",
    "id": "e21a8853-a494-4932-95cc-1d5d3e3fcd79",
    "parameters": [
      "The program should be run and print `Hello World!!`.",
      "",
      "Yey. We made it!! We have our first Java program, using a new feature introduced in Java 11. Let keep the momentum going",
      "and change the message to anything you like. We changed our example to print `Hello Albert and James!!` instead, as",
      "shown next."
    ]
  },
  {
    "type": "replace",
    "id": "adeb8172-c6e8-4005-a632-04429ec418d8",
    "name": "Create Hello World",
    "workingDirectory": "hello-world",
    "parameters": [
      "HelloWorld",
      "#!/usr/bin/java --source 17",
      "",
      "public class HelloWorld {",
      "    public static void main(final String[] args) {",
      "        System.out.println(\"Hello Albert and James!!\");",
      "    }",
      "}",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "2a7ab83f-3d8b-4af0-bbb0-d426d4701990",
    "parameters": [
      "Run the file again"
    ]
  },
  {
    "type": "command",
    "id": "d71f9449-b4b8-48e5-a962-be4c474447e7",
    "name": "Run file",
    "workingDirectory": "hello-world",
    "parameters": [
      "./HelloWorld"
    ]
  },
  {
    "type": "markdown",
    "id": "b9beb4f7-8b1c-4a23-979f-6dade294d73f",
    "parameters": [
      "Wow!! We got our first program working. While this is a great achievement, we are far from ready. Programming is very",
      "vivid and we have so much to discover.",
      "",
      "Given that it is hard to predict what text you have entered, we will assume your code looks like the following example."
    ]
  },
  {
    "type": "replace",
    "id": "460f6fa5-1c0b-4d30-b3cd-87d41c8f767c",
    "name": "Set the message to a common on so that the examples are consistent",
    "workingDirectory": "hello-world",
    "parameters": [
      "HelloWorld",
      "#!/usr/bin/java --source 17",
      "",
      "public class HelloWorld {",
      "    public static void main(final String[] args) {",
      "        System.out.println(\"Hello World!!\");",
      "    }",
      "}",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "5e02b9ef-4c83-4b87-88be-3e974343a8d0",
    "parameters": [
      "We are all set to venture into the next topic. While it's not required to change your code to proceed, the following",
      "examples build on this. Just keep that in mind when programming."
    ]
  },
  {
    "type": "section",
    "id": "0936ab29-b728-44fd-9d10-df8eef87ac1a",
    "parameters": [
      "Version Control"
    ]
  },
  {
    "type": "markdown",
    "id": "bd76552b-b064-4361-bb46-9a9a44ecd397",
    "parameters": [
      "We started working with one source file, named `HelloWorld`, and it was just us working on it. Projects usually have",
      "more than one file and also shared between many programmers.",
      "",
      "Say that you are very excited about your new project, and you like your friends to contribute too. How can you do that?",
      "You can share the code via email or a share folder like [Google-Drive](https://www.google.com/drive/)",
      "or [Microsoft One-Drive](https://www.microsoft.com/en-ww/microsoft-365/onedrive/online-cloud-storage). Unfortunately",
      "these options are suboptimal. [Source version control (SVC)](https://en.wikipedia.org/wiki/Version_control), such",
      "as [Git](https://git-scm.com/), [Mercurial](https://www.mercurial-scm.org/)",
      "or [Subversion](https://subversion.apache.org/), are a better option to share code. Source version control are programs",
      "that were created to look after code and safely share code between many programmers.",
      "",
      "Say that your friend now did some great changes to the project. How can you see the changes made to the code? Source",
      "version control keep track of all changes made to the project, allowing anyone to check what was done since the project",
      "was created. You, and anyone who has access to the project, can view the changes and compare between different versions.",
      "",
      "Why do I need to compare different versions of my code? Say we are working on a project, and we start noticing problems",
      "following some new changes. Where would you look first? I would look at the new changes, because these problems were not",
      "there before the new changes were introduced. How will you find the new changes in the code, especially in a large code",
      "base? The source version control can help there as one of their ability is to compare different versions of the program.",
      "Comparing the previous version of the code with the current version of the code will allow us to see what changes were",
      "made to the project. This can help us narrow down the initial search area from the whole project to only the parts that",
      "changed. While the problem may be triggered elsewhere, chances are that the root cause is a change we recently",
      "introduced.",
      "",
      "How do source version control work? Source version control creates streams of work, referred to as branches. All changes",
      "made are captured and saved forever in a branch. When something is added or deleted, the source version control captures",
      "the change and saves this as the new version. The previous version is never changed or deleted. For example, say that we",
      "create a file, then we change it and finally we deleted, as three separate actions. The source version control will do",
      "the following",
      "",
      "- Version 1 - File is created",
      "- Version 2 - File is updated",
      "- Version 3 - File is deleted",
      "",
      "The source version control will retain all three versions and while at version 3, the file will not exist, you can go",
      "back to version 2 and see the file there.",
      "",
      "How are branches useful? Let say for example that we are working on a small program that manages a shopping list shared",
      "by a household. People living in the same house can put items in the share shopping list and then whoever does groceries",
      "next, will buy whatever is on the shopping list. Now say that we want to add a new functionality, but we are not yet",
      "certain how this will fit with the rest. How can we do that without disrupting the main production program? One way, to",
      "do so is using branches. We can create a branch from the current main branch and experiment with that without disrupting",
      "the main branch. When we are done and happy with the result, then we can merge the changes of our branch with those of",
      "the main branch and put our new features to production. Branches are nothing but streams of work. It is like a",
      "production line, where the production code will go. By creating a new branch we will be creating a parallel stream of",
      "work that starts with the current code, but then it is free to change without effecting the production code.",
      "",
      "What are the alternatives to branches? Like most of the things in programming, branches has tradeoffs. While great at",
      "isolating work, merging two stream of work together after these have been actively modified may be very challenging.",
      "When merging two branches you mey encounter merge conflicts where one change made in one branch conflict with another",
      "made to the merging branch. What do you do then? The merge conflicts needs to be manually resolved, a tedious job that",
      "few like to perform. Merging two weeks of work can easily take a couple of days.",
      "",
      "Source version control may sound a bit complicated, and while it is important, you don't need to master it before",
      "starting programming. In this text we will use [Git](https://git-scm.com/), according to Google trends, the most popular",
      "source version control",
      "nowadays ([reference](https://trends.google.com/trends/explore?q=%2Fm%2F05vqwg,%2Fm%2F012ct9,%2Fm%2F08441_)). This is",
      "not to be confused with [GitHub](https://github.com/), which is a Git hosting service. You can use Git on your computer",
      "without GitHub.",
      "",
      "What is the different between Git and GitHub? Git is the source version control program that looks after your code. This",
      "is installed on your computer. GitHub is a service that you can use together with Git to save your work in the cloud.",
      "Like that, if your computer breaks, you can continue working on another computer by pulling the code form GitHub without",
      "losing any work. Furthermore, when sharing your project, you will need a remote server where you can push your code.",
      "This is where GitHub comes into play. Using Git commands, you can push changes to GitHub and then others, working on the",
      "same project, can pull these images from GitHub. GitHub is a connecting point where everyone can push to and pull",
      "changes from. It is important to note that GitHub does more than just that. It has many great features like code reviews",
      "for example. You can leave comments about some changes made by others. They can then pick these comments and apply the",
      "recommended changes. GitHub can also be configured to test our code automatically when changes are pushed, ensuring that",
      "what was working before keeps working. We will come back to this topic later on in this text.",
      "",
      "There are other source version control, such as Mercurial or Subversion, to name two. These all achieve similar things,",
      "keep track of code changes, and have different distinct features. While it is good to know the Git alternate options,",
      "Git dominated the",
      "market ([reference](https://trends.google.com/trends/explore?q=%2Fm%2F05vqwg,%2Fm%2F012ct9,%2Fm%2F08441_)), and would be",
      "best to focus on this.",
      "",
      "The text will introduce all Git commands used and will not take it for granted that you know anything beforehand. While",
      "the commands discussed in this text will get you going, it is recommended to further your Git knowledge by reading",
      "dedicated books about the matter. Following are two titles that may interest you, in no particular order",
      "",
      "- Pro Git second Edition",
      "- Ry's Git Tutorial",
      "",
      "*TODO* Include this.  Git became the defacto source version control.  Tools like cargo and vue-cli include it was part of the new project template."
    ]
  },
  {
    "type": "subsection",
    "id": "5ebcf96e-bb66-4f6e-b3b4-ba2e296d1e44",
    "parameters": [
      "Git"
    ]
  },
  {
    "type": "markdown",
    "id": "6ba0f35d-04e4-4e88-b90b-7d4bb7337ef3",
    "parameters": [
      "Git is a source version control program installed on your computer. While it can communicate with a remote server, such",
      "as GitHub, Git can work offline. Chances are that Git is already installed on your Mac. Try the following command, that",
      "simply prints the version of Git installed."
    ]
  },
  {
    "type": "command",
    "id": "54a2c947-be89-4dfd-8293-0c98cfdeb9cf",
    "name": "Check git version",
    "workingDirectory": "hello-world",
    "parameters": [
      "git",
      "--version"
    ]
  },
  {
    "type": "markdown",
    "id": "32aa8a54-279b-4551-98dc-f443e5a2062a",
    "parameters": [
      "If installed, it will print the version number of Git on your laptop, similar to what is shown next.",
      "",
      "```",
      "git version 2.30.1 (Apple Git-130)",
      "```",
      "",
      "If Git is not installed, then please following the installations instructions",
      "provided [here](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git). These instructions cover all major",
      "operating systems.",
      "",
      "Git works on directories. You go into a directory that you would like to have under version control and",
      "execute `git init`. Let us put our exiting file `HelloWorld` under version control, by executing the following command.",
      "Note that we need to run the following command from within the `hello-world` folder."
    ]
  },
  {
    "type": "command",
    "id": "d671f3e5-ced5-4a5d-b299-9846aae2fdbe",
    "name": "Create repository with main as its branch",
    "workingDirectory": "hello-world",
    "parameters": [
      "git",
      "init",
      "--initial-branch=main"
    ]
  },
  {
    "type": "markdown",
    "id": "b5eb5bd6-7ce0-4edc-a0f0-601d21336737",
    "parameters": [
      "The `git init` command will create an empty Git repository in the `hello-world` folder and will output something similar",
      "to the following.",
      "",
      "```",
      "Initialized empty Git repository in hello-world/.git/",
      "```",
      "",
      "What is a Git repository? A git repository is a folder, like our `hello-world` folder, under Git's",
      "control ([reference](https://git-scm.com/book/en/v2/Git-Basics-Getting-a-Git-Repository)).",
      "",
      "Together with the `init` argument, we also provided `--initial-branch` and `main` arguments. This instructed Git to name",
      "the branch that we will working on to `main`. You can use any name you like, say `production` or `experiment`,",
      "but `main` is the most common name picked nowadays. This was not always the case. In older projects, you would",
      "see `master` instead of `main`. This change in name happened as term _master_ is related to slavery and a trend was",
      "started towards naming the branch to `main` instead. You can find more about this in an article",
      "titled [GitHub to replace 'master' with 'main' starting next month](https://www.zdnet.com/article/github-to-replace-master-with-main-starting-next-month/)",
      "on [zdnet](https://www.zdnet.com).",
      "",
      "What is the difference between the `--initial-branch` and `-b` arguments? Git supports long and short arguments.",
      "The `-b` is the short version of the",
      "longer `--initial-branch` ([reference](https://git-scm.com/docs/git-init#Documentation/git-init.txt--bltbranch-namegt)).",
      "In this text we will use the longer version of the argument as these tend ot be more descriptive. When typing the",
      "commands manually, the shorter arguments are usually preferred.",
      "",
      "What happens if we don't provide a branch name? If no branch name is provided using the `--initial-branch` argument, Git",
      "will use your default settings. If no settings are found for the branch name, then Git uses `master`. You can see the",
      "default branch name using the following command."
    ]
  },
  {
    "type": "command",
    "id": "ba8d489c-235c-4826-8bba-8be4cf21caba",
    "name": "Get the global default branch name",
    "parameters": [
      "git",
      "config",
      "--global",
      "--get",
      "init.defaultBranch"
    ],
    "ignoreErrors": true
  },
  {
    "type": "markdown",
    "id": "c7fc8aa6-3fe3-4f00-9ffa-784a9b4014ce",
    "parameters": [
      "How come we did not run the previous command from within the `hello-world` folder? We could run the command from",
      "the `hello-world` folder as it does not make a difference since we are configuring the Git global settings. Running this",
      "command from anywhere in your computer will produce the same result as this is changing the Git global settings, which",
      "are found at `~/.gitconfig` or `~/.config/git/config` file. You can find more information about",
      "this ([here](https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration)).",
      "",
      "If the initialisation default branch, `init.defaultBranch`, is not set, then the above command will print nothing.",
      "Otherwise, it prints the value of the initialisation default branch name. I like to have `main` as my default branch",
      "name and thus I have it set as my default initialisation branch name. You can set the default initialisation branch name",
      "using the following command."
    ]
  },
  {
    "type": "command",
    "id": "9ef2a290-da6a-444d-87f0-cd117132b0db",
    "name": "Set the global default branch name to main",
    "parameters": [
      "git",
      "config",
      "--global",
      "init.defaultBranch",
      "main"
    ]
  },
  {
    "type": "markdown",
    "id": "3d0ec6bc-3b18-45f6-b6ee-0567de2db324",
    "parameters": [
      "How does Git distinguish between users? How does Git knows that I made the changes and not someone else? Git works on",
      "your computer and it does not require you to authenticate yourself. Therefore, you can work with Git without providing",
      "user information. With that being said, it is not ideal to work with Git without providing who you are.",
      "",
      "You can configure user information at either global level or project/repository level. Why do you need to have more than",
      "one user information? On the same computer, a programmer may have work related projects and personal projects. Git",
      "allows us to have user information set at project/repository level so that we can separate work and personal things. We",
      "may need to use the work email for the work projects and the personal email for the personal projects.",
      "",
      "What kind of user information can we configure? There are many user related information, the two most commonly used are",
      "the username and the user email ([reference](https://git-scm.com/book/en/v2/Getting-Started-First-Time-Git-Setup)). If",
      "no user information is provided, Git will not be able to say who made the changes and will print anonymous instead of",
      "the username. While this is not a problem when working alone as you are the only contributor, this becomes very",
      "important when working in a team. Say that you like to understand some changes in the code. Who will you ask? Using Git",
      "you can see who made those changes and go directly to them.",
      "",
      "User information can provide more information that just a point of reference. Say we have a team of 10 programmers, and",
      "a key programmer has decided to leave the team. How can we mitigate against the risk of having knowledge gaps in the",
      "code before this programmer leaves and focus our handover in these areas? We can use Git to find code that the",
      "programmer that is leaving has worked on and the other programmers have not. Given that Git captures the user",
      "information we can analyse the code and find knowledge gaps and address these. We can take this to one step further and",
      "prevent knowledge gaps from being created by making sure that the code is modified by more than one person.",
      "",
      "There are existing tools and service, such as [CodeScene](https://codescene.io/), that can help with that. The CodeScene",
      "website provides some examples, such as the one for the [React project](https://reactjs.org/),",
      "shown [here](https://codescene.io/projects/167/jobs/231789/results/social/knowledge/individuals). The graph shown in the",
      "aforementioned page represents the code as knowledge islands and provides a tool for the teams to find and address such",
      "issues. The author _Adam Tornhill_ behind CodeScene, has two books about this _Your Code as a Crime Scene_ and _Software",
      "Design X-Rays_, if you like to learn more about the topic.",
      "",
      "How do I set the user information? That's very easy. We can use the `git config` option as we did when setting the",
      "default initial branch name, as shown next."
    ]
  },
  {
    "type": "command",
    "id": "b9c78f60-b941-48a5-a6f9-c084faff2607",
    "name": "Set the programmer name for repository",
    "workingDirectory": "hello-world",
    "parameters": [
      "git",
      "config",
      "user.name",
      "Albert Attard"
    ]
  },
  {
    "type": "markdown",
    "id": "8cc2f2d6-f8ec-484c-b093-3ee9656323a2",
    "parameters": [
      "How come we did not use the `--global` as before? The command shown above is setting the username only for this",
      "repository. Also note that we ran this command from within the `hello-world` folder as we need to change the settings",
      "for the repository found here, in the `hello-world` folder.",
      "",
      "Using this approach we can have different username for different repositories. This is very convenient as we may want to",
      "use our name on some projects and our company provided ID or pseudonym with work related projects. If you are always",
      "using the same name in all your projects, both personal and professional, then you can set it globally, by adding",
      "the `--global` argument, as shown next."
    ]
  },
  {
    "type": "command",
    "id": "32fef68d-4452-494d-b8b8-e2b7969cfd8f",
    "name": "Set the Git username globally",
    "parameters": [
      "git",
      "config",
      "--global",
      "user.name",
      "Albert Attard"
    ]
  },
  {
    "type": "markdown",
    "id": "e825abcd-deee-4fc4-95f5-855a25d4e34a",
    "parameters": [
      "Similar to before, when changing global Git settings, you don't have to run the command from any particular folder.",
      "",
      "Together with the name we also need to provide the email address. The email address plays an important role and is used",
      "by other services, like GitHub (a service that allows you to host Git projects remotely), to link these commits to your",
      "account ([reference](https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-user-account/managing-email-preferences/setting-your-commit-email-address))",
      ".",
      "",
      "Let configure the email address for this repository."
    ]
  },
  {
    "type": "command",
    "id": "e4e58e45-e0d8-4144-af1c-d6766b1b1c86",
    "name": "Set the programmer's email for this repository",
    "workingDirectory": "hello-world",
    "parameters": [
      "git",
      "config",
      "user.email",
      "albertattard@gmail.com"
    ]
  },
  {
    "type": "markdown",
    "id": "b80ad757-f6bb-4dca-a72a-e844fe89c1ff",
    "parameters": [
      "Should we set the email address globally, instead? The email address is used to identify you and link your commits to",
      "your account. You may also be required to sign your commits using a PGP key linked to this email address. Setting a",
      "global email address may introduce the risk of having commits with the wrong email address. Therefore, I recommend of",
      "setting the email address only at the repository level. _Erik Dörnenburg_, Head of Technology at",
      "ThoughtWorks ([LinkedIn](https://de.linkedin.com/in/edoernenburg)), talks about this in more depth in one of their",
      "article, titled [Using multiple Github accounts](https://erik.doernenburg.com/2017/12/using-multiple-github-accounts/).",
      "",
      "Given that I can use any name and email address, is this a bit insecure? I can masquerade anyone. I can be _Brian Goetz_",
      ", the Java Language Architect at Oracle, for example. Yes, you can set your local use setting to anything you like. But",
      "this is where it stops. Once ready, you will push your changes to a remote server like GitHub. GitHub will require you",
      "to authenticate yourself, using either a username and password or an SSH Key. Without _Brian Goetz_, credentials or SSH",
      "key you cannot push to GitHub using their name. Furthermore, you may also decide to sign your commits using your well",
      "known key pair. This is a bit of an advanced topic and while it's ok if you don't understand it, it is important to know",
      "that this exists. Anyone, can verify that this code was signed by you using the public/private key cryptography. This",
      "ensures that whoever signed this commit also has the private key. This is also linked to your email address, thus making",
      "it very hard for someone else to sign a commit masquerading as you.",
      "",
      "You can read more about SSH and Signing commits at:",
      "",
      "- [Generating a new SSH key and adding it to the ssh-agent](https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent)",
      "- [Signing commits](https://docs.github.com/en/github/authenticating-to-github/managing-commit-signature-verification/signing-commits)",
      "",
      "Given that we will be only working locally now, we can skip these and come back to them before we need them.",
      "",
      "What king of files do we put in the source version control? Our `hello-world` folder will contain our source code, such",
      "as the `HelloWorld` file and other non-project related files and folders, like the `.idea` folder or the  `.DS_Store`",
      "file created by the Mac operating system. We don't need to include these files and folders in the repository. Only",
      "our `HelloWorld` file should go in the repository.",
      "",
      "Git provides easy way to prevent files from being added to the repository. Using the `.gitignore` file, we can put a",
      "list of files that we don't want to include in our repository. Let us create the `.gitignore` file under",
      "the `hello-world` folder and ignore some files."
    ]
  },
  {
    "type": "create",
    "id": "b3d6caad-1b50-4b84-bb70-32b80daf6333",
    "name": "Ignore non source files",
    "workingDirectory": "hello-world",
    "parameters": [
      ".gitignore",
      "# Ignore IntelliJ specific files",
      "/.idea",
      "/out",
      "/*.iml",
      "",
      "# Ignore Java classes",
      "/*.class",
      "",
      "# Ignore Operating System files",
      "**/.DS_Store",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "753be144-5b60-47b7-84c9-f32c5ae082fd",
    "parameters": [
      "How does the `.gitignore` works? In the `.gitignore` file we can put the files and folders we want to ignore. We can put",
      "comments too. Any line starting with `#` is a comment, such as `# Ignore IntelliJ specific files`. We are ignoring the",
      "files or folders `.idea` and `out` at the top folder. We can also ignore files and folders based on patterns, such",
      "as `*.iml` and `*.class`. We are ignoring all files or folders at the top folder that finish with _.iml_ or _.class_. We",
      "can also ignore files or folders in any subfolder, such as `**/.DS_Store`. The `**` (double star) indicates any",
      "subfolder. We are ignoring the files or folders with name _.DS_Store_.",
      "",
      "Now we are all set. Let commit our changes."
    ]
  },
  {
    "type": "command",
    "id": "8c9165f8-f265-4612-92d8-89ddd1d298b9",
    "workingDirectory": "hello-world",
    "parameters": [
      "git",
      "commit",
      "--message",
      "Create Hello World application"
    ],
    "expectedExitValue": 1
  },
  {
    "type": "markdown",
    "id": "a18e33e2-3d34-4194-b716-964e32641e0a",
    "parameters": [
      "The commit did not yield the expected results and you will see something like the following.",
      "",
      "```",
      "...",
      "nothing added to commit but untracked files present (use \"git add\" to track)",
      "```",
      "",
      "What did go wrong here? Git gave us a hint here. We need add the files we want to commit to the staging area",
      "first ([reference](https://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository)). We need to use",
      "the `git add` command first ([reference](https://git-scm.com/docs/git-add)). The error message also provided us a hint",
      "of all untracked files, files that are not yet under Git's control.",
      "",
      "```",
      "...",
      "Untracked files:",
      "  (use \"git add <file>...\" to include in what will be committed)",
      "\t.gitignore",
      "\tHelloWorld",
      "...",
      "```",
      "",
      "We have two untracked files.",
      "",
      "- `.gitignore`",
      "- `HelloWorld`",
      "",
      "We need to add these two files first, then commit the files. We can add the files individually or add them all at once.",
      "We will add all files are once."
    ]
  },
  {
    "type": "command",
    "id": "c4757534-1cff-46da-8955-be628e1b58fc",
    "workingDirectory": "hello-world",
    "parameters": [
      "git",
      "add",
      "."
    ]
  },
  {
    "type": "markdown",
    "id": "fe229724-34f6-484e-aa2c-1f52064fb7a1",
    "parameters": [
      "We added all files, except what matches the `.gitignore` files. We can check the status using the `git status` command."
    ]
  },
  {
    "type": "command",
    "id": "169fd5ff-4599-4c4e-a3d8-5420d7781f7a",
    "workingDirectory": "hello-world",
    "parameters": [
      "git",
      "status"
    ]
  },
  {
    "type": "markdown",
    "id": "d73ba1e8-6a2a-4b7e-82bb-b851f90ac7f4",
    "parameters": [
      "We have two files that are ready to be committed. So what are we waiting for."
    ]
  },
  {
    "type": "command",
    "id": "51208c49-1642-4c03-97f8-29db73a89e47",
    "workingDirectory": "hello-world",
    "parameters": [
      "git",
      "commit",
      "--message",
      "Create Hello World application"
    ]
  },
  {
    "type": "markdown",
    "id": "0a3c000b-8eb8-42bf-8778-ca6561e5deae",
    "parameters": [
      "In a project we may have many commits. We can also tag a commit, to help us find a particular commit, similar to a",
      "bookmarks in a book. Tags are commonly annotated with [semantic versioning](https://semver.org/), such as _v1.0.0_. Like",
      "that we can easily know what code constitutes which version.",
      "",
      "Why do we need all this complexity? Say that we have version _v3.2.4_ deployed at a given client and we are working on",
      "version _v4.5.6_ and the client reports a problem. Using tags we can view the code at the required tag and investigate",
      "the problem."
    ]
  },
  {
    "type": "command",
    "id": "cde8fbba-9bf3-46a9-af0e-32ea3b09e2aa",
    "workingDirectory": "hello-world",
    "parameters": [
      "git",
      "tag",
      "--annotate",
      "v1.0.0",
      "--message",
      "Java single file execution"
    ]
  },
  {
    "type": "markdown",
    "id": "a4696c42-9973-4888-b36e-4791ffc79e3e",
    "parameters": [
      "We have made our first commit and tagged this commit too. We can list all available tags."
    ]
  },
  {
    "type": "command",
    "id": "c9b1d115-07f0-43f1-b471-f73a0ac33616",
    "name": "List all tags and their messages",
    "workingDirectory": "hello-world",
    "parameters": [
      "git",
      "tag",
      "-n"
    ]
  },
  {
    "type": "markdown",
    "id": "3c42681d-3197-4661-9527-0d9c46a9c4f1",
    "parameters": [
      "So far we have only one tag.  We can check out any tag and view the code at that particular version."
    ]
  },
  {
    "type": "command",
    "id": "c892e03d-8f69-4d44-ba32-ca1b46618e1e",
    "name": "Check out a tag",
    "workingDirectory": "hello-world",
    "parameters": [
      "git",
      "checkout",
      "v1.0.0"
    ]
  },
  {
    "type": "markdown",
    "id": "10629a52-0d8a-4133-9c3a-eff9bce94698",
    "parameters": [
      "This will print out a long message. Don't be alarmed, as all worked as planned. Git introduced two new commands,",
      "the `git switch` and",
      "the `git restore` ([reference](https://github.com/git/git/blob/master/Documentation/RelNotes/2.23.0.txt)). With this",
      "command we went back to a particular tag, _v1.0.0_ in our case. We cannot make changes as in Git, like in life, you",
      "cannot change the past. If you need to modify an old version and make a release with the new changes, we need to create",
      "a new branch first. This is what's this message about ([reference](https://git-scm.com/book/en/v2/Git-Basics-Tagging)).",
      "",
      "We need to continue working on this project so let's go back, by checking out `main`."
    ]
  },
  {
    "type": "command",
    "id": "93c8ca0c-f334-44d6-be28-85fa5307080e",
    "name": "Go back to main",
    "workingDirectory": "hello-world",
    "parameters": [
      "git",
      "checkout",
      "main"
    ]
  },
  {
    "type": "markdown",
    "id": "5a3d2009-41be-46b3-af31-5ff759c5e21a",
    "parameters": [
      "Git is a very powerful tool. Here we went through some common commands that we will be using throughout this text. While",
      "these are most of the commands that you will work with, it is highly recommended reading more about Git and deepen your",
      "knowledge."
    ]
  },
  {
    "type": "section",
    "id": "c12615e0-46a4-4d8f-a3ff-dcbd28c9aa65",
    "parameters": [
      "Basic Java Application"
    ]
  },
  {
    "type": "markdown",
    "id": "7e6609a5-2e7c-4559-8e1e-3fc253125338",
    "parameters": [
      "In the previous section we created a single, script like, Java file. Programs require more than just one class and make",
      "use of third party dependencies, which we will discuss later on. While very convenient very small programs that can fit",
      "in one class, the Java Single File Execution was introduced to allow the use of the Java programming languages in a",
      "script, like bash script, and not to write programs with.",
      "",
      "What's the difference between a script and a program? This can be confusing as both are programs. In this text, a script",
      "is a file that contains code, and can run without the need of compilation. As we saw before, we created the",
      "file `HelloWorld` and then ran it by simply calling its name `./HelloWorld`. Programs, on the other hand, comprise one",
      "or more files, packaged together and compiled as a single unit. We cannot run the program like we did with",
      "the `HelloWorld` script. Instead, we need to compile it first and then run the program produced by the compiler.",
      "",
      "Before start making changes, let's create a tag to mark our starting points. We can use this tag to got back in time and",
      "see how the code looked like before we started."
    ]
  },
  {
    "type": "git-tag-current-commit",
    "id": "e7436acf-1f21-45f5-8216-6257045c5e67",
    "name": "Create starting point",
    "workingDirectory": "hello-world",
    "parameters": [
      "v2.0.0",
      "Start of Basic Java Application"
    ]
  },
  {
    "type": "markdown",
    "id": "1642f05f-f62b-4bd0-8759-58b27653c26f",
    "parameters": [
      "Java source files have the extension of `.java`. The `HelloWorld` file we created before does not have any file",
      "extension, just the file name.",
      "",
      "Rename the file, using `git mv` and not the `mv` command, as shown next.  This simplifies the file tracking by Git."
    ]
  },
  {
    "type": "command",
    "id": "36ec15e0-de10-4d62-8057-2247532879cc",
    "name": "Rename file",
    "workingDirectory": "hello-world",
    "parameters": [
      "git",
      "mv",
      "HelloWorld",
      "HelloWorld.java"
    ]
  },
  {
    "type": "markdown",
    "id": "a3be5b61-365a-4146-a8ff-3593783889e9",
    "parameters": [
      "Our file name now is `HelloWorld.java` but the contents of the file still looks like a Java Single File Execution. We",
      "need to change this.",
      "",
      "This file is small and requires few changes and we can simply show how the new file looks like. Instead of doing that,",
      "we will use another notion, we will indicate which lines need to be deleted and which lines are added. Consider the",
      "following example."
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "0e4759bb-b3aa-4fb8-a769-4b4c662dfc88",
    "name": "Convert the file to a proper Java source file",
    "workingDirectory": "hello-world",
    "parameters": [
      "diff --git a/HelloWorld.java b/HelloWorld.java",
      "index cc78ded..cd36a67 100755",
      "--- a/HelloWorld.java",
      "+++ b/HelloWorld.java",
      "@@ -1,5 +1,3 @@",
      "-#!/usr/bin/java --source 17",
      "-",
      " public class HelloWorld {",
      "     public static void main(final String[] args) {",
      "         System.out.println(\"Hello World!!\");",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "12994a78-9c3f-4a9c-a863-88bfb6fa4b39",
    "parameters": [
      "The above example, we need to delete the first two lines as indicated by the `DEL`. After applying the changes,",
      "the `HelloWorld.java` file should look like the following.",
      "",
      "```",
      "public class HelloWorld {",
      "    public static void main(final String[] args) {",
      "        System.out.println(\"Hello World!!\");",
      "    }",
      "}",
      "```",
      "",
      "If we try to run the file, as we did before, this will produce an error. We first need to compile it into bytecode using",
      "the Java compiler. The Java compiler is a program used to take in Java source files and produced Java class files",
      "containing bytecode. The Java compiler is part of the Java Development Kit, but not part of the Java Runtime",
      "Environment."
    ]
  },
  {
    "type": "command",
    "id": "2292804d-fc7f-4c3c-942a-382d48e01f16",
    "name": "Compile file",
    "workingDirectory": "hello-world",
    "parameters": [
      "javac",
      "HelloWorld.java"
    ]
  },
  {
    "type": "markdown",
    "id": "2eb46d5b-57eb-4414-96ac-abb9bceacb98",
    "parameters": [
      "The Java compiler will produce class files. Class files are files with the `.class` extension. When we compile",
      "our `HelloWorld.java` source file we will end up with the `HelloWorld.class` class file. If we list the files within the",
      "directory we will see our source file, `HelloWorld.java` and the newly created class file,  `HelloWorld.class`."
    ]
  },
  {
    "type": "command",
    "id": "619b25fd-d1d7-4274-90d8-073c996dd34b",
    "name": "List all class files within the directory",
    "workingDirectory": "hello-world",
    "parameters": [
      "ls",
      "-l"
    ]
  },
  {
    "type": "markdown",
    "id": "bac4510a-ef75-4750-ba45-0480299f3cc2",
    "parameters": [
      "What is the relation between the class name, `HelloWorld`, the source file name, `HelloWorld.java`, and class file",
      "name `HelloWorld.class`? A source file can contain one or more classes, but there can be at most one `public` class. We",
      "will see an example of two classes within one source file later on. For now, just understand that",
      "",
      "- The class file will have the name of the class, and not of the source file. Yes, then can be the same as we saw here,",
      "  but may not.",
      "",
      "- A class file is created for every class. If a source file contains three classes, then three class files are created.",
      "",
      "- If the class is public, the class name must match the source file name. That why our file is named `HelloWorld.java`",
      "  . Given that the public class must have the same name as the file name, we can only have one public class in one",
      "  source file as the source file must have the same name as the `public` class.",
      "",
      "  Consider the following example of a source file containing two public classes",
      "",
      "  ```",
      "  public class A {",
      "  }",
      "  ",
      "  public class B {",
      "  }",
      "  ```",
      "",
      "  Our source file has two classes, `A` and `B`, both of which are public. What name should the source file be, `A.java`",
      "  or `B.java`? This will not work as the source file needs to have the same name as the public class, and we have two of",
      "  them. That's why at most there can be only one public class within one source file.",
      "",
      "- If the source file contains non-public classes then it can have any valid file name.",
      "",
      "  Consider the following example of a source file containing two package-private classes. A package-private, also",
      "  referred as default, class is a class that does not have the public access modifier, as shown below. Note that a class",
      "  can either be public, which means is accessible from anywhere or package-private, which means that it can only be",
      "  accessed from the same package. We have not yet mentioned packages yet, but these can be seen as folders.",
      "  Package-private classes can only be accessed from other classes from within the same folder.",
      "",
      "  ```",
      "  class A {",
      "  }",
      "  ",
      "  class B {",
      "  }",
      "  ```",
      "",
      "  We can have these classes in a source file named, `C.java` for example. Given that there are no public classes within",
      "  the source file, it can have any name you like, as long as it is valid.",
      "",
      "Does the source file need to have the `.java` extension? Yes, the compiler will return an error if the source file does",
      "not end with the `.java` extension.",
      "",
      "How do we run the new program?  We can run the new program using the Java runtime as shown next. "
    ]
  },
  {
    "type": "command",
    "id": "8d653a1a-793e-4c8c-b815-931743f5e95b",
    "name": "Run file",
    "workingDirectory": "hello-world",
    "parameters": [
      "java",
      "HelloWorld"
    ]
  },
  {
    "type": "markdown",
    "id": "69646709-d072-4f39-8913-37549860d785",
    "parameters": [
      "Why did we use the class name and not the class file name? When running a Java program, as we did just now, we provide",
      "the class name we want to run. Java will search the current directory and loads all class files found in this directory.",
      "Then it searches for the class and runs it. This can be a lot to take in at this early point.",
      "",
      "We have successfully converted our script to a Java class. It is a good idea to commit our changes.",
      "",
      "Should we include the class file in out source version control? No, generated files such as our class files, are not",
      "generally included in the source version control. I said \"_are not generally included_\" as there may be cases where",
      "generated files are included in the source version control, but not in this case.",
      "",
      "We can add all changes, commit and tag as shown next."
    ]
  },
  {
    "type": "git-commit-changes",
    "id": "1bf37ac1-9b23-42cb-acab-0cb7579a282c",
    "name": "Commit changes",
    "workingDirectory": "hello-world",
    "parameters": [
      "Basic Java application",
      "v2.0.2"
    ]
  },
  {
    "type": "markdown",
    "id": "da33f68c-91c5-4cf5-86ef-738a4766698c",
    "parameters": [
      "We have converted the script into a Java source file. In the next section we will take this one step further and",
      "generalise the message output."
    ]
  },
  {
    "type": "section",
    "id": "cfb70c8e-b916-4f7d-aa24-fa772b958ead",
    "parameters": [
      "Generalize Messages"
    ]
  },
  {
    "type": "markdown",
    "id": "cd3b703e-ee60-431f-a11f-deeca94a588d",
    "parameters": [
      "Our program prints a message to the standard output. We can improve this by printing the time together with the message.",
      "As we did before, let's tag the staring point so that we can easily go back to the starting point should we need to."
    ]
  },
  {
    "type": "git-tag-current-commit",
    "id": "2459aa88-7146-400c-9709-e127e409cd35",
    "name": "Create starting point",
    "workingDirectory": "hello-world",
    "parameters": [
      "v3.0.0",
      "Start of Generalize Messages"
    ]
  },
  {
    "type": "markdown",
    "id": "ba42ab37-9c1b-4cbc-b165-a35580074763",
    "parameters": [
      "There are many ways we can include the current date and time, but the String",
      "formatting ([`Formatter` Java Doc](https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html))",
      "is the simplest option.",
      "",
      "The standard output provides the `printf()`",
      "method ([Java Doc](https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/PrintStream.html#printf(java.lang.String,java.lang.Object...)))",
      ", which takes a pattern and a set of arguments to be formatted. Consider the following code fragment",
      "",
      "```",
      "System.out.printf(\"I am %d years old%n\", 18)",
      "```",
      "",
      "This will print the following to the standard output.",
      "",
      "```",
      "I am 18 years old",
      "```",
      "",
      "The String formatter replaced the format specifier `%d` with the second argument, `18` in this example.",
      "",
      "What's the `%n` format specifier? The `%n` format specifier instructs the String formatter to add a new line.",
      "",
      "How many format specifiers can we have? We can have as many format specifiers as we need. Say we want to print out the",
      "name and the age. We can use something like the following.",
      "",
      "```",
      "System.out.printf(\"My name is %s and I am %d years old%n\", \"Albert\", 18)",
      "```",
      "",
      "Now we have two format specifiers, the name and the age. The argument `\"Albert\"` will go to the first format",
      "specifier, `%s`, and the argument `18` will go in the second format specifier, `%d`.",
      "",
      "What's the different between the `%s` and `%d` format specifiers? The `%s` format specifier treats the argument as a",
      "String while the `%d` format specifier treats the argument as an integer. There are specific formatting options, such as",
      "string alignment, that each format specifier supports. While the `%s` format specifier can take anything, the `%d`",
      "format specifier only works with integers.",
      "The [`Formatter` Java Doc](https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html)",
      "provides a good description of each format specifier and how this can be used.",
      "",
      "As indicated before we can format dates and times too, as shown below.",
      "",
      "```",
      "System.out.printf(\"[%tF %<tT] Hello World!!%n\", System.currentTimeMillis())",
      "```",
      "",
      "This is a bit more tricky. We are using the `%t` format specifier twice, once to format the date, `%tF`, and the second",
      "time to format the time `%tT`. These are only two options. A list of all possible options can be found in",
      "the [`Formatter` Java Doc](https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html).",
      "",
      "Why did we use the `<` in the second format specifier? We want to format the current date and time, which is obtained",
      "from",
      "the `System.currentTimeMillis()` ([Java Doc](https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#currentTimeMillis()))",
      "method. We are obtaining one value and we need to use it in two format specifiers. Using the `<` we indicate that this",
      "format specifier will use the value of the previous format specifier.",
      "",
      "We can provide an index instead if we like, as shown next.",
      "",
      "```",
      "System.out.printf(\"[%tF %1$tT] Hello World!!%n\", System.currentTimeMillis())",
      "```",
      "",
      "We can provide an index to all the format specifiers as shown next",
      "",
      "```",
      "System.out.printf(\"[%1$tF %1$tT] Hello World!!%n\", System.currentTimeMillis())",
      "```",
      "",
      "All of these will yield the same result. We will use the first one as it is the least fragile in this case. Given that",
      "all we need is to have these two format specifiers using the same value, using the `<` does the trick. Introducing a new",
      "format specifier before the time format specifiers will not break anything. If on the other hand we use the numbers,",
      "then we need to change these to reflect the new indices.",
      "",
      "Let's update our example."
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "3ffe5bd6-b7e0-439d-87fe-071481366171",
    "name": "Add timestamp to message",
    "workingDirectory": "hello-world",
    "parameters": [
      "diff --git a/HelloWorld.java b/HelloWorld.java",
      "index cd36a67..7cadca9 100755",
      "--- a/HelloWorld.java",
      "+++ b/HelloWorld.java",
      "@@ -1,5 +1,5 @@",
      " public class HelloWorld {",
      "     public static void main(final String[] args) {",
      "-        System.out.println(\"Hello World!!\");",
      "+        System.out.printf(\"[%tF %<tT] Hello World!!%n\", System.currentTimeMillis());",
      "     }",
      " }",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "d378c053-b69d-4860-b35f-d270b46bccde",
    "parameters": [
      "In the above change, we are replacing one line with another. The line that is effected is line 3, as indicate in the",
      "left margins. The first line to be changes, marked with `DEL`, will be replaced with the following line, marked",
      "with `ADD`.",
      "",
      "After applying the changes, the source file should look like the following.",
      "",
      "```",
      "public class HelloWorld {",
      "    public static void main(final String[] args) {",
      "        System.out.printf(\"[%tF %<tT] Hello World!!%n\", System.currentTimeMillis());",
      "    }",
      "}",
      "```",
      "",
      "Say we would like to use this format from many other places in our program. I know that our program is very small now,",
      "comprising only from one method. But let's assume that we have a bigger program with many classes and methods. How can",
      "we have a consistent format?",
      "",
      "We can move this print logic into its own method. This method will dictate the message format, freeing the callers from",
      "this responsibility.",
      "",
      "How should we approach this change? That's a very good question. We can make one big move, which will work fine in this",
      "case, or we can do it in small steps. We will use the latter approach.",
      "",
      "Changing any program is not difficult, but keeping the program working after every change is challenging. Every time I",
      "tried to make big changes, I've ended up in rabbit holes and rarely managed to finish what I started. After failing",
      "several times I started digging into this problem and came across an interesting book, titled _The Talent Code:",
      "Greatness Isn't Born. It's Grown. Here's How._, by _Daniel Coyle_. In this book the author describes how skill can be",
      "acquired using small steps, referred to as deep learning. I've tried this approach with refactoring and while it appears",
      "slower, it works.  I will use this approach in all examples in this text.",
      "",
      "Let start by adding a new method, called `printMessage()`, without changing the `main()` method.  We will keep the method signature (the method name and its parameters) very simple for now."
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "e10ec01d-8969-4bfb-bb68-3bc765518511",
    "name": "Create printMessage() method",
    "workingDirectory": "hello-world",
    "parameters": [
      "diff --git a/HelloWorld.java b/HelloWorld.java",
      "index 7cadca9..b2d3131 100755",
      "--- a/HelloWorld.java",
      "+++ b/HelloWorld.java",
      "@@ -2,4 +2,8 @@ public class HelloWorld {",
      "     public static void main(final String[] args) {",
      "         System.out.printf(\"[%tF %<tT] Hello World!!%n\", System.currentTimeMillis());",
      "     }",
      "+",
      "+    private static void printMessage() {",
      "+        System.out.printf(\"[%tF %<tT] Hello World!!%n\", System.currentTimeMillis());",
      "+    }",
      " }",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "d1a80ee1-d7b5-4cec-9563-7185c18616e3",
    "parameters": [
      "In the above example we added four new lines, as indicated by the `ADD`. We created a new method with the following",
      "signature.",
      "",
      "```",
      "private static void printMessage()",
      "```",
      "",
      "Why did use `private` instead of `public` for the `printMessage()`? Methods can have one of four access",
      "modifiers, `public`, `protected`, _package-private_ also referred to as _default_ and, `private`. Public methods are",
      "accessible from anywhere, while private methods can only be accessed from the same",
      "class ([reference](https://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html)). The `main()` method needs",
      "to be public as otherwise this cannot be invoked by the Java runtime environment, when the program is started. When the",
      "program starts, Java code not written by us but part of the Java runtime environment, will call our `main()` method. If",
      "the `main()` method is not public, then our `main()` method cannot be invoked and the program will fail to",
      "start ([reference](https://docs.oracle.com/javase/specs/jls/se17/html/jls-12.html#jls-12.1.4)).",
      "",
      "On the other hand, the `printMessage()` method is invoked from the `main()` method we wrote which is the same class.",
      "When creating new methods, it is recommended to start with the least visible access modifier, that is `private`.",
      "",
      "Why do we start with the least visible access modifier `private`? Private methods can only be accessed from the same",
      "class. This give use the flexibility to change the method without having to worry about breaking any other code",
      "elsewhere. Public methods, on the other hand, can be access from any other class, even in another project. This makes it",
      "harder to change, as other methods may be relying on it. Changing public methods may break code that we are not even",
      "aware of.",
      "",
      "Should we have public methods? Yes. Public methods are as important as without these we will not be able to use code",
      "written by others. Say we want to sort a list of numbers. We can use existing code that does this, such as",
      "the `Arrays.sort()` ([Java doc](https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/Arrays.html#sort(int%5B%5D)))",
      ", that takes an array of integers and sort them. This method, like many others, provide very useful functionality that",
      "helps use build on existing code. In this case, we don't need to know how to sort numbers, as we simply use the `sort()`",
      ", public method. When we make a method public, we understand that changing the method's signature or behaviour may",
      "impact others. The `sort()` method sorts the given array. Say that someone decides to change this method and instead of",
      "sorting the given array, it instead returns a new array, which is sorted without changing the given array. The `sort()`",
      "method will still be sorting the numbers but existing code that were relying on the given array to be sorted, will not",
      "stop working.",
      "",
      "How do we call this method? We have already called methods, maybe without realising. We obtained the current system time",
      "using",
      "the `System.currentTimeMillis()` ([Java doc](https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/System.html#currentTimeMillis()))",
      "method. We can do the same with our new method."
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "275ff36b-2df9-4835-9ce4-5fdc3050ae6f",
    "name": "Use printMessage() method",
    "workingDirectory": "hello-world",
    "parameters": [
      "diff --git a/HelloWorld.java b/HelloWorld.java",
      "index b2d3131..84a1958 100755",
      "--- a/HelloWorld.java",
      "+++ b/HelloWorld.java",
      "@@ -1,6 +1,6 @@",
      " public class HelloWorld {",
      "     public static void main(final String[] args) {",
      "-        System.out.printf(\"[%tF %<tT] Hello World!!%n\", System.currentTimeMillis());",
      "+        printMessage();",
      "     }",
      " ",
      "     private static void printMessage() {",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "72154da6-adb1-4864-8add-d11b51c514f1",
    "parameters": [
      "We now replaced our original print message with a method call to the `printMessage()` method. We can run the program and",
      "achieve the same output. This is a very important concept. The program keeps working as it was before after every",
      "change.",
      "",
      "We can compile it and run it and see the same output."
    ]
  },
  {
    "type": "command",
    "id": "efc2e7f3-854c-431e-a808-30d911c40e1a",
    "name": "Compile the program",
    "workingDirectory": "hello-world",
    "parameters": [
      "javac",
      "HelloWorld.java"
    ]
  },
  {
    "type": "markdown",
    "id": "4f315caa-b5c4-4c10-85e7-e0cb7aa057d2",
    "parameters": [
      "Always remember to compile the class before running it as otherwise you will be running an older version of the code."
    ]
  },
  {
    "type": "command",
    "id": "e80a0497-b038-4f69-a735-fe12fea38d20",
    "name": "Run the new program",
    "workingDirectory": "hello-world",
    "parameters": [
      "java",
      "HelloWorld"
    ]
  },
  {
    "type": "markdown",
    "id": "396db8ef-1930-4e3f-9a9f-711d6b5fc1b7",
    "parameters": [
      "Our `printMessage()` method can only print one message, `\"Hello World!!\"`. We cannot print any message we like, but",
      "only `\"Hello World!!\"`. We need to add parameters so that we can pass the message we want to print as an argument to the",
      "method and print that message.",
      "",
      "What is the difference between _method arguments_ and _method parameters_? While _method arguments_ and _method",
      "parameters_ are very similar and in many cases used interchangeably, there is one important difference between these",
      "two. The _method parameters_ are defined by the method, while the _method arguments_ are the values passed to the",
      "method ([reference](https://developer.mozilla.org/en-US/docs/Glossary/Parameter)).",
      "",
      "Consider the following `println()`",
      "method signature copied from",
      "the `PrintStream` ([Java Doc](https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/PrintStream.html#println(java.lang.String)))",
      "class. We have used this method already, maybe without noticing.",
      "",
      "```",
      "public void println(String x)",
      "```",
      "",
      "The method definition include the parameter (or parameters) that the method accepts. In this case, the `println()` takes",
      "one parameter, of",
      "type `String` ([Java doc](https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/String.html)).",
      "",
      "Now consider the following code fragment that calls this `println()` method, through the standard",
      "output, `System.out` ([Java doc](https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/System.html#out))",
      ".",
      "",
      "```",
      "System.out.println(\"Hello World!!\")",
      "```",
      "",
      "The String value `\"Hello World!!\"` is the argument passed to the method.",
      "",
      "We can introduce a parameter to the `printMessage()` method, as shown next, making it more customisable."
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "6e0cf130-2b23-4d03-8b76-960ccc5c5156",
    "name": "Parameterize method",
    "workingDirectory": "hello-world",
    "parameters": [
      "diff --git a/HelloWorld.java b/HelloWorld.java",
      "index 84a1958..da1e310 100755",
      "--- a/HelloWorld.java",
      "+++ b/HelloWorld.java",
      "@@ -1,9 +1,9 @@",
      " public class HelloWorld {",
      "     public static void main(final String[] args) {",
      "         printMessage();",
      "     }",
      " ",
      "-    private static void printMessage() {",
      "+    private static void printMessage(final String message) {",
      "         System.out.printf(\"[%tF %<tT] Hello World!!%n\", System.currentTimeMillis());",
      "     }",
      " }",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "b385648b-d2f2-47bb-8bbe-5a950de3889a",
    "parameters": [
      "No let us compile the code."
    ]
  },
  {
    "type": "command",
    "id": "11d15494-bf1a-4714-9795-155f1d9dde05",
    "name": "Compile the code",
    "workingDirectory": "hello-world",
    "parameters": [
      "javac",
      "HelloWorld.java"
    ],
    "expectedExitValue": 1
  },
  {
    "type": "markdown",
    "id": "4a78fbce-f41b-4e1e-80fa-b95ea7d15876",
    "parameters": [
      "The compilation failed. That's because there is no `printMessage()` method that takes no arguments, at least not",
      "anymore. This change broke the code. In this case it is not a big deal because the method is private and thus only used",
      "from within this class. Back to what we mentioned before, having the method private reduce the impact area to only this",
      "class, which makes it easier to fix.",
      "",
      "But let's say that we have a large project with many classes and methods, and that this `printMessage()` method is",
      "public and used from many places. Such change will cause many errors and while these can be easily fixed, it will take",
      "time. A small change may cause avalanche of changes, delaying our progress. Now let's make this harder. Let say that",
      "some of the methods calling the `printMessage()` don't have any String to pass to the new `printMethod()`. What should",
      "these methods do?",
      "",
      "There is a better way to address this problem, but before we proceed, lets undo our last change."
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "e3e509a5-ec32-4fd1-b79a-94e61284eded",
    "name": "Undo the changes",
    "workingDirectory": "hello-world",
    "parameters": [
      "diff --git a/HelloWorld.java b/HelloWorld.java",
      "index 84a1958..da1e310 100755",
      "--- a/HelloWorld.java",
      "+++ b/HelloWorld.java",
      "@@ -1,9 +1,9 @@",
      " public class HelloWorld {",
      "     public static void main(final String[] args) {",
      "         printMessage();",
      "     }",
      " ",
      "-    private static void printMessage(final String message) {",
      "+    private static void printMessage() {",
      "         System.out.printf(\"[%tF %<tT] Hello World!!%n\", System.currentTimeMillis());",
      "     }",
      " }",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "1b16680d-d708-481f-9f8d-d4ac0861491c",
    "parameters": [
      "Instead of changing the signature of the existing method we can create another method with the same name, and add the",
      "parameter to the new method.",
      "",
      "Can we have two methods with the same name in the same class? Yes, this is called method",
      "overloading ([reference](https://docs.oracle.com/javase/tutorial/java/javaOO/methods.html)). We can have methods with",
      "the same name as long as these have a different signature, different method parameters."
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "564d693f-9f35-473b-9ba6-78a89f61f57c",
    "name": "Overload the printMessage()",
    "workingDirectory": "hello-world",
    "parameters": [
      "diff --git a/HelloWorld.java b/HelloWorld.java",
      "index 071ca64..4c5e231 100755",
      "--- a/HelloWorld.java",
      "+++ b/HelloWorld.java",
      "@@ -3,7 +3,12 @@ public class HelloWorld {",
      "         printMessage();",
      "     }",
      " ",
      "+    @Deprecated(forRemoval = true)",
      "     private static void printMessage() {",
      "+        printMessage(\"Hello World!!\");",
      "+    }",
      "+",
      "+    private static void printMessage(final String message) {",
      "         System.out.printf(\"[%tF %<tT] Hello World!!%n\", System.currentTimeMillis());",
      "     }",
      " }",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "27129e3e-6034-4872-b569-00dde57c4b28",
    "parameters": [
      "Let us unpack what we just did here. We created a new method, with the same name, `printMessage()`, but with a different",
      "method signature. As we mentioned before, all methods within a class need to have a unique signature, and the method",
      "signature comprise the method name and its parameters.",
      "",
      "In our `HelloWorld` class we have three methods",
      "",
      "- `main(final String[] args)`",
      "- `printMessage()`",
      "- `printMessage(final String message)`",
      "",
      "The first `printMessage()` calls the newly added `printMessage(final String message)` and provides the",
      "string `\"Hello World!!\"` as argument.",
      "",
      "Notice that the callers of the `printMessage()` were unaffected by this change. If this method was called from many",
      "other places, none of these places needed to be changed.  Our code compiles and runs as before."
    ]
  },
  {
    "type": "command",
    "id": "93ef4569-6706-4a0b-b7b1-e10751d967df",
    "name": "Compile the program",
    "workingDirectory": "hello-world",
    "parameters": [
      "javac",
      "HelloWorld.java"
    ]
  },
  {
    "type": "markdown",
    "id": "d882e4a2-f4e6-4481-8c06-78b7651977a2",
    "parameters": [
      "We can also run the program to confirm that it works as expected."
    ]
  },
  {
    "type": "command",
    "id": "5a8d563f-6d92-44f8-9a60-9f445bc0ea2f",
    "name": "Run the program",
    "workingDirectory": "hello-world",
    "parameters": [
      "java",
      "HelloWorld"
    ]
  },
  {
    "type": "markdown",
    "id": "db3315f8-ed78-44f8-9bdb-8bc95c1882c6",
    "parameters": [
      "What is the `@Deprecated(forRemoval = true)` and why is it used? We would like to replace the `printMessage()` method",
      "with one that takes the message to be printed as a parameter, `printMessage(final String message)`. We marked",
      "the `printMessage()` method as deprecated so that other programmers working with us will know that this method will be",
      "deleted in the near future.",
      "",
      "Is there a way to know whether we are using deprecated code? Yes. The Java compiler, `javac`, does that automatically.",
      "When we use deprecated methods, like this one, the Java compiler will print warnings. We didn't see warnings in our case",
      "as the deprecated method is within the same class.",
      "",
      "Let's call the new `printMessage()`, and pass the message we want to print."
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "bcf572fe-db33-4846-b31c-e4563fddbfdd",
    "name": "Invoke the new parameterized method",
    "workingDirectory": "hello-world",
    "parameters": [
      "diff --git a/HelloWorld.java b/HelloWorld.java",
      "index 84a1958..da1e310 100755",
      "--- a/HelloWorld.java",
      "+++ b/HelloWorld.java",
      "@@ -1,5 +1,5 @@",
      " public class HelloWorld {",
      "     public static void main(final String[] args) {",
      "-        printMessage();",
      "+        printMessage(\"Hello World!!\");",
      "     }",
      " ",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "da0cbe34-4066-4226-8719-f820da721bf8",
    "parameters": [
      "The `main()` method now calls the newly created `printMessage()` and pass the argument. The program still compiles and",
      "runs as before.  We can now remove the unused and deprecated `printMessage()` method."
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "45a73c1c-1824-44a8-b382-56faa132789d",
    "name": "Remove the unused method",
    "workingDirectory": "hello-world",
    "parameters": [
      "diff --git a/HelloWorld.java b/HelloWorld.java",
      "index f668252..d429961 100755",
      "--- a/HelloWorld.java",
      "+++ b/HelloWorld.java",
      "@@ -3,11 +3,6 @@ public class HelloWorld {",
      "         printMessage(\"Hello World!!\");",
      "     }",
      " ",
      "-    @Deprecated(forRemoval = true)",
      "-    private static void printMessage() {",
      "-        printMessage(\"Hello World!!\");",
      "-    }",
      "-",
      "     private static void printMessage(final String message) {",
      "         System.out.printf(\"[%tF %<tT] Hello World!!%n\", System.currentTimeMillis());",
      "     }",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "c4f219ef-1d53-45de-9cbc-dae20017c247",
    "parameters": [
      "While out `printMessage()` method accepts arguments, we are not making use of that yet.  Let's change that."
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "ecfce538-d727-4b33-9d7d-3392263f147e",
    "name": "Use method parameter",
    "workingDirectory": "hello-world",
    "parameters": [
      "diff --git a/HelloWorld.java b/HelloWorld.java",
      "index da1e310..c6e7c66 100755",
      "--- a/HelloWorld.java",
      "+++ b/HelloWorld.java",
      "@@ -4,6 +4,6 @@ public class HelloWorld {",
      "     }",
      " ",
      "     private static void printMessage(final String message) {",
      "-        System.out.printf(\"[%tF %<tT] Hello World!!%n\", System.currentTimeMillis());",
      "+        System.out.printf(\"[%tF %<tT] %s%n\", System.currentTimeMillis(), message);",
      "     }",
      " }",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "fb1fb39c-eddf-4f15-ac23-350b1c0c41da",
    "parameters": [
      "We improved our `printMessage()` method through several small steps, without compromising the program. We were able to",
      "stop and run the program after each step.",
      "",
      "Why small and slow steps are better than one quick change? This was a small example, and yes, we could have simply added",
      "the parameter, but in doing so we would break the code and we would not be able to commit our changes. Building the",
      "habit of not breaking the code while making changes is quite important.",
      "",
      "Let's compile it again."
    ]
  },
  {
    "type": "command",
    "id": "5d357889-0057-4f80-9390-00f09d9bb795",
    "name": "Compile source file",
    "workingDirectory": "hello-world",
    "parameters": [
      "javac",
      "HelloWorld.java"
    ]
  },
  {
    "type": "markdown",
    "id": "f1e578d8-e196-409e-b4df-b0bd5336a1ba",
    "parameters": [
      "Let us run the program with our latest changes."
    ]
  },
  {
    "type": "command",
    "id": "d353b078-41cd-4c36-9161-54db39b900dc",
    "name": "Run class",
    "workingDirectory": "hello-world",
    "parameters": [
      "java",
      "HelloWorld"
    ]
  },
  {
    "type": "markdown",
    "id": "514b57c9-6fad-465b-8d80-310b56f8780f",
    "parameters": [
      "The `printMessage()` method is acting as a logger, where we can print messages to the standard output. We should move",
      "this into a class with a better name, a name that indicates its purpose, such as `Log`. Let's create a class and move",
      "the `printMessage()` method into this new class.",
      "",
      "Like before, we will take it slow. Let start by creating the new class and add a duplicate `printMessage()` method",
      "there. Please do not delete or change the existing `printMessage()` method. Remember, we should not break the code while",
      "we are refactoring. "
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "772a417a-482f-47ec-a5f8-c64c7619139d",
    "name": "Create another class",
    "workingDirectory": "hello-world",
    "parameters": [
      "diff --git a/HelloWorld.java b/HelloWorld.java",
      "index f60b138..1c25676 100755",
      "--- a/HelloWorld.java",
      "+++ b/HelloWorld.java",
      "@@ -3,7 +3,14 @@ public class HelloWorld {",
      "         printMessage(\"Hello World!!\");",
      "     }",
      " ",
      "+    @Deprecated(forRemoval = true)",
      "     private static void printMessage(final String message) {",
      "         System.out.printf(\"[%tF %<tT] %s%n\", System.currentTimeMillis(), message);",
      "     }",
      " }",
      "+",
      "+class Log {",
      "+    public static void printMessage(final String message) {",
      "+        System.out.printf(\"[%tF %<tT] %s%n\", System.currentTimeMillis(), message);",
      "+    }",
      "+}",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "756dd377-5c69-4edb-ba61-e8fab258b36e",
    "parameters": [
      "We now have two classes in the same `HelloWorld.java` source file.",
      "",
      "- `public class HelloWorld`",
      "- `class Log`",
      "",
      "Why one class is public while the other one is not? We touched on this before. Classes can either be public or",
      "package-private, also known as default, access modifiers. A source file can have, at most, one public class and the",
      "public class must have the same name as the file. The class `Log` cannot be public because we already have another",
      "public class within this source file."
    ]
  },
  {
    "type": "command",
    "id": "fffaa04c-b973-454c-88e7-08b397fc859f",
    "name": "Compile source file",
    "workingDirectory": "hello-world",
    "parameters": [
      "javac",
      "HelloWorld.java"
    ]
  },
  {
    "type": "markdown",
    "id": "9b95eee7-73fb-4204-b61f-221dca45bbe5",
    "parameters": [
      "When we compile the `HelloWorld.java` source file, we will produce two classes.",
      "",
      "- `HelloWorld.class`",
      "- `Log.class`",
      "",
      "A class file is created for every class we have in the source file."
    ]
  },
  {
    "type": "command",
    "id": "05b2dcf0-d16b-4b58-b535-9658ea98551a",
    "name": "List class files",
    "workingDirectory": "hello-world",
    "parameters": [
      "ls",
      "-l"
    ]
  },
  {
    "type": "markdown",
    "id": "bbb97d75-f018-47aa-8ab8-e559f8ec0df3",
    "parameters": [
      "Let's now call the `printMessage()` method in the `Log` class."
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "dc517400-7912-40ad-8a05-adf7b1b9b530",
    "name": "Use the printMessage() method in the new class",
    "workingDirectory": "hello-world",
    "parameters": [
      "diff --git a/HelloWorld.java b/HelloWorld.java",
      "index 6db9fc4..7f3d567 100755",
      "--- a/HelloWorld.java",
      "+++ b/HelloWorld.java",
      "@@ -1,6 +1,6 @@",
      " public class HelloWorld {",
      "     public static void main(final String[] args) {",
      "-        printMessage(\"Hello World!!\");",
      "+        Log.printMessage(\"Hello World!!\");",
      "     }",
      " ",
      "     @Deprecated(forRemoval = true)",
      "     private static void printMessage(final String message) {",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "c52f16ee-5cd7-44b8-9030-a17dbc303711",
    "parameters": [
      "The `printMessage()` within the `HelloWorld` class is not used anymore and can be safely deleted."
    ]
  },
  {
    "type": "markdown",
    "id": "77082148-a571-4aef-9e42-b661e698533a",
    "parameters": [ ]
  },
  {
    "type": "git-apply-patch",
    "id": "7bfb8284-e289-4c46-8a9e-aff98914f518",
    "name": "Delete the unused printMessage() method",
    "workingDirectory": "hello-world",
    "parameters": [
      "diff --git a/HelloWorld.java b/HelloWorld.java",
      "index 7f3d567..ad98768 100755",
      "--- a/HelloWorld.java",
      "+++ b/HelloWorld.java",
      "@@ -2,11 +2,6 @@ public class HelloWorld {",
      "     public static void main(final String[] args) {",
      "         Log.printMessage(\"Hello World!!\");",
      "     }",
      "-",
      "-    @Deprecated(forRemoval = true)",
      "-    private static void printMessage(final String message) {",
      "-        System.out.printf(\"[%tF %<tT] %s%n\", System.currentTimeMillis(), message);",
      "-    }",
      " }",
      " ",
      " class Log {",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "a81aac09-0a1a-499e-949f-32ffffd063ca",
    "parameters": [
      "Do not leave unused method lying around the code, as this consumes resources without providing anything in return.",
      "",
      "What do you mean by consume resources? Unused code is not executed and thus may not affect the program. But",
      "nevertheless, this code still needs to be understood by whoever is maintaining the code. When the program is packages",
      "and shipped for users to use it, the unused code is packaged with the rest, making the program larger for nothing. When",
      "the program is executed, the unused code maybe loaded into the memory to0, even if this is not executed. In summary,",
      "unused code uses cognitive power, creates larger program, and consumes more memory without give something in return.",
      "",
      "What if we need to use this code in the future? The source version control has our backs. We can use",
      "the `git grep` ([reference](https://git-scm.com/docs/git-grep)) command to search through our repository, including what",
      "was committed and then deleted. Note that we cannot search for things that were never committed.",
      "",
      "```",
      "$ git grep \"printMessage\"",
      "```",
      "",
      "This will open the default command editor, such as _vi_ ([reference](https://en.wikipedia.org/wiki/Vi)) or",
      "_vim_ ([reference](https://en.wikipedia.org/wiki/Vim_(text_editor))), where you can see all matches, as shown below.",
      "",
      "```",
      "HelloWorld.java:        Log.printMessage(\"Hello World!!\");",
      "HelloWorld.java:    public static void printMessage(final String message) {",
      "(END)",
      "```",
      "",
      "Press `q` to close and return back to the command prompt.",
      "",
      "We have moved our `printMessage()` into its own class, `Log` and refactored all the code. Let's commit these changes",
      "before moving to the next section."
    ]
  },
  {
    "type": "git-commit-changes",
    "id": "b27bcd44-c0e8-44ca-bfaf-8a12b8c84fc3",
    "name": "Commit changes",
    "workingDirectory": "hello-world",
    "parameters": [
      "Generalize messages",
      "v3.0.9"
    ]
  },
  {
    "type": "section",
    "id": "7f3748de-35c6-4114-87c7-66420e52c6a4",
    "parameters": [
      "Distribute Application"
    ]
  },
  {
    "type": "markdown",
    "id": "26cf9caa-22a0-42af-940e-e1909b9b65a4",
    "parameters": [
      "Our program is ready to be packages and shipped. Let us start but tagging the code so that we can refer to it should we",
      "need to."
    ]
  },
  {
    "type": "git-tag-current-commit",
    "id": "7f3217d8-8db3-40a4-a4a8-974df073765f",
    "name": "Create starting point",
    "workingDirectory": "hello-world",
    "parameters": [
      "v4.0.0",
      "Start of Distribute Application"
    ]
  },
  {
    "type": "markdown",
    "id": "ec045edc-b8d1-4286-a0ee-fdf0dcc199ac",
    "parameters": [
      "Our program comprise two classes",
      "",
      "- `HelloWorld.class`",
      "- `Log.class`",
      "",
      "If we want to run our program, we need both classes. Let's run an experiment. Let us compile teh program and then delete",
      "one of teh classes and try to run it."
    ]
  },
  {
    "type": "command",
    "id": "4fc50610-27b6-4ed1-92ba-69ab82c98199",
    "name": "Compile program",
    "workingDirectory": "hello-world",
    "parameters": [
      "javac",
      "HelloWorld.java"
    ]
  },
  {
    "type": "markdown",
    "id": "63fdd079-9911-4f58-9bab-bed5fa88271f",
    "parameters": [
      "If we list the files, we will see that we have two classes, the `HelloWorld.class` and the `Log.class`."
    ]
  },
  {
    "type": "command",
    "id": "1ed3cd89-b77e-45fb-b9a9-09b00916868a",
    "name": "List the files",
    "workingDirectory": "hello-world",
    "parameters": [
      "ls",
      "-l"
    ]
  },
  {
    "type": "markdown",
    "id": "a3891fdc-e20e-46f7-b800-ba5433c23788",
    "parameters": [
      "Now, let us delete the `Log.class` class file."
    ]
  },
  {
    "type": "command",
    "id": "759a5fd1-e5c0-41dc-9f15-a3ae20a3b4a8",
    "name": "Delete the Log class",
    "workingDirectory": "hello-world",
    "parameters": [
      "rm",
      "Log.class"
    ]
  },
  {
    "type": "markdown",
    "id": "0afcabc1-02b7-4bdc-bd48-845fda23dee7",
    "parameters": [
      "Let us confirm that the `Log.class` class file was deleted."
    ]
  },
  {
    "type": "command",
    "id": "00e5d918-6e28-420c-83e7-522e669d4c74",
    "name": "List the files within the directory",
    "workingDirectory": "hello-world",
    "parameters": [
      "ls",
      "-l"
    ]
  },
  {
    "type": "markdown",
    "id": "8a8a0179-a8d9-4d46-9e81-c2d5d164a78d",
    "parameters": [
      "Now, with the `Log.class` class file deleted, let's try to run our program."
    ]
  },
  {
    "type": "command",
    "id": "ccbd1a77-bdfb-4602-9252-8a3e65d528b3",
    "name": "Run the program with a missing class",
    "workingDirectory": "hello-world",
    "parameters": [
      "java",
      "HelloWorld"
    ],
    "expectedExitValue": 1
  },
  {
    "type": "markdown",
    "id": "e890580e-7fb0-45b2-9994-34afdb6b3fc7",
    "parameters": [
      "The program does not run. As indicated by the error, we are missing the `Log` class, which was in the `Log.class` file",
      "we deleted. For the program to work, we need all the classes that were used, in our case, both the `HelloWorld`",
      "and `Log` classes, found in their respective class files.",
      "",
      "In our example, we only have two classes. Projects have hundreds, if not thousands of classes. While we can easily share",
      "a handful of files, it gets harder when the number of files gets larger. This is similar to shopping. While we can",
      "easily carry few items in our hands, we will need a bag to carry more items. Java provides a simple way to package all",
      "the classes, and other resources, into a single file called the Java Archive, or JAR file for short."
    ]
  },
  {
    "type": "command",
    "id": "db97a227-2641-4ab9-8fee-0ea9ceafa276",
    "name": "Compile the program",
    "workingDirectory": "hello-world",
    "parameters": [
      "javac",
      "HelloWorld.java"
    ]
  },
  {
    "type": "markdown",
    "id": "836bf33c-a82b-41fa-902f-606f5ec60b89",
    "parameters": [
      "Now that we have both class files, let us package them into a single JAR file."
    ]
  },
  {
    "type": "command",
    "id": "b39c98b3-520b-40a4-bb37-bf823d1b43e1",
    "name": "Create JAR file",
    "workingDirectory": "hello-world",
    "parameters": [
      "jar",
      "cf",
      "hello-world.jar",
      "HelloWorld.class",
      "Log.class"
    ]
  },
  {
    "type": "markdown",
    "id": "155b9c79-281e-4500-8205-640915b29637",
    "parameters": [
      "The `jar` command ([reference](https://docs.oracle.com/en/java/javase/17/docs/specs/man/jar.html)) takes a list of",
      "classes and packages them into a single file, `hello-world.jar`. If we list the files we will see the newly created",
      "file."
    ]
  },
  {
    "type": "command",
    "id": "3f88dc1e-4cdc-4103-9d86-05bf4e3c53b3",
    "name": "List the files",
    "workingDirectory": "hello-world",
    "parameters": [
      "ls",
      "-l"
    ]
  },
  {
    "type": "markdown",
    "id": "902fbc15-9f04-44b8-8910-690caa3e0d75",
    "parameters": [
      "How do we run this? It is very simple, we can use the `java` command similar to what we did before and provide the newly",
      "created JAR file as part of the classpath.",
      "",
      "What's the classpath? Java cannot search the entire file system for our classes, for many reasons. For example, you may",
      "have classes in your laptop that you don't want to run as part of this program. Instead of searching the whole",
      "filesystem, Java uses the classpath to limit the search to only the files that fall within the classpath. The classpath",
      "is nothing but a set of paths, folders, where Java searches for classes or other resources that it might need."
    ]
  },
  {
    "type": "command",
    "id": "254706fb-9f68-4089-be24-88434aabf037",
    "name": "Run JAR file",
    "workingDirectory": "hello-world",
    "parameters": [
      "java",
      "-classpath",
      "hello-world.jar",
      "HelloWorld"
    ]
  },
  {
    "type": "markdown",
    "id": "502ae2e3-5659-49c8-9db2-7f1bc238ae08",
    "parameters": [
      "Using the `-classpath`, or `-cp` for short, to define the classpath. If none are provided, Java will simply use the",
      "current folder as the classpath.",
      "",
      "This approach has one problem. To run our `hello-world.jar` JAR file, we need to know what's inside it. This goes",
      "against the concept of encapsulation ([reference](https://en.wikipedia.org/wiki/Encapsulation_(computer_programming))).",
      "Would it be simpler if we can simply tell Java to run the JAR file? We can configure the JAR file such that it knows how",
      "to run without providing the main class name.",
      "",
      "Java can use `MANIFEST.MF` to determine were to find the main",
      "class ([reference](https://docs.oracle.com/javase/tutorial/deployment/jar/manifestindex.html)). The `MANIFEST.MF` file,",
      "is a text file found within the `META-INF` folder. Let's create the `META-INF` folder, first."
    ]
  },
  {
    "type": "command",
    "id": "9360ae86-2f35-49c8-a4b6-687815d9e91e",
    "name": "Create META-INF directory",
    "workingDirectory": "hello-world",
    "parameters": [
      "mkdir",
      "META-INF"
    ]
  },
  {
    "type": "markdown",
    "id": "326aa0db-198f-432c-bcc5-f3ecaacf00d3",
    "parameters": [
      "Set the main class in the manifest file.  Java will refer to this file and use the main class defined here.Now, lets create the `MANIFEST.MF` file with the following line. We are setting the main class in the manifest file.",
      "Java will refer to this file and use the main class defined here."
    ]
  },
  {
    "type": "create",
    "id": "e0e1304d-4092-4478-be3d-2f6b3150370b",
    "name": "Create Hello World",
    "workingDirectory": "hello-world",
    "parameters": [
      "META-INF/MANIFEST.MF",
      "Main-Class: HelloWorld",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "44259829-c590-444a-bedc-b8c8802c7666",
    "parameters": [
      "Now, when creating the JAR file, we need to specify the manifest file as shown next."
    ]
  },
  {
    "type": "command",
    "id": "11dd4c64-59dc-4757-bef3-51f02f1ef204",
    "name": "Create JAR file",
    "workingDirectory": "hello-world",
    "parameters": [
      "jar",
      "cmf",
      "META-INF/MANIFEST.MF",
      "hello-world.jar",
      "HelloWorld.class",
      "Log.class"
    ]
  },
  {
    "type": "markdown",
    "id": "4e18c3de-e996-436e-a643-b6cb276d649c",
    "parameters": [
      "Notice that we are using `cmf` and not just `cf`, and also we provided the path to the manifest file. Now we are ready",
      "to run this."
    ]
  },
  {
    "type": "markdown",
    "id": "0c0a3028-e97b-4230-ae47-63c34d588531",
    "parameters": [ ]
  },
  {
    "type": "command",
    "id": "4eba4ec9-731e-4bb8-b536-03c5f782f537",
    "name": "Create META-INF directory",
    "workingDirectory": "hello-world",
    "parameters": [
      "java",
      "-jar",
      "hello-world.jar"
    ]
  },
  {
    "type": "markdown",
    "id": "41d259cd-c621-4f3f-b6ca-916423a5ac15",
    "parameters": [
      "Note that instead of providing the classpath, we are now using the `-jar` instead. This is how we can run any Java",
      "program packaged as a Jar file that contains a manifest file. Take for example",
      "the [hello-world-jar-demo.jar](https://github.com/albertattard/programming--hello-world-jar-demo/releases/download/v1.0.0/hello-world-jar-demo.jar)",
      "JAR file. This is a simple Java application which we know nothing about. Let's download it any take it for a spin."
    ]
  },
  {
    "type": "download",
    "id": "3b07c50d-1f63-4f81-985e-a9d92f7fb888",
    "name": "Download demo program",
    "workingDirectory": "hello-world",
    "parameters": [
      "https://github.com/albertattard/programming--hello-world-jar-demo/releases/download/v1.0.0/hello-world-jar-demo.jar",
      "hello-world-jar-demo.jar"
    ]
  },
  {
    "type": "markdown",
    "id": "4a410cbf-8085-46d9-8091-f342a2a3dcfe",
    "parameters": [
      "Now let's run the program."
    ]
  },
  {
    "type": "command",
    "id": "bdbc6dba-9b51-425d-8da3-20eadef731d0",
    "name": "Run the demo Java program",
    "workingDirectory": "hello-world",
    "parameters": [
      "java",
      "-jar",
      "hello-world-jar-demo.jar"
    ]
  },
  {
    "type": "markdown",
    "id": "4891d702-37eb-48a2-84cf-f62da9571052",
    "parameters": [
      "We were able to run the program without knowing what's inside. That's quite an advantage as we can run any Java program",
      "without known the internals of that program.",
      "",
      "We made some progress and we should commit these changes. But before doing so, we must ignore the JAR files. JAR files",
      "are generated artefacts and these do not need to be checked in the repository. Ignore the JAR file from the source",
      "version control."
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "f3ac3c29-8fc3-4eda-a270-123518c4169d",
    "name": "Ignore JAR files",
    "workingDirectory": "hello-world",
    "parameters": [
      "diff --git a/.gitignore b/.gitignore",
      "index daea2ff..5880331 100644",
      "--- a/.gitignore",
      "+++ b/.gitignore",
      "@@ -5,6 +5,7 @@",
      " ",
      " # Ignore Java classes",
      " /*.class",
      "+/*.jar",
      " ",
      " # Ignore Operating System files",
      " **/.DS_Store",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "69f7003d-43fc-4b9a-b638-66b889fbc089",
    "parameters": [
      "We have a program that can be distributed.  Let's commit out changes and create a tag to mark this stage."
    ]
  },
  {
    "type": "git-commit-changes",
    "id": "6fe4cdc5-14cb-4a21-b81a-849eaad14589",
    "name": "Commit changes",
    "workingDirectory": "hello-world",
    "parameters": [
      "Distribute Application",
      "v4.0.2"
    ]
  },
  {
    "type": "markdown",
    "id": "31dbc28d-5ea9-40e6-9d65-f0e96fa59c4e",
    "parameters": [
      "So far we have only used code that comes bundled as part of",
      "the [Java API](https://docs.oracle.com/en/java/javase/17/docs/api/). In many cases we want to use other code that is not",
      "part of the Java API to take advantage of code that already exists. This is the topic of the next section.   "
    ]
  },
  {
    "type": "section",
    "id": "574fbb12-ff4f-44d6-8bfc-0da90775a4a8",
    "parameters": [
      "Third-Party Libraries"
    ]
  },
  {
    "type": "markdown",
    "id": "4dd3c93f-aeb3-4cef-b75b-ce29e7aa98fa",
    "parameters": [
      "We packaged our application into a JAR file, where all our classes and resources, such as the `META-INF/MANIFEST.MF`",
      "file, were grouped into one file. JAR files are the standard unit of distribution where applications, like our hello",
      "world, or libraries, a set of classes that provides useful functionality, are packaged.",
      "",
      "What is the difference between an application and a library? An application is a program that we can run as it has a",
      "starting point, defined by the `main()` method. A library is a collection of classes and other resources that do not",
      "have a starting point and thus cannot be executed. If we try to execute a library, using the `java -jar` approach we did",
      "before, will fail to run.",
      "",
      "Libraries are an important part of the Java echo system, and without them Java would not be so popular as it is today.",
      "For example, our program prints things to the standard output. Instead of using the standard output to print information",
      "about the state of the application, we can use a logger. Loggers are very commonly used and many libraries",
      "emerged.  [Logback](http://logback.qos.ch/) is a common logger library. If we like to use this library, we need to first",
      "obtain the JAR file for this library.",
      "",
      "Where can find the JAR files? A common place where JAR files are published is",
      "the [Maven Central Repository](https://mvnrepository.com/repos/central). This is a place where you can search for",
      "libraries, such as _Logback_, and find how to obtain them."
    ]
  },
  {
    "type": "subsection",
    "id": "492e502a-0ba9-490b-9106-761722f5d8b1",
    "parameters": [
      "Build Application"
    ]
  },
  {
    "type": "markdown",
    "id": "326c22ec-416f-408f-8e73-9841aef1027b",
    "parameters": [
      "Our `printMessage()` method takes a message and then prefix the message with the current time.",
      "",
      "```",
      "class Log {",
      "    public static void printMessage(final String message) {",
      "        System.out.printf(\"[%tF %<tT] %s%n\", System.currentTimeMillis(), message);",
      "    }",
      "}",
      "```",
      "",
      "This method will produce something like the following to the standard output.",
      "",
      "```",
      "[2077-04-27 12:34:56] Hello World!!",
      "```",
      "",
      "We can use loggers for that instead of writing the code ourselves. This is quite important. When creating something so",
      "common, like writing to the standard output, then there is a chance that a library exists that does that.",
      "",
      "Let's start by creating a tag so that we can always revert back to this point in time."
    ]
  },
  {
    "type": "git-tag-current-commit",
    "id": "94656027-282d-4739-baca-246e84067743",
    "name": "Create starting point",
    "workingDirectory": "hello-world",
    "parameters": [
      "v5.0.0",
      "Start of Build Application"
    ]
  },
  {
    "type": "markdown",
    "id": "a9f46d24-f91f-4013-ab1d-f71501cbdf10",
    "parameters": [
      "We will be using JAR files from built and packaged by others. We need to download the files to our laptops and saved",
      "them in a convenient location. We can create save these JARs into a folder named `libs`. The folder name and place it",
      "does not matter as long as we have access to it. For our example, we will be creating the folder `libs` within",
      "the `hello-world` folder."
    ]
  },
  {
    "type": "command",
    "id": "a56d5536-19a0-4eec-b769-974b3d5b6f93",
    "name": "Create the folder when to save the libraries",
    "workingDirectory": "hello-world",
    "parameters": [
      "mkdir",
      "libs"
    ]
  },
  {
    "type": "markdown",
    "id": "7518bc29-19a7-4df2-adef-6d01bb03102a",
    "parameters": [
      "To start we will need to download a JAR file,",
      "the [slf4j-api-1.7.32.jar](https://repo1.maven.org/maven2/org/slf4j/slf4j-api/1.7.32/slf4j-api-1.7.32.jar) JAR file.",
      "Save this JAR file in the `libs` folder.",
      "",
      "We can use the following curl commands to download this JAR files from the Maven central repository."
    ]
  },
  {
    "type": "download",
    "id": "1f221882-4cd3-4398-8720-7a542f241abf",
    "name": "Download slf4j-api-1.7.32.jar",
    "workingDirectory": "hello-world",
    "parameters": [
      "https://repo1.maven.org/maven2/org/slf4j/slf4j-api/1.7.32/slf4j-api-1.7.32.jar",
      "libs/slf4j-api-1.7.32.jar"
    ]
  },
  {
    "type": "markdown",
    "id": "f400f21e-f42a-4eb3-b8b7-21e5c1421afd",
    "parameters": [
      "This JAR file is saved in the `libs` folders. JAR files are not part of our code and they don't need to be included in",
      "our repository. We can simply go ahead and ignore the `libs` folder."
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "82d13587-07a8-4ac3-99fe-050b148203af",
    "name": "Ignore the libraries",
    "workingDirectory": "hello-world",
    "parameters": [
      "diff --git a/.gitignore b/.gitignore",
      "index 5880331..131bd3d 100644",
      "--- a/.gitignore",
      "+++ b/.gitignore",
      "@@ -7,5 +7,8 @@",
      " /*.class",
      " /*.jar",
      " ",
      "+# Ignore third-party libraries",
      "+/libs",
      "+",
      " # Ignore Operating System files",
      " **/.DS_Store",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "cdd5c4f8-35f7-45e0-b2e8-37d837a378c0",
    "parameters": [
      "We will be using logback as our logger, but instead of using logback directly we will use",
      "the [SLF4J](http://www.slf4j.org/) logging wrapper.",
      "",
      "What's going on here? There are many loggers available, such as the [Log4J](https://logging.apache.org/log4j/2.x/),",
      "logback, and the [Java Logging API](https://docs.oracle.com/en/java/javase/17/core/java-logging-overview.html), to name",
      "a few. Say that we use two libraries, _a_ and _b_, and library _a_ uses the Log4J while library _b_ uses the Java",
      "Logging API. How can we consolidate these two libraries into one logger output? We can use a logger wrapper, such as",
      "SLF4J or the [Apache Commons Logging](https://commons.apache.org/proper/commons-logging/). A logger wrapper takes the",
      "logs from different loggers, like Log4J and the Java Logging API, and consolidate the output into one. This is very",
      "important as you don't want to be following multiple log outputs, as that will be very hard. With larger systems, we",
      "take this to another level where all logs by all programs are grouped into one place. This helps whoever is",
      "investigating a problem to have one consolidated view of all logs in one place."
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "202b8a3b-f6c4-49f8-96ed-91f217ff9015",
    "name": "Introduce logger",
    "workingDirectory": "hello-world",
    "parameters": [
      "diff --git a/HelloWorld.java b/HelloWorld.java",
      "index f036603..368183c 100755",
      "--- a/HelloWorld.java",
      "+++ b/HelloWorld.java",
      "@@ -1,4 +1,10 @@",
      "+import org.slf4j.Logger;",
      "+import org.slf4j.LoggerFactory;",
      "+",
      " public class HelloWorld {",
      "+",
      "+    private static final Logger LOGGER = LoggerFactory.getLogger(HelloWorld.class);",
      "+",
      "     public static void main(final String[] args) {",
      "         Log.printMessage(\"Hello World!!\");",
      "     }",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "b18c4fe0-f1e3-4dd1-834f-c5c0c158d7c7",
    "parameters": [
      "What's the `import`? Classes can be organised in packages. In Java, packages are folders where the source files are",
      "found. For simplicity, we have not used packages, as we have only one source file, the `HeeloWorld.java` source file. A",
      "typical program will have hundreds, if not thousands, of source files. It will be hard to find the files we need if we",
      "have them all in one folder, package. This is like organising documents, or other files, in our computer. We don't put",
      "everything in one place. Instead, we organise our files in different folders. For example, the holiday photos are saved",
      "in a folder while the bank documents in another.",
      "",
      "When using classes found in packages, we need to tell Java how to find them. There are two options. We can either import",
      "them as we did here or use the canonical path, as shown next.",
      "",
      "```",
      "public class HelloWorld {",
      "",
      "    private static final org.slf4j.Logger LOGGER = org.slf4j.LoggerFactory.getLogger(HelloWorld.class);",
      "",
      "    public static void main(final String[] args) {",
      "        Log.printMessage(\"Hello World!!\");",
      "    ",
      "```",
      "",
      "In the above example, we referred to the `Logger` and `LoggerFactory`, by their canonical name, `org.slf4j.Logger`",
      "and `org.slf4j.LoggerFactory` respectively.",
      "",
      "The classes, `Logger` and `LoggerFactory` are found in the `org.slf4j` package. This package is part of",
      "the `slf4j-api-1.7.32.jar` JAR file we downloaded.",
      "",
      "How come we didn't import anything when we used `System` or `String` classes? The classes that are found in the",
      "package `java.lang` are automatically imported and we don't have to import them.",
      "",
      "Are there cases where we need to use the canonical name instead of the import? Yes. Say we have two classes with the",
      "same name but in different package and we need to use these two classes in the same class. The import will not work here",
      "as the Java compiler will not be able to tell these apart. Consider the two `Data` classes, part of the Java API. Java",
      "has two `Date` classes found in the following packages",
      "",
      "- [`java.util.Date`](https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/Date.html)",
      "- [`java.sql.Date`](https://docs.oracle.com/en/java/javase/17/docs/api/java.sql/java/sql/Date.html)",
      "",
      "If you like to use these classes together, then you must use canonical name, at least for one of them. The following",
      "code fragment shows an example of using two classes with the same name, `Date`.",
      "",
      "```",
      "java.sql.Data sqlDate = readDateFromDatabase();",
      "java.util.Date utilDate = new java.util.Date(sqlDate.getTime());",
      "```",
      "",
      "The scope of this example is to illustrate a case of when canonical names are required. Note that the `java.util.Date`",
      "class was replaced by a",
      "better [data API](https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/package-summary.html) in ",
      "Java 8.",
      "",
      "Let's compile the code."
    ]
  },
  {
    "type": "command",
    "id": "86286d78-56be-40bf-8d61-a8a121eb8852",
    "name": "Compile program with dependencies",
    "workingDirectory": "hello-world",
    "parameters": [
      "javac",
      "HelloWorld.java"
    ],
    "expectedExitValue": 1
  },
  {
    "type": "markdown",
    "id": "af32c7fb-c106-417c-ba24-ab50c94d74cc",
    "parameters": [
      "The compilation failed, and that's because the compiler needs to have access to the `slf4j-api-1.7.32.jar` JAR file we",
      "downloaded. Similar to before, when we ran our JAR file when it didn't have the `META-INF/MANIFEST.MF` and the main",
      "class set, we need to set the compiler's classpath. We need to include the `slf4j-api-1.7.32.jar` JAR to the compiler's",
      "classpath. All libraries used during the compilation needs to be in the compiler's classpath. We can do this using",
      "the `-cp` option, as shown below."
    ]
  },
  {
    "type": "command",
    "id": "ff2324db-94b4-4e7c-aca8-71d7630b9cef",
    "name": "Compile program with dependencies",
    "workingDirectory": "hello-world",
    "parameters": [
      "javac",
      "-cp",
      "libs/slf4j-api-1.7.32.jar",
      "HelloWorld.java"
    ]
  },
  {
    "type": "markdown",
    "id": "3a5ee91b-9065-457b-af8b-ec048f250401",
    "parameters": [
      "The compilation succeeded."
    ]
  },
  {
    "type": "subsection",
    "id": "2ef57476-de11-480d-81dd-5e2de77a437e",
    "parameters": [
      "Run Application"
    ]
  },
  {
    "type": "markdown",
    "id": "2278ac15-9639-48d7-abd2-d36c3bd56709",
    "parameters": [
      "Run the application using the compile time dependencies"
    ]
  },
  {
    "type": "command",
    "id": "d14e5aae-f227-4e9a-99d5-61f929ebe37f",
    "name": "Run program with the compile time dependencies",
    "workingDirectory": "hello-world",
    "parameters": [
      "java",
      "-cp",
      ".:libs/slf4j-api-1.7.32.jar",
      "HelloWorld"
    ]
  },
  {
    "type": "markdown",
    "id": "d542b7bd-0319-4674-923c-a4f30cb277a7",
    "parameters": [
      "What's the `.` in the `-cp .:libs/slf4j-api-1.7.32.jar` command line option? When running a Java program, by default",
      "Java includes the current folder in the classpath. When we use the `-cp`, Java will not include the current folder and",
      "if we need to refer to classes within the current folder, then we need to include this in the classpath.",
      "",
      "The program works but we got the following warning.",
      "",
      "```",
      "SLF4J: Failed to load class \"org.slf4j.impl.StaticLoggerBinder\".",
      "SLF4J: Defaulting to no-operation (NOP) logger implementation",
      "SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.",
      "```",
      "",
      "So far we added the `slf4j-api-1.7.32.jar` JAR file. We would like to use the logback logger. We need to add the logback",
      "JAR files to our runtime too. Let's download",
      "the [logback-classic-1.2.6.jar](https://repo1.maven.org/maven2/ch/qos/logback/logback-classic/1.2.6/logback-classic-1.2.6.jar)",
      "JAR file from the Maven central repository too."
    ]
  },
  {
    "type": "download",
    "id": "fcceabeb-9b18-49a2-9bdf-24d262bd301e",
    "name": "Download logback-classic-1.2.6.jar",
    "workingDirectory": "hello-world",
    "parameters": [
      "https://repo1.maven.org/maven2/ch/qos/logback/logback-classic/1.2.6/logback-classic-1.2.6.jar",
      "libs/logback-classic-1.2.6.jar"
    ]
  },
  {
    "type": "markdown",
    "id": "fe706a67-d3c6-43ef-a375-a7982be0a7e2",
    "parameters": [
      "Let's include the new JAR file to the classpath and try again."
    ]
  },
  {
    "type": "command",
    "id": "dd0b752d-2f10-4aae-aeb6-751d363bb147",
    "name": "Run program with dependencies",
    "workingDirectory": "hello-world",
    "parameters": [
      "java",
      "-cp",
      ".:libs/slf4j-api-1.7.32.jar:libs/logback-classic-1.2.6.jar",
      "HelloWorld"
    ],
    "expectedExitValue": 1
  },
  {
    "type": "markdown",
    "id": "ee778772-651a-49ea-b83f-626758cae32c",
    "parameters": [
      "Ow!! That's a worse failure. This time the program failed to run.",
      "",
      "```",
      "Failed to instantiate SLF4J LoggerFactory",
      "Reported exception:",
      "java.lang.NoClassDefFoundError: ch/qos/logback/core/joran/spi/JoranException",
      "\tat org.slf4j.LoggerFactory.bind(LoggerFactory.java:150)",
      "\tat org.slf4j.LoggerFactory.performInitialization(LoggerFactory.java:124)",
      "\tat org.slf4j.LoggerFactory.getILoggerFactory(LoggerFactory.java:417)",
      "\tat org.slf4j.LoggerFactory.getLogger(LoggerFactory.java:362)",
      "\tat org.slf4j.LoggerFactory.getLogger(LoggerFactory.java:388)",
      "\tat HelloWorld.<clinit>(HelloWorld.java:6)",
      "Caused by: java.lang.ClassNotFoundException: ch.qos.logback.core.joran.spi.JoranException",
      "\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:636)",
      "\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:182)",
      "\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:519)",
      "\t... 6 more",
      "Exception in thread \"main\" java.lang.NoClassDefFoundError: ch/qos/logback/core/joran/spi/JoranException",
      "\tat org.slf4j.LoggerFactory.bind(LoggerFactory.java:150)",
      "\tat org.slf4j.LoggerFactory.performInitialization(LoggerFactory.java:124)",
      "\tat org.slf4j.LoggerFactory.getILoggerFactory(LoggerFactory.java:417)",
      "\tat org.slf4j.LoggerFactory.getLogger(LoggerFactory.java:362)",
      "\tat org.slf4j.LoggerFactory.getLogger(LoggerFactory.java:388)",
      "\tat HelloWorld.<clinit>(HelloWorld.java:6)",
      "Caused by: java.lang.ClassNotFoundException: ch.qos.logback.core.joran.spi.JoranException",
      "\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:636)",
      "\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:182)",
      "\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:519)",
      "\t... 6 more",
      "```",
      "",
      "It turns out that the `logback-classic-1.2.6.jar` JAR depends on another library, the `logback-core-1.2.6.jar` library.",
      "",
      "That's a nightmare. How can we keep track of what depends on what? Yes. This is a nightmare, but luckily we have a neat",
      "solution. We will cover this in a bit. We started with this approach so that we could appreciate how other tools work.",
      "",
      "How come the program compiles, even when it does not run? When compiling, the Java compiler only needs access to the",
      "classes that our code is using. In our case, our program uses the SLF4J classes, and thus it only requires this JAR",
      "file. The logback `logback-classic-1.2.6.jar` JAR file, depends on classes found in the `logback-core-1.2.6.jar` JAR",
      "file, thus we need to have both.",
      "",
      "Let's downloaded the required JAR",
      "file, [logback-core-1.2.6.jar](https://mvnrepository.com/artifact/ch.qos.logback/logback-core/1.2.6)."
    ]
  },
  {
    "type": "download",
    "id": "5ad00c9d-0c52-4660-9353-8d0ef52df341",
    "name": "Download logback-core-1.2.6.jar",
    "workingDirectory": "hello-world",
    "parameters": [
      "https://repo1.maven.org/maven2/ch/qos/logback/logback-core/1.2.6/logback-core-1.2.6.jar",
      "libs/logback-core-1.2.6.jar"
    ]
  },
  {
    "type": "markdown",
    "id": "cfc571b4-ae45-4b3a-916d-8f07accea80c",
    "parameters": [
      "Run the program with all dependencies"
    ]
  },
  {
    "type": "command",
    "id": "bec254c3-a87c-4c0a-81f3-a0d7a6388780",
    "name": "Run program with dependencies",
    "workingDirectory": "hello-world",
    "parameters": [
      "java",
      "-cp",
      ".:libs/slf4j-api-1.7.32.jar:libs/logback-core-1.2.6.jar:libs/logback-classic-1.2.6.jar",
      "HelloWorld"
    ]
  },
  {
    "type": "markdown",
    "id": "22020892-51ed-4ab3-ac9f-91af29f6446a",
    "parameters": [
      "Hooray!! The program works, but have not yet used the logger. That's the topic for the next section."
    ]
  },
  {
    "type": "subsection",
    "id": "14b2aaa7-9230-4901-8ddf-2b5b9d9ac69d",
    "parameters": [
      "Use Logger"
    ]
  },
  {
    "type": "markdown",
    "id": "6c5600eb-3221-4a0f-bde1-2b4227377689",
    "parameters": [
      "Let's replace the printing to the standard output with the logger."
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "2e21414d-bf77-4ede-89d2-942380eb2b56",
    "name": "Use logger",
    "workingDirectory": "hello-world",
    "parameters": [
      "diff --git a/HelloWorld.java b/HelloWorld.java",
      "index 368183c..96cc5bc 100755",
      "--- a/HelloWorld.java",
      "+++ b/HelloWorld.java",
      "@@ -6,12 +6,6 @@ public class HelloWorld {",
      "     private static final Logger LOGGER = LoggerFactory.getLogger(HelloWorld.class);",
      " ",
      "     public static void main(final String[] args) {",
      "-        Log.printMessage(\"Hello World!!\");",
      "+        LOGGER.debug(\"Hello World!!\");",
      "     }",
      " }",
      "-",
      "-class Log {",
      "-    public static void printMessage(final String message) {",
      "-        System.out.printf(\"[%tF %<tT] %s%n\", System.currentTimeMillis(), message);",
      "-    }",
      "-}",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "a701ea35-20ed-45e3-a46c-f9378e4682e3",
    "parameters": [
      "We replaced the `Log` class and its `printMessage()` method with the logger.",
      "",
      "Should we do this in one go? Depends. When changing the code, make sure that the code always compile. If this method was",
      "used by many other methods throughout the code, then we should do it slowly. We should mark the method deprecated and",
      "marked for removal and make the changing slowly.",
      "",
      "Let's take our code for a spin."
    ]
  },
  {
    "type": "command",
    "id": "60466408-0de0-485e-a64c-5079d15c6b32",
    "name": "Run program with dependencies",
    "workingDirectory": "hello-world",
    "parameters": [
      "java",
      "-classpath",
      ".:libs/slf4j-api-1.7.32.jar:libs/logback-core-1.2.6.jar:libs/logback-classic-1.2.6.jar",
      "HelloWorld"
    ]
  },
  {
    "type": "markdown",
    "id": "3113b97a-1f82-4094-9a6b-374e49a8c56b",
    "parameters": [
      "How come nothing changed with our code's output? We are still running the old version of the code as we have not",
      "compiled. We need to compile our code before running it. The IDE usually take care of these things for us, but we are",
      "going through each step so that we understand what's happening under the hood."
    ]
  },
  {
    "type": "command",
    "id": "03a96a79-ad23-4ca7-a3cb-952620f025c8",
    "name": "Compile program with dependencies",
    "workingDirectory": "hello-world",
    "parameters": [
      "javac",
      "-classpath",
      "libs/slf4j-api-1.7.32.jar",
      "HelloWorld.java"
    ]
  },
  {
    "type": "markdown",
    "id": "6aeda166-dea1-4ee2-867c-08b458456047",
    "parameters": [
      "Run the new changes"
    ]
  },
  {
    "type": "command",
    "id": "352cf333-a80f-473d-a0b3-a7e57b631e3d",
    "name": "Run program with dependencies",
    "workingDirectory": "hello-world",
    "parameters": [
      "java",
      "-classpath",
      ".:libs/slf4j-api-1.7.32.jar:libs/logback-core-1.2.6.jar:libs/logback-classic-1.2.6.jar",
      "HelloWorld"
    ]
  },
  {
    "type": "markdown",
    "id": "23589131-89fc-46b2-bcdc-8ad00702a04f",
    "parameters": [
      "The output produced by the logger is slightly different from the one produced by the original `printMessage()` and",
      "String formatting.",
      "",
      "```",
      "12:34:56.789 [main] DEBUG HelloWorld - Hello World!!",
      "```",
      "",
      "- `12:34:56.789`: The time when the message was printed",
      "- `[main]`: The thread from where this was printed. We have not yet talked about threads. Threads can be seen as",
      "  employees at an office, and like employees, the threads have names. The thread that starts the Java application is",
      "  called the `main` thread.  **TODO** Should we add a reference or a link to better understand threads as these are out",
      "  of scope?",
      "- `DEBUG`: The log level, which helps us understand the severity of this message. For example, errors are more important",
      "  than simple messages like this one and are logger with the `ERROR` level. This can be used by tools to then filter",
      "  messages by log level.",
      "",
      "  ```",
      "  LOGGER.trace(\"Less important information\");",
      "  LOGGER.error(\"Very important information\");",
      "  ```",
      "",
      "- `HelloWorld`: The name of the logger user. While this is usually the class name, that is purely driven by the",
      "  parameter given to the `getLogger()` method, shown below.",
      "",
      "  ```",
      "  private static final Logger LOGGER = LoggerFactory.getLogger(HelloWorld.class);",
      "  ```",
      "",
      "- `Hello World!!`: The message that was passed to the logger",
      "",
      "  ```",
      "  LOGGER.debug(\"Hello World!!\");",
      "  ```",
      "  ",
      "We made lots of progress and it is time to mark our progress."
    ]
  },
  {
    "type": "git-commit-changes",
    "id": "fb1ebad3-d1d2-47f3-a867-c18097e736b9",
    "name": "Commit changes",
    "workingDirectory": "hello-world",
    "parameters": [
      "Use Logger",
      "v5.1.4"
    ]
  },
  {
    "type": "markdown",
    "id": "c9bb14a3-d598-433e-99da-683d2a610bf9",
    "parameters": [
      "We made use of three libraries in our code. We had to manage these manually and talked about the pain of managing this.",
      "There is a better way to manage libraries, without having to know what requires what. That's the topic of the next",
      "section."
    ]
  },
  {
    "type": "section",
    "id": "6fe3aced-f03e-4fc3-b5ce-b027f584599f",
    "parameters": [
      "Build Tools"
    ]
  },
  {
    "type": "markdown",
    "id": "5530043e-2a3c-4d0d-bd5f-1f05aad421b8",
    "parameters": [
      "So far we built our program manually. While we easily managed to compile one class using few dependencies, it will get",
      "harder once we add more and more classes. A better alternative is to use build tools. There are several build tools,",
      "such as [make](https://www.gnu.org/software/make/) and [ant](https://ant.apache.org/),",
      "but [Maven](https://maven.apache.org/)",
      "and [Gradle](https://gradle.org/) are the most popular with Java based projects according to",
      "[Google trends](https://trends.google.com/trends/explore?q=%2Fm%2F04tj5z,%2Fm%2F080c0g9,%2Fm%2F028m4s,%2Fg%2F121sw_0p,%2Fm%2F0cxh7f),",
      "shown next.",
      "",
      "![Build Tool Popularity Google Trends](https://i.ibb.co/VTGMWdb/Build-Tool-Popularity-Google-Trends.png)",
      "",
      "Other programming languages have similar tools, such as",
      "",
      "- [NPM](https://www.npmjs.com/) used with [Javascript](https://developer.mozilla.org/en-US/docs/Web/JavaScript)",
      "- [Cargo](https://doc.rust-lang.org/cargo/) used with [Rust](https://www.rust-lang.org/)",
      "",
      "Should we always use build tools, like Maven and Gradle when writing programs? Yes. While we can build our programs",
      "without using build tools, these simplify our lives a lot. The build tools server many purposes, such as dependency",
      "management. Do you remember when we wanted to use logback and slf4j in our program? We had to manually locate and",
      "download these JAR files manually and add them to the classpath. The build tools can take care of this for us. We",
      "simplify list what we want and the build tools do the rest. So irrelevant from the size of the project, a build tool is",
      "always a helping hand.",
      "",
      "What is Maven? Maven is one of the first build tools available for Java. It was released in July 13th",
      "2004 ([reference](https://maven.apache.org/docs/history.html)), and uses a special xml file, named _pom.xml_, to",
      "configure the project and its dependencies. Maven is a Java program installed on the laptop and can be used to build",
      "other Java programs. Instead of using the Java compiler, `javac`, to compile the project, Maven can be used instead.",
      "Maven reads the _pom.xml_ file and downloads the dependencies, compiles the code, runs the tests, and finally packages",
      "our application into a JAR file, similar to those that we downloaded, and much more.",
      "",
      "What is Gradle? Gradle is very similar to Maven. Gradle was released several years after Maven, in June 12th 2012. It",
      "learnt from Maven's shortcomings and has better performance ([reference](https://gradle.org/maven-vs-gradle/)). Like",
      "Maven, Gradle is a Java program install on the laptop and can be used to compile the code, run the tests and package the",
      "application amongst other things. Different from Maven, it uses a Groovy file named _build.gradle_ which is more",
      "concise.",
      "",
      "Do we need to have Java installed to run Maven and Gradle? Yes. Both Maven and Gradle are Java programs and thus",
      "required Java. Both require Java 8 or above.",
      "",
      "Do we need to use the same version of Java for Maven or Gradle and the program? No. We can use one version of Java to",
      "run Maven or Gradle and then have these to use a different version of Java to compile our project. For example, we can",
      "run Gradle with Java 8, and then have it using Java 17 to compile our project. This has become quite easy with the newer",
      "releases of Gradle ([reference](https://docs.gradle.org/current/userguide/toolchains.html)). Same applies to",
      "Maven ([reference](https://maven.apache.org/guides/mini/guide-using-toolchains.html)).",
      "",
      "Which one should we use? I work with both, but I prefer Gradle to Maven for the following two reasons",
      "",
      "- Gradle is faster than Maven ([reference](https://gradle.org/maven-vs-gradle/))",
      "- Groovy provides concise configuration, when compared to XML"
    ]
  },
  {
    "type": "subsection",
    "id": "25a1d4a6-a28a-41f4-8743-d2445f52d587",
    "parameters": [
      "Add Gradle to Project"
    ]
  },
  {
    "type": "markdown",
    "id": "77182b50-1cbd-44c4-988e-4fe7365257a9",
    "parameters": [
      "We will be using Gradle.  Let start by cleaning our project from unnecessary files.",
      "",
      "As we did before, let's tag the state of our project so that we can easily refer back to this point in time."
    ]
  },
  {
    "type": "git-tag-current-commit",
    "id": "81a19e83-c35b-4fa3-8858-e1bc2d8bf19e",
    "name": "Create starting point",
    "workingDirectory": "hello-world",
    "parameters": [
      "v6.0.0",
      "Start of Add Gradle to Project"
    ]
  },
  {
    "type": "markdown",
    "id": "d21386df-3686-4191-a944-d44eb212182f",
    "parameters": [
      "We have classes, JAR file and other things that we don't need.  Let's start by deleting them."
    ]
  },
  {
    "type": "command",
    "id": "5c10e90e-b6ae-4b90-959d-401ec9925f66",
    "name": "Delete unnecessary files",
    "workingDirectory": "hello-world",
    "parameters": [
      "rm",
      "-rf",
      "libs",
      "META-INF",
      "hello-world.jar",
      "hello-world-jar-demo.jar",
      "HelloWorld.class",
      "Log.class"
    ]
  },
  {
    "type": "markdown",
    "id": "602d70c7-6d7f-4f70-b3e7-4df72acf1a68",
    "parameters": [
      "We should have one folder and two files as shown next. Note that the `.git` folder and the `.gitignore` file are hidden",
      "files and may not be visible. That's why we used the `-a` option with the `ls`",
      "command ([reference](https://man7.org/linux/man-pages/man1/ls.1p.html))."
    ]
  },
  {
    "type": "command",
    "id": "89562da8-5cf8-4063-8171-ca8b2019c8dc",
    "name": "List files",
    "workingDirectory": "hello-world",
    "parameters": [
      "ls",
      "-la"
    ]
  },
  {
    "type": "markdown",
    "id": "361272e7-7eee-4984-9b4e-724ce27bb41c",
    "parameters": [
      "Let's cleanup the `.gitignore` file by removing the extensions that are not required anymore. As we will see, Gradle",
      "stores the classes and JAR files under a folder named _build_ and we will just ignore this folder."
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "45742b31-223d-4446-84d0-261763e2c734",
    "name": "Add application plugin",
    "workingDirectory": "hello-world",
    "parameters": [
      "diff --git a/.gitignore b/.gitignore",
      "index 131bd3d..a5b31a9 100644",
      "--- a/.gitignore",
      "+++ b/.gitignore",
      "@@ -3,12 +3,5 @@",
      " /out",
      " /*.iml",
      " ",
      "-# Ignore Java classes",
      "-/*.class",
      "-/*.jar",
      "-",
      "-# Ignore third-party libraries",
      "-/libs",
      "-",
      " # Ignore Operating System files",
      " **/.DS_Store",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "3ab1e795-ae68-4fa3-8a13-7cc6193ca7df",
    "parameters": [
      "We need to install Gradle, if that's not already installed. Let's check whether Gradle is installed by running the",
      "following command.",
      "",
      "```",
      "hello-world $ gradle -v",
      "```",
      "",
      "If Gradle is not installed, you will get something like the following.",
      "",
      "```",
      "bash: gradle: command not found",
      "```",
      "",
      "Please follow the installation instructions [here](https://gradle.org/install/). The simplest way to install Gradle on a",
      "macOS, is through SDKMAN, the same package installer used to install Java.",
      "",
      "```",
      "$ sdk install gradle 7.2",
      "```",
      "",
      "Verify that Gradle was installed properly by relieving the version, again.",
      ""
    ]
  },
  {
    "type": "command",
    "id": "81764936-8304-4bb8-b73b-21e3a5c6aedf",
    "name": "Check is Gradle is installed",
    "workingDirectory": "hello-world",
    "parameters": [
      "gradle",
      "-v"
    ]
  },
  {
    "type": "markdown",
    "id": "8888a8bf-63a8-4fef-9b53-661ab7249e52",
    "parameters": [
      "The above command should print the version of Gradle installed, similar to the following",
      "",
      "```",
      "------------------------------------------------------------",
      "Gradle 7.2",
      "------------------------------------------------------------",
      "",
      "Build time:   2021-08-17 09:59:03 UTC",
      "Revision:     a773786b58bb28710e3dc96c4d1a7063628952ad",
      "",
      "Kotlin:       1.5.21",
      "Groovy:       3.0.8",
      "Ant:          Apache Ant(TM) version 1.10.9 compiled on September 27 2020",
      "JVM:          17 (Oracle Corporation 17+35-LTS-2724)",
      "OS:           Mac OS X 11.6 x86_64",
      "```",
      "",
      "**Please make sure to have Gradle 7.2 installed** as earlier versions of Gradle do not support Java 17. Please refer to",
      "the [compatibility matrix](https://docs.gradle.org/current/userguide/compatibility.html) for more information about",
      "which versions of Gradle supports the required version of Java. The rest of this text assumes that Gradle 7.2 is",
      "installed.",
      "",
      "Let's convert our project into a Gradle project. Note that we can convert any project to a Gradle project even if this",
      "was already created and has code, like our `hello-world` project.",
      "",
      "Let's take note of the current files so that we can easily compare."
    ]
  },
  {
    "type": "command",
    "id": "975717b3-7e94-4c4e-8d8c-6bfad27efda0",
    "name": "List the files before initialising Gradle",
    "workingDirectory": "hello-world",
    "parameters": [
      "ls",
      "-la"
    ]
  },
  {
    "type": "markdown",
    "id": "02d1189a-83c3-4992-8238-c1cdb56eb823",
    "parameters": [
      "We have one folder and two files so far, listed below.",
      "",
      "- `.git`",
      "- `.gitignore`",
      "- `HelloWorld.java`",
      "",
      "Let's add Gradle to this project."
    ]
  },
  {
    "type": "command",
    "id": "81f2ca4c-2f73-4edc-b691-c512e9b34046",
    "name": "Initialize gradle project",
    "workingDirectory": "hello-world",
    "parameters": [
      "gradle",
      "init",
      "--type",
      "basic",
      "--dsl",
      "groovy",
      "--project-name",
      "hello-world"
    ]
  },
  {
    "type": "markdown",
    "id": "6b2ed229-bff9-4f34-88b3-d347c8b5216a",
    "parameters": [
      "Before diffing into what's happened let's understand the `gradle init` command. The `gradle init` command is an",
      "interactive command where you can make choices, such as the type and name of project, amongst other things. Given that",
      "we are running in a non-interactive mode, we provided all options in the form of command line arguments.",
      "",
      "- `--type basic`: The simplest Gradle project. Alternatively, we can make use of multi-project option where we have",
      "  several projects under one Gradle",
      "  project ([reference](https://docs.gradle.org/current/userguide/multi_project_builds.html)). While this can be useful",
      "  in more complex projects, it is an overkill for our case, and thus we opted for the basic option.",
      "- `--dsl groovy`: Gradle equally supports two languages, Groovy and Kotlin. This is just a personal preference.",
      "- `--project-name`: The name of the project",
      "",
      "As already mentioned, we can select these options manually instead of providing them via the command line.",
      "",
      "The above command creates several files and folders, as shown next"
    ]
  },
  {
    "type": "command",
    "id": "f09e637c-d041-4958-9cd3-fed6ba00948e",
    "name": "List the file created by gralde",
    "workingDirectory": "hello-world",
    "parameters": [
      "ls",
      "-la"
    ]
  },
  {
    "type": "markdown",
    "id": "67aceb10-9a34-4bdb-a74d-8b2455cf1b43",
    "parameters": [
      "Many files were added to the project. Let's see what these are before moving one. While we don't need to have a deep",
      "understanding of Gradle to proceed, it is always good to understand what's happening to the project and why something is",
      "there.",
      "",
      "- `.gitattributes`: Used to configure the new-line character for Windows related",
      "  files ([reference](https://git-scm.com/docs/gitattributes)). In short, different operating systems use different new",
      "  line characters ([reference](https://en.wikipedia.org/wiki/Newline)) and we need to tell Git how to interpret these as",
      "  otherwise Git may compromise these files.",
      "- `.gradle`: Gradle uses this directory as a project specific cache",
      "- `build.gradle`: The Gradle build script. This is the file that we need to change to add dependencies or instruct",
      "  Gradle to do specific things.",
      "- `gradle`: Contains the [Gradle Wrapper](https://docs.gradle.org/current/userguide/gradle_wrapper.html#gradle_wrapper).",
      "  Gradle can be included together with the project. This will remove the need of having Gradle installed. But more",
      "  importantly, this makes sure that everyone who is working on the project will make use of the same version of Gradle",
      "  as the wrapper is used.",
      "- `gradlew`: A script used by the Mac/Linux users to run the Gradle Wrapper",
      "- `gradlew.bat`: A script used by the Windows users to run the Gradle Wrapper",
      "- `settings.gradle`: The project specific settings, such as the project name",
      "",
      "If we are going to use the Gradle Wrapper, why do we need to install Gradle? When working on an existing project, you",
      "don't require to have Gradle installed globally as you will use the Gradle Wrapper that is part of the project. We used",
      "the globally installed Gradle to create the gradle project. The Gradle wrapper did not exist before as it was added by",
      "the global Gradle when the project was created.",
      "",
      "More information about the Gradle folder layout can be",
      "found [here](https://docs.gradle.org/current/userguide/directory_layout.html#dir:project_root).",
      "",
      "Gradle has a particular way of how the files in the project are organised, which was inherited from Maven. Gradle",
      "expects the source files, like our `HelloWorld.java` file, to be found within a specific subfolder, the `src/main/java`.",
      "While this can be customised, it is recommended to use the defaults as these are well known amongst other programmers.",
      "",
      "Let's create the `src/main/java`"
    ]
  },
  {
    "type": "command",
    "id": "e830abd3-2fb1-4a2b-84d2-d2361649ca5c",
    "name": "Create source directory",
    "workingDirectory": "hello-world",
    "parameters": [
      "mkdir",
      "-p",
      "src/main/java"
    ]
  },
  {
    "type": "markdown",
    "id": "8ac54896-578e-4a4e-8bbd-bbef14978f66",
    "parameters": [
      "The folders where Gradle looks for source files are referred to",
      "as [SourceSet](https://docs.gradle.org/current/dsl/org.gradle.api.tasks.SourceSet.html). The `src` folder is the top",
      "source folder while the `main` subfolder represents the production code. Test code, for example, will go in the `test`",
      "folder and not `main`. This is quite useful as Gradle will only use the source files found within the `main` subfolder",
      "to create the JAR file.",
      "",
      "Gradle uses another level to separate different files. While there is no hard and fast rule, we put the Java source",
      "files under the `java` subfolder, and any configuration like property files, will go under a different",
      "folder, `resources`. Following is a typical folder structure found in a Gradle project.",
      "",
      "```",
      "├── ⋮",
      "├── src",
      "│   ├── main",
      "│   │   ├── java",
      "│   │   └── resources",
      "│   └── test",
      "│       ├── java",
      "│       └── resources",
      "└── ⋮",
      "```",
      "",
      "Our project is very small and only contains one source file for the time being, the `HelloWorld.java`.",
      "The `HelloWorld.java` is not yet within the `src/main/java` folder. Let's move it to this place.",
      "",
      "Do not use the operating system move command, `mv`. Use the Git `mv`",
      "command ([reference](https://git-scm.com/docs/git-mv)) instead so that Git can keep track of this move."
    ]
  },
  {
    "type": "command",
    "id": "ac8e843c-0b10-4372-aece-f9ca16f4795b",
    "name": "Move source file to source directory",
    "workingDirectory": "hello-world",
    "parameters": [
      "git",
      "mv",
      "HelloWorld.java",
      "src/main/java/HelloWorld.java"
    ]
  },
  {
    "type": "markdown",
    "id": "51ac8396-2161-4fd9-937e-aee72132ca7f",
    "parameters": [
      "Now that we are all set, let's take Gradle for a spin.",
      "",
      "We have a fresh Gradle project that knows nothing about our project yet. We have not configured it and thus Gradle has",
      "limited abilities.  Let see what Gradle can do for us, by running the following command."
    ]
  },
  {
    "type": "command",
    "id": "4bbfadbe-0cb2-4929-bad2-3e91346593db",
    "name": "List gradle tasks",
    "workingDirectory": "hello-world",
    "parameters": [
      "./gradlew",
      "tasks"
    ]
  },
  {
    "type": "markdown",
    "id": "8d51cacc-da32-44c9-a2e4-989f43069c81",
    "parameters": [
      "Why did we use the `gradlew` and not `gradle` as we did before when we created the Gradle project? The `gradle` command",
      "is the global Gradle while the `gradlew` is the Gradle wrapper. Moving on, we will only use the Gradle wrapper. This",
      "ensures that we are working with the same Gradle. Different versions of Gradle have different features and using the",
      "wrapper we make sure that we are all using the same features.",
      "",
      "What would happen if we use the global Gradle instead? If the global Gradle is compatible with what we are expecting to",
      "do, then both the Gradle wrapper and the global Gradle will produce the same thing. We can try it out."
    ]
  },
  {
    "type": "command",
    "id": "68e406f5-5b6a-4ece-aafd-0e579fc21ebc",
    "workingDirectory": "hello-world",
    "parameters": [
      "gradle",
      "task"
    ]
  },
  {
    "type": "markdown",
    "id": "a3aa7440-033f-40fa-9ef2-5a34e1ebd746",
    "parameters": [
      "Why was Gradle downloaded again? The Gradle wrapper is a simple Java program that is used to download the configured",
      "version of Gradle.  If we look inside the `gradle/wrapper` folder we will find two files."
    ]
  },
  {
    "type": "command",
    "id": "c278495d-92ff-4235-8afa-ea96fc470f3c",
    "workingDirectory": "hello-world",
    "parameters": [
      "ls",
      "-l",
      "gradle"
    ]
  },
  {
    "type": "markdown",
    "id": "05d34fe8-1980-4ffa-9fa2-149b0d2156be",
    "parameters": [
      "The `gralde` folder contains another folder named `wrapper`. Instead of using the `ls` command we can use the `tree`",
      "command ([wiki](https://en.wikipedia.org/wiki/Tree_(command))). Note that the `tree` command is not automatically",
      "installed on the macOS, but can be easily installed using homebrew ([formula](https://formulae.brew.sh/formula/tree)).",
      "",
      "```",
      "$ brew install tree",
      "```",
      "",
      "Let's see the contents of the `gradle` folder using the `tree` command."
    ]
  },
  {
    "type": "command",
    "id": "f7b86c18-792c-487a-8660-4e81b68830b3",
    "name": "List the contents under the gradle folder",
    "workingDirectory": "hello-world",
    "parameters": [
      "tree",
      "gradle"
    ]
  },
  {
    "type": "markdown",
    "id": "4af627f5-b926-4ba7-bd2d-06610841dff9",
    "parameters": [
      "The `gradle/wrapper` folder contains two files.",
      "",
      "```",
      "├── ⋮",
      "├── gradle",
      "│   └── wrapper",
      "│       ├── gradle-wrapper.jar",
      "│       └── gradle-wrapper.properties",
      "└── ⋮",
      "```",
      "",
      "The `gradle-wrapper.jar` file is used to download the version of Gradle used by this project as defined by",
      "the `gradle-wrapper.properties` file."
    ]
  },
  {
    "type": "command",
    "id": "5bf33a52-3661-4bdc-8b82-d6eadd5c45ce",
    "name": "View the contents of the gradle-wrapper.properties file",
    "workingDirectory": "hello-world",
    "parameters": [
      "cat",
      "gradle/wrapper/gradle-wrapper.properties"
    ]
  },
  {
    "type": "markdown",
    "id": "fdd916d7-3bd2-4cc2-a780-82019fb2d216",
    "parameters": [
      "This `gradle-wrapper.properties` file contains several properties, one of which is the place from where we are",
      "downloading Gradle.",
      "",
      "```",
      "distributionUrl=https\\://services.gradle.org/distributions/gradle-7.2-bin.zip",
      "```",
      "",
      "The Gradle wrapper will download Gradle 7.2 if this specific version does not exist. Next time we run the Gradle",
      "wrapper, the Gradle wrapper will not download Gradle once more.",
      "",
      "Please note that version of Gradle earlier than 7.2 do not support Java 17, as described in",
      "the [compatibility matrix](https://docs.gradle.org/current/userguide/compatibility.html)."
    ]
  },
  {
    "type": "markdown",
    "id": "826b228a-2045-4892-91c5-f01b09bbd159",
    "parameters": [
      "Where is Gradle downloaded? The Gradle wrapper downloads Gradle into the `.gradle` cache folder. We can see the contents",
      "of the `.gradle` using the `tree` command as shown next."
    ]
  },
  {
    "type": "command",
    "id": "4579b975-95bd-4a0e-a5fe-3ed98fa1e376",
    "name": "List the contents of the .gradle folder",
    "workingDirectory": "hello-world",
    "parameters": [
      "tree",
      ".gradle"
    ]
  },
  {
    "type": "markdown",
    "id": "8bec9bf7-b0ff-4566-b107-8bcf4b18b82a",
    "parameters": [
      "Under the `.gradle`, we will find a subfolder with the downloaded versions of Gradle, `7.2` in our case.",
      "",
      "```",
      "├── ⋮",
      "├── .gradle",
      "│   ├── 7.2",
      "│   └── ⋮",
      "└── ⋮",
      "```",
      "",
      "What is the difference between the `gradle` and `.gradle` folders? The `.gradle` folder acts as a cache and can be",
      "deleted anytime. The Gradle wrapper will recreate it and downloads the configured version of Gradle. The `gradle` folder",
      "contain the Gradle wrapper. It is important to note that the `.gradle` will not be part of our version control, while",
      "the `gradle` folder is.",
      "",
      "Let's run our program using Gradle."
    ]
  },
  {
    "type": "command",
    "id": "fbf1e3bd-2573-47a4-817f-b82ac0210fac",
    "name": "Run the project",
    "workingDirectory": "hello-world",
    "parameters": [
      "./gradlew",
      "run"
    ],
    "expectedExitValue": 1
  },
  {
    "type": "markdown",
    "id": "3676830b-2e5a-4d5e-ac40-f8658055a082",
    "parameters": [
      "Gradle failed to run the project because we have not yet configured it. If we look at the `build.gradle` file, we will",
      "find that it only contains comments."
    ]
  },
  {
    "type": "command",
    "id": "b3a88ac9-ca73-4055-9c36-d76c60ef7b24",
    "name": "View the build.gradle file",
    "workingDirectory": "hello-world",
    "parameters": [
      "cat",
      "build.gradle"
    ]
  },
  {
    "type": "markdown",
    "id": "8d15cdc5-6d2f-4eb5-88be-ba7cb6f0b47e",
    "parameters": [
      "The `build.gradle` file contains only comments.  Let's clear these comments and add the _application_ plugin."
    ]
  },
  {
    "type": "replace",
    "id": "ff00acef-231c-4e0a-b5ca-61a99f235cbf",
    "name": "Add the Gradle plugins",
    "workingDirectory": "hello-world",
    "parameters": [
      "build.gradle",
      "plugins {",
      "    id \"application\"",
      "}",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "aea15ce2-42c4-45f5-979f-cfe416d4337a",
    "parameters": [
      "Gradle starts with limited abilities. Gradle was not able to run our Java application. Using plugins we can add",
      "abilities to Gradle. The `application`plugin enables Gradle to build and run our Java",
      "project ([reference](https://docs.gradle.org/current/userguide/application_plugin.html)).",
      "",
      "Let's try to run it again."
    ]
  },
  {
    "type": "command",
    "id": "ef7f0ac8-b279-47f8-8a0f-255b03344111",
    "name": "Run the application",
    "workingDirectory": "hello-world",
    "parameters": [
      "./gradlew",
      "run"
    ],
    "expectedExitValue": 1
  },
  {
    "type": "markdown",
    "id": "d11c6de3-119f-4e73-b7fd-eb46742b8a86",
    "parameters": [
      "Our application failed to run, but this time due to a different problem.  We will come back to these problems in a bit.",
      "",
      "Let's see what other tasks we now have, after adding the `application` plugin."
    ]
  },
  {
    "type": "command",
    "id": "653b86cc-8062-4e51-959e-fbd200e9de3a",
    "name": "List gradle tasks",
    "workingDirectory": "hello-world",
    "parameters": [
      "./gradlew",
      "tasks"
    ]
  },
  {
    "type": "markdown",
    "id": "4b239d0f-45ec-43f8-b044-196783da57ac",
    "parameters": [
      "The `application` plugin added many tasks related to the development of a Java application, such as `run` and `test`. We",
      "can run one or more tasks using the following format",
      "",
      "```",
      "$ ./gradlew <task-1> <task-2> ... <task-n>",
      "```",
      "",
      "We have agreed to use Java 17. Gradle has introduced a new features",
      "called [toolchains](https://docs.gradle.org/current/userguide/toolchains.html), were we can specify which version of",
      "Java we like to use to build the project with. Let's configure our project to be compiled with the Oracle Java 17."
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "a18f8e92-d535-47ee-9db4-4f8bf4a99296",
    "name": "Add application plugin",
    "workingDirectory": "hello-world",
    "parameters": [
      "diff --git a/build.gradle b/build.gradle",
      "index e69de29..f408aaa 100644",
      "--- a/build.gradle",
      "+++ b/build.gradle",
      "@@ -1,3 +2,9 @@",
      " plugins {",
      "     id \"application\"",
      " }",
      "+",
      "+java {",
      "+    toolchain {",
      "+        languageVersion = JavaLanguageVersion.of(17)",
      "+    }",
      "+}",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "079619ab-0592-45f3-8776-aad870a15305",
    "parameters": [
      "Java is set. What's next? We downloaded our JAR files from",
      "the [Maven central repository](https://mvnrepository.com/repos/central). We need to tell Gradle from where it can",
      "download the dependencies."
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "ba569e3d-5839-4774-b675-165f664d8eca",
    "name": "Include repository",
    "workingDirectory": "hello-world",
    "parameters": [
      "diff --git a/build.gradle b/build.gradle",
      "index 9fd10f8..e4ad287 100644",
      "--- a/build.gradle",
      "+++ b/build.gradle",
      "@@ -8,2 +8,6 @@ java {",
      "     }",
      " }",
      "+",
      "+repositories {",
      "+    mavenCentral()",
      "+}",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "c66fdc06-ed7a-4caf-8f53-64556d8389cb",
    "parameters": [
      "We need to add the dependencies so that Gradle can download these dependencies, and the transitive dependencies. Gradle",
      "will also put these in the classpath when we run our application, as we will see shortly."
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "ea39feed-3045-4dc9-bd6b-05c12ca86efa",
    "name": "Add dependency",
    "workingDirectory": "hello-world",
    "parameters": [
      "diff --git a/build.gradle b/build.gradle",
      "index e4ad287..1e51896 100644",
      "--- a/build.gradle",
      "+++ b/build.gradle",
      "@@ -11,3 +11,8 @@ java {",
      " repositories {",
      "     mavenCentral()",
      " }",
      "+",
      "+dependencies {",
      "+    /* Logging */",
      "+    implementation \"ch.qos.logback:logback-classic:1.2.5\"",
      "+}",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "2585dd93-4d73-401c-8715-2d91eb152dbf",
    "parameters": [
      "We are all set now. Let's run the application using Gradle."
    ]
  },
  {
    "type": "command",
    "id": "4a0a0c68-dcbb-4f98-89d5-2d308083b01d",
    "name": "Build the application",
    "workingDirectory": "hello-world",
    "parameters": [
      "./gradlew",
      "run"
    ],
    "expectedExitValue": 1
  },
  {
    "type": "markdown",
    "id": "856fe4ca-c369-4c82-a9f4-1a7a12b0eb96",
    "parameters": [
      "The `gradle run` command failed again. It seems that we cannot get it working. Unfortunately, this can be demotivating.",
      "But let's not give up.",
      "",
      "The issue we have now is related to the main class. Gradle does not know which class to run. While we only have one",
      "class, there can be many classes in a project and Gradle cannot guess which one to use. The errors returned by Gradle as",
      "quite helpful, as shown net.",
      "",
      "```",
      "...",
      "* What went wrong:",
      "Execution failed for task ':run'.",
      "> No main class specified and classpath is not an executable jar.",
      "...",
      "```",
      "",
      "We need to set the main class."
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "6a888f64-043b-4785-92a3-4db67dbfaa14",
    "name": "Set main class name",
    "workingDirectory": "hello-world",
    "parameters": [
      "diff --git a/build.gradle b/build.gradle",
      "index 1e51896..9cd509e 100644",
      "--- a/build.gradle",
      "+++ b/build.gradle",
      "@@ -8,6 +8,10 @@ java {",
      "     }",
      " }",
      " ",
      "+application {",
      "+    getMainClass().set(\"HelloWorld\")",
      "+}",
      "+",
      " repositories {",
      "     mavenCentral()",
      " }",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "4fb6a5b8-3e35-49ce-a92e-a96c3017c370",
    "parameters": [
      "The main class is now set. Let's run the program again."
    ]
  },
  {
    "type": "command",
    "id": "a5e26997-1935-4c43-8152-0304ed884ed0",
    "name": "Run the application",
    "workingDirectory": "hello-world",
    "parameters": [
      "./gradlew",
      "run"
    ]
  },
  {
    "type": "markdown",
    "id": "2cdf1737-22b6-4307-83b9-226738324c9d",
    "parameters": [
      "This time the program worked. Yay!!!",
      "",
      "The program will produce something similar to the following.",
      "",
      "```",
      "...",
      "> Task :run",
      "12:34:56.789 [main] DEBUG HelloWorld - Hello World!!",
      "",
      "BUILD SUCCESSFUL in 2s",
      "2 actionable tasks: 1 executed, 1 up-to-date",
      "```",
      "",
      "We are far from ready. Gradle can do more than simply run our program. We can use Gradle to create the JAR file with",
      "little effort. One of the tasks that the `application` Gradle",
      "plugin ([reference](https://docs.gradle.org/current/userguide/application_plugin.html)) provides is the `jar`",
      "task ([reference](https://docs.gradle.org/current/dsl/org.gradle.api.tasks.bundling.Jar.html)). To be precise the `java`",
      "Gradle plugin ([reference](https://docs.gradle.org/current/userguide/java_plugin.html)) provides the `jar` task, and",
      "the `application` Gradle plugin extends the `java` Gradle plugin.",
      "",
      "Let's create a JAR file using Gradle."
    ]
  },
  {
    "type": "command",
    "id": "d34f97f7-e269-48ed-b8ff-899fae95a1b8",
    "name": "Create JAR file",
    "workingDirectory": "hello-world",
    "parameters": [
      "./gradlew",
      "jar"
    ]
  },
  {
    "type": "markdown",
    "id": "86bf5098-9541-4136-9887-56449de01403",
    "parameters": [
      "It's as easy as that.  This is one of the advantages of using a build tool like Gradle or Maven. ",
      "",
      "Gradle saves the JAR file under the `build/libs` folder.  List all files under this directory"
    ]
  },
  {
    "type": "command",
    "id": "e3c056b1-2b59-413c-aac2-5fbe164fa9d6",
    "name": "List the JAR file built by the ",
    "workingDirectory": "hello-world",
    "parameters": [
      "tree",
      "build/libs"
    ]
  },
  {
    "type": "markdown",
    "id": "9b420859-887c-4f4a-8602-0ad3dbd2c4b2",
    "parameters": [
      "There should be only one file, our JAR file",
      "",
      "```",
      "build/libs",
      "└── hello-world.jar",
      "```",
      "",
      "We can run this JAR in a similar way we did before, using the `java -jar` command."
    ]
  },
  {
    "type": "command",
    "id": "944e0f79-61e1-431d-a733-ef25332ac955",
    "name": "Run JAR file",
    "workingDirectory": "hello-world",
    "parameters": [
      "java",
      "-jar",
      "build/libs/hello-world.jar"
    ],
    "expectedExitValue": 1
  },
  {
    "type": "markdown",
    "id": "75c7ba4e-b61b-475b-9a95-af5fd29801e3",
    "parameters": [
      "Unfortunately, the JAR file failed to run.",
      "",
      "```",
      "no main manifest attribute, in build/libs/hello-world.jar",
      "```",
      "",
      "This is the same error we had before, when we were missing the `MANIFEST.MF` file. There is quite an easy fix for this.",
      "",
      "So what are we waiting for? Say we fix this problem now, how can we be sure that this program is fixed? We can try the",
      "program manually again, right? Yes, we can but that approach does not scale well. Say we have a simple shopping list",
      "program, that provides only two features, add items to the shopping list and print the shopping list. Say that now we",
      "add a new feature, delete item from the shopping list. How will you try it out?",
      "",
      "- Add item to the list, print the list, delete it, and print the list again to verify that it was deleted",
      "- Add many items to the list, print the list, delete one item, and print the list again to verify that only the selected",
      "  one was deleted",
      "",
      "We can add many more scenarios, but let's stick to these for now. Note that the new functionality interacted with the",
      "exiting one. The more features we have the more complicated our scenarios will become. Say that now we introduce edit.",
      "We need to test all different interactions, such as",
      "",
      "- Add one, Print",
      "- Add many, Print",
      "- Add one, Print, Edit one, Print",
      "- Add many, Print, Edit one, Print",
      "- Add one, Print, Delete one, Print (as before)",
      "- Add many, Print, Delete one, Print (as before)",
      "- Add one, Print, Edit one, Print, Delete one, Print",
      "",
      "There can be more combinations that those listed above. By adding one feature we went from two scenarios to much more.",
      "Adding more features will further increase the number of combinations, to an extent that manually trying the program",
      "becomes infeasible.",
      "",
      "I worked on a project in the past, we were stopped for one whole day to try the application before deploying it to",
      "production. We barely scratched the surface as the application was quite large and bugs still went through.",
      "",
      "So, how do we deal with this situation? A better approach is to use automated tests. An automated tests is code that we",
      "can write to test our main, or production, code. Yes, we can write code, referred to as test code, to test the main",
      "code. Say we want to write a calculator program. We can write test code that provides input to our calculator, such",
      "as `7 + 4`, and then we confirm that our program returns the correct answer, `11` in this case. Being automated, these",
      "tests will run automatically, without us having to do anything. When we add other functionality, we add new tests and",
      "then write all tests automatically, using frameworks, like [JUnit](https://junit.org/).",
      "",
      "Before we move on, let's commit our changes."
    ]
  },
  {
    "type": "git-commit-changes",
    "id": "bdce7a56-070a-4c4f-838a-7c7bf902611a",
    "name": "Commit changes",
    "workingDirectory": "hello-world",
    "parameters": [
      "Add Gradle to project",
      "v6.0.7"
    ]
  },
  {
    "type": "section",
    "id": "d7c92ce7-98c8-43c8-a414-606cc6e85850",
    "parameters": [
      "Testing"
    ]
  },
  {
    "type": "markdown",
    "id": "4b78da54-c33e-40d7-b48d-adb607466b70",
    "parameters": [
      "When we write code, one of the first things we do is to try it out. If we write a web-based program, we will open the",
      "changes in out browser, and if we write a REST program, will use [Postman](https://www.postman.com/)",
      "or [Insomnia](https://insomnia.rest/) to see if our changes are working well. When we write our `hello-world` program,",
      "one of the first things we did was to try it out. No one writes a program from start to finish without stop and trying",
      "things as they go along.",
      "",
      "Trying things manually is easy but does not scale well, as it requires manual intervention. While it is quick to check",
      "one thing, it becomes a nightmare if we need to test 100 of features to make sure that everything still works as",
      "expected. In 1998, [Kent Beck](https://en.wikipedia.org/wiki/Kent_Beck),",
      "created [SUnit](https://en.wikipedia.org/wiki/SUnit), a unit testing framework for the Smalltalk programming",
      "language ([reference](https://en.wikipedia.org/wiki/XUnit)). [JUnit](https://junit.org/) is a testing framework for the",
      "Java programming language. This was quite a revolutionary idea. We write code that tests our code.",
      "",
      "JUnit is not the only testing frameworks.  [Spock](https://spockframework.org/) is another testing framework, well know",
      "for its expressiveness, with its famous _given_, _when_, and _then_ approach. We will use JUnit in this text as this is",
      "more commonly used in projects."
    ]
  },
  {
    "type": "subsection",
    "id": "97533798-c0a5-4eb0-9579-c690b56561c8",
    "parameters": [
      "JUnit"
    ]
  },
  {
    "type": "markdown",
    "id": "adb5207b-2634-4af9-b14c-c538df9dd08a",
    "parameters": [
      "Before we start, let's tag the current commit so that we can always go back to this stage should we need to."
    ]
  },
  {
    "type": "git-tag-current-commit",
    "id": "47c8cd6b-033b-4d61-9372-26b09c22be05",
    "name": "Create starting point",
    "workingDirectory": "hello-world",
    "parameters": [
      "v7.0.0",
      "Start of JUnit"
    ]
  },
  {
    "type": "markdown",
    "id": "d04cbd27-fb19-45f6-99c1-36836082e5ef",
    "parameters": [
      "JUnit is a popular Java testing framework, initially developed by Kent",
      "Beck, [Erich Gamma](https://en.wikipedia.org/wiki/Erich_Gamma), [David Saff](https://github.com/dsaff), and Kris",
      "Vasudevan. JUnit is an open source project and has an ever growing list of",
      "contributors ([reference](https://github.com/junit-team/junit4/graphs/contributors)). We can write code to test our main",
      "code and then use JUnit to run our tests and produce a report. The `java`",
      "Gradle plugin provides",
      "the `test` ([reference](https://docs.gradle.org/current/dsl/org.gradle.api.tasks.testing.Test.html)) task. When we",
      "run `./gradlew test`, Gradle will trigger JUnit and tests our code. If all test pass, then Gradle succeeds, otherwise",
      "fails.",
      "",
      "JUnit has been evolving for a long time (**TODO** find the date when JUnit 1 was released),",
      "with [JUnit 5](https://junit.org/junit5/docs/current/user-guide/) as the current version. JUnit 5 was released in",
      "2017 ([reference](https://www.infoq.com/news/2017/10/junit5-released/)) and brought many changes to the testing",
      "framework. Given the popularity of JUnit 4, released",
      "2006 ([reference](https://www.infoq.com/news/2017/10/junit5-released/)), JUnit 5 supports both version. We can run JUnit",
      "4 tests using JUnit 5.",
      "",
      "What are the differences between the JUnit 4 and JUnit 5 versions? JUnit 5 introduced many new, non-conflicting",
      "features. JUnit 4 was encapsulated as one JAR file. JUnit 5, on the other hand, introduced the concept of platform which",
      "runs one of more test engines. The JUnit Vintage test engine is used to run JUnit 3 and Junit 4 tests, while the JUnit",
      "Jupiter is used to run the JUnit 5 tests. Once I heard that the name _Jupiter_ comes from the name of the fifth planet",
      "from the sun, but I don't have a reference for that.",
      "",
      "What do you mean by \"_non-conflicting features_\"? JUnit 4 uses the `org.junit` package, while JUnit 5 uses",
      "the `org.junit.jupiter.api`. Both versions use annotations, such as `@Test`. JUnit 4, use the `org.junit.Test`",
      "annotation ([Java Doc](https://junit.org/junit4/javadoc/4.12/org/junit/Test.html)) and JUnit 5 use",
      "the `org.junit.jupiter.api.Test` ([Java Doc](https://junit.org/junit5/docs/current/api/org.junit.jupiter.api/org/junit/jupiter/api/Test.html))",
      ". The annotations have the same name, but located in different packages. This will allow us to use both annotations at",
      "the same time, but I never saw that happening. One of the greatest advantages of having the same annotation name,",
      "switching from one `@Test` annotation to the other is a simple import change from `org.junit.Test`",
      "to `org.junit.jupiter.api.Test`.",
      "",
      "JUnit has many features and we will introduce all the features used in this text. Unfortunately, we will not cover all",
      "features provided by JUnit and it is recommended to deepen the knowledge of this testing framework.",
      "The [JUnit 5 website](https://junit.org/junit5/docs/current/user-guide/) provides a good starting point. Books like",
      "_JUnit in Action_ provide an in-depth description of the testing framework and are always recommended.",
      "",
      "How do we start? We need to add the JUnit dependency to our project. If we look",
      "[_junit_ at Maven central](https://mvnrepository.com/artifact/org.junit), we will find many dependencies and this can be",
      "a bit confusing. The safest option is to use",
      "the [JUnit Jupiter Aggregator](https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter), which includes the",
      "JUnit Platform, together with the JUnit Jupiter engine and the JUnit Vintage engine, amongst other things."
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "96bf30b3-6c11-4473-997a-e426ea08044f",
    "name": "Add JUnit dependency",
    "workingDirectory": "hello-world",
    "parameters": [
      "diff --git a/build.gradle b/build.gradle",
      "index 9cd509e..7fc380b 100644",
      "--- a/build.gradle",
      "+++ b/build.gradle",
      "@@ -19,4 +19,7 @@ repositories {",
      " dependencies {",
      "     /* Logging */",
      "     implementation \"ch.qos.logback:logback-classic:1.2.5\"",
      "+",
      "+    /* Testing */",
      "+    testImplementation \"org.junit.jupiter:junit-jupiter:5.8.1\"",
      " }",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "e1810411-906a-4d5d-9599-29621b9e3c11",
    "parameters": [
      "As we mentioned before, the test code goes into a different folder from the production code. Let's create the test",
      "folder."
    ]
  },
  {
    "type": "command",
    "id": "c36c4e01-fabb-4644-b097-cd1777814651",
    "name": "Create test directory",
    "workingDirectory": "hello-world",
    "parameters": [
      "mkdir",
      "-p",
      "src/test/java"
    ]
  },
  {
    "type": "markdown",
    "id": "729fbc84-5bb0-402e-ba9b-b45b8b9eefcc",
    "parameters": [
      "Let's create our first test class. We can call it `RunApplicationTest` as we will be testing that our program runs",
      "properly. The name of the test class usually describes what is being tested. That way it helps us find what's testing",
      "what.",
      "",
      "Let's create the file `RunApplicationTest.java` under the `hello-world/src/test/java` folder."
    ]
  },
  {
    "type": "create",
    "id": "c4bfe496-9ace-4663-85b9-7032173494c4",
    "name": "Create Test Class",
    "workingDirectory": "hello-world",
    "parameters": [
      "src/test/java/RunApplicationTest.java",
      "class RunApplicationTest {",
      "",
      "}",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "3b40c175-e65a-41fb-becd-069cf1510055",
    "parameters": [
      "We have an empty class, that looks like any other Java class. Let's add a test method and annotate it with the `@Test`",
      "annotation to make it as a test method."
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "21bea765-9f9c-4709-ac7a-ca6ad068dcd0",
    "name": "Add test method",
    "workingDirectory": "hello-world",
    "parameters": [
      "diff --git a/src/test/java/RunApplicationTest.java b/src/test/java/RunApplicationTest.java",
      "index 00eb06a..545fdaa 100644",
      "--- a/src/test/java/RunApplicationTest.java",
      "+++ b/src/test/java/RunApplicationTest.java",
      "@@ -1,3 +1,8 @@",
      "+import org.junit.jupiter.api.Test;",
      "+",
      " class RunApplicationTest {",
      " ",
      "+    @Test",
      "+    void shouldFinishWithExitValue0() {",
      "+    }",
      " }",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "644ab9f6-3e96-4fba-ac35-27eb50fda399",
    "parameters": [
      "How come the `RunApplicationTest` class is not public? The `RunApplicationTest` class is a top level class and has the",
      "same name as the source file, so we can have this class public. JUnit 5 does not require the test classes to be public",
      "and it is recommended to use the package-private access modifier. The test classes are only accessed by JUnit and not by",
      "other code. Therefore, we can use the least visible access modifier, the package-private.",
      "",
      "Now that we are all set, let's run our test."
    ]
  },
  {
    "type": "command",
    "id": "e1d0a62f-c70d-41b4-81a4-6a9fa115dcc9",
    "name": "Run test",
    "workingDirectory": "hello-world",
    "parameters": [
      "./gradlew",
      "test"
    ]
  },
  {
    "type": "markdown",
    "id": "40462a0f-422a-4ea4-9b85-219b9809762a",
    "parameters": [
      "We have our first test.",
      "",
      "How do we know that our test is working? That's a great question. We don't. All we know that Gradle ran the `test` task",
      "and did not fail. To overcome this problem it is important to first write a test that fails, and then we fix it. Let's",
      "force this test to fail, using the `fail()`",
      "assertion ([Java Doc](https://junit.org/junit5/docs/current/api/org.junit.jupiter.api/org/junit/jupiter/api/Assertions.html#fail()))",
      "."
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "d9de5047-960e-40d5-9205-5f192b9ca31a",
    "name": "Add fail assertion",
    "workingDirectory": "hello-world",
    "parameters": [
      "diff --git a/src/test/java/RunApplicationTest.java b/src/test/java/RunApplicationTest.java",
      "index 1f15b08..7ffb315 100644",
      "--- a/src/test/java/RunApplicationTest.java",
      "+++ b/src/test/java/RunApplicationTest.java",
      "@@ -1,8 +1,11 @@",
      "+import static org.junit.jupiter.api.Assertions.fail;",
      "+",
      " import org.junit.jupiter.api.Test;",
      " ",
      " class RunApplicationTest {",
      " ",
      "     @Test",
      "     void shouldFinishWithExitValue0() {",
      "+        fail(\"Simulating problem\");",
      "     }",
      " }",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "bc024077-0abf-41bf-8311-a4bf1378e668",
    "parameters": [
      "The `fail()` assertion will cause JUnit to fail. Here we are forcing our test to simply fail. Next time we run our",
      "tests, these should fail."
    ]
  },
  {
    "type": "command",
    "id": "b3e78b48-ea3f-4b4e-8670-815899a05411",
    "name": "Run test",
    "workingDirectory": "hello-world",
    "parameters": [
      "./gradlew",
      "test"
    ]
  },
  {
    "type": "markdown",
    "id": "962aebe1-fd8b-423d-9b5c-d56958a7bb13",
    "parameters": [
      "The test, unexpectedly, pass",
      "",
      "```",
      "BUILD SUCCESSFUL in 2s",
      "3 actionable tasks: 2 executed, 1 up-to-date",
      "```",
      "",
      "This was not expected. Our test should have failed. That's why it is important to write a failing test first and make",
      "sure it fails. Our test did not run. We may have thought that we have good tests, but if these do not run, then we have",
      "nothing.",
      "",
      "Why did the tests did not run? Gradle is not well configure. We need to configure Gradle to use JUnit 5."
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "7dc836fc-bcbe-4c6e-bad1-973bbe25976a",
    "name": "Configure Gradle to use JUnit",
    "workingDirectory": "hello-world",
    "parameters": [
      "diff --git a/build.gradle b/build.gradle",
      "index 7fc380b..98197c7 100644",
      "--- a/build.gradle",
      "+++ b/build.gradle",
      "@@ -24,3 +24,15 @@ dependencies {",
      "     /* Testing */",
      "     testImplementation \"org.junit.jupiter:junit-jupiter:5.8.1\"",
      " }",
      "+",
      "+test {",
      "+    useJUnitPlatform()",
      "+    testLogging {",
      "+        events \"failed\", \"passed\", \"skipped\", \"standard_out\"",
      "+        exceptionFormat \"full\"",
      "+        showExceptions true",
      "+        showCauses true",
      "+        showStackTraces true",
      "+    }",
      "+    dependsOn(\"jar\")",
      "+}",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "a26d8852-c3d3-483e-a832-de11585ea528",
    "parameters": [
      "Let's understand what we did. We have three things.",
      "",
      "- `useJUnitPlatform()`: We configured the `test` task to use the JUnit test",
      "  platform ([reference](https://docs.gradle.org/current/userguide/java_testing.html#test_grouping)).",
      "- `testLogging {}`: We set the logging level for the tests cases. We went full throttle here and logged everything",
      "- `dependsOn(\"jar\")`: We made the test depend on the `jar` Gradle task.",
      "",
      "Why did me make the `test` task depending on the `jar` task? Our test requires a working JAR file, which is produced by",
      "the `jar` task. Gradle will make sure that the `jar` task is executed before the `test` task. Our test will have a",
      "freshly built JAR file and any changes we make will be in the JAR file that is being tested. This is very important as",
      "we want to make sure that we are testing changes me make to our JAR file."
    ]
  },
  {
    "type": "command",
    "id": "368a8ce6-221f-44af-903f-0d714296ee27",
    "name": "Run test",
    "workingDirectory": "hello-world",
    "parameters": [
      "./gradlew",
      "test"
    ],
    "expectedExitValue": 1
  },
  {
    "type": "markdown",
    "id": "e59ab13b-d5f1-4744-b383-687132f39106",
    "parameters": [
      "Our test finally failed.",
      "",
      "```",
      "...",
      "> Task :test FAILED",
      "",
      "RunApplicationTest > shouldFinishWithExitValue0() FAILED",
      "    org.opentest4j.AssertionFailedError: Simulating problem",
      "        at app//org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:39)",
      "        at app//org.junit.jupiter.api.Assertions.fail(Assertions.java:134)",
      "        at app//RunApplicationTest.shouldFinishWithExitValue0(RunApplicationTest.java:9)",
      "",
      "1 test completed, 1 failed",
      "",
      "FAILURE: Build failed with an exception.",
      "",
      "...",
      "",
      "BUILD FAILED in 2s",
      "4 actionable tasks: 1 executed, 3 up-to-date",
      "```",
      "",
      "That's great as this is what we were expecting.",
      "",
      "The purpose of our test is to make sure that our program can run properly. We can run our JAR file using",
      "the `ProcessBuilder`",
      "class ([Java Doc](https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/ProcessBuilder.html)). Using",
      "the `ProcessBuilder` class we can invoke any command we like, such as the `java -jar build/libs/hello-world.jar`."
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "9d52c20e-9735-47f7-8a00-cccc9a49ceed",
    "name": "Add ProcessBuilder",
    "workingDirectory": "hello-world",
    "parameters": [
      "diff --git a/src/test/java/RunApplicationTest.java b/src/test/java/RunApplicationTest.java",
      "index 7ffb315..7f07eab 100644",
      "--- a/src/test/java/RunApplicationTest.java",
      "+++ b/src/test/java/RunApplicationTest.java",
      "@@ -6,6 +6,8 @@ class RunApplicationTest {",
      " ",
      "     @Test",
      "     void shouldFinishWithExitValue0() {",
      "+        final ProcessBuilder builder = new ProcessBuilder(\"java\", \"-jar\", \"build/libs/hello-world.jar\");",
      "+",
      "         fail(\"Simulating problem\");",
      "     }",
      " }",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "bf0bed7c-9ac0-43c3-ae6e-6c8ee6da21eb",
    "parameters": [
      "Let's now start the `ProcessBuilder`, to execute the command."
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "6e647a84-9352-47c6-8398-a951047316d6",
    "name": "Start process",
    "workingDirectory": "hello-world",
    "parameters": [
      "diff --git a/src/test/java/RunApplicationTest.java b/src/test/java/RunApplicationTest.java",
      "index 7f07eab..0b61c98 100644",
      "--- a/src/test/java/RunApplicationTest.java",
      "+++ b/src/test/java/RunApplicationTest.java",
      "@@ -1,13 +1,16 @@",
      " import static org.junit.jupiter.api.Assertions.fail;",
      " ",
      "+import java.io.IOException;",
      "+",
      " import org.junit.jupiter.api.Test;",
      " ",
      " class RunApplicationTest {",
      " ",
      "     @Test",
      "-    void shouldFinishWithExitValue0() {",
      "+    void shouldFinishWithExitValue0() throws IOException {",
      "         final ProcessBuilder builder = new ProcessBuilder(\"java\", \"-jar\", \"build/libs/hello-world.jar\");",
      "+        final Process process = builder.start();",
      "",
      "         fail(\"Simulating problem\");",
      "     }",
      " }",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "b74af946-af92-4454-90c0-9f1b4d59b006",
    "parameters": [
      "What's the `throws IOException`? Please meet exceptions. Some code may fail and Java provides means to indicate failure.",
      "If the `ProcessBuilder` fails to run the command, then an `IOException`",
      "exception ([Java Doc](https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/io/IOException.html)) is thrown",
      "to indicate failure.",
      "",
      "What happens when an exception is thrown? If a method we invoke fails with an exception, then the execution will stop",
      "there. Consider the following code fragment.",
      "",
      "```",
      "final ProcessBuilder builder = new ProcessBuilder(\"java\", \"-jar\", \"build/libs/hello-world.jar\");",
      "final Process process = builder.start();",
      "final int exitValue = process.waitFor();",
      "```",
      "",
      "The `Process` has a method",
      "called `waitFor()` ([Java Doc](https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/Process.html#waitFor()))",
      "that waits for the process to finish and then returns the program exit",
      "value ([reference](https://en.wikipedia.org/wiki/Exit_status)). We know that the `start()`",
      "method ([Java Doc](https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/ProcessBuilder.html#start()))",
      "can fail. What should happen if the call to this method fail? We cannot proceed as a process was not created and there",
      "is nothing to wait for. How can we signal that something went wrong? We can return a special value and then check before",
      "proceeding, as shown next.",
      "",
      "```",
      "final ProcessBuilder builder = new ProcessBuilder(\"java\", \"-jar\", \"build/libs/hello-world.jar\");",
      "final Process process = builder.start();",
      "if(process.hasFailed()) {",
      "    /* Handle the error here */",
      "} else {",
      "    final int exitValue = process.waitFor();",
      "}",
      "```",
      "",
      "This approach has two drawbacks. Say that we have several statements, that each can fail. If we use the above approach,",
      "then we need to check each return statement. Say that we don't know how to handle the error in this method, how will we",
      "do that? We will have to return another special value to indicate that this method has failed.",
      "",
      "In a programming language like [Rust](https://www.rust-lang.org/), the language provides a special value, such as",
      "the `Result` ([Docs](https://doc.rust-lang.org/std/result/)) where the return value is either the value or an error.",
      "Instead of throwing exception, we can return an error and stop execution. In a functional programming approach, we can",
      "short-circuit the rest of the method chaining and return the first error instead of continue.",
      "",
      "How is an exception thrown? That's quite simple. Java has",
      "the `throw` ([tutorial](https://docs.oracle.com/javase/tutorial/essential/exceptions/throwing.html)) key word. This can",
      "be used to throw any object of type exception, as shown below.",
      "",
      "```",
      "if(ioError) {",
      "  throw new IOException(\"Failed to do the IO operation\");",
      "}",
      "```",
      "",
      "Why did have to include the `throws IOException` to our method signature? Java has two types of exceptions, checked and",
      "unchecked, or runtime, exceptions. If the exception is a checked exception, then you either need to handle it or declare",
      "it in the method signature, as we did with the `IOException`. Unchecked exceptions can be thrown without being declared",
      "on the method signature. Any exception of",
      "type `RuntimeException` ([Java Doc](https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/RuntimeException.html))",
      "is unchecked exception.",
      "",
      "What's next? We need to wait for the process that we started to stop. Now, note that a process can take forever. If",
      "anything, computer programs are patient and they can wait forever. So we need to be careful and not write code that can",
      "wait forever. The `Process` has two `waitFor()` methods, one that waits for the process to stop even if this takes",
      "forever.  The second one takes a timeout.  It's best to go for the second option and be safe."
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "d986a115-8561-4d9f-9410-3cb9f565e2bb",
    "name": "Wait for the process to finish",
    "workingDirectory": "hello-world",
    "parameters": [
      "diff --git a/src/test/java/RunApplicationTest.java b/src/test/java/RunApplicationTest.java",
      "index 0b61c98..afc1f76 100644",
      "--- a/src/test/java/RunApplicationTest.java",
      "+++ b/src/test/java/RunApplicationTest.java",
      "@@ -1,16 +1,19 @@",
      " import static org.junit.jupiter.api.Assertions.fail;",
      " ",
      " import java.io.IOException;",
      "+import java.util.concurrent.TimeUnit;",
      " ",
      " import org.junit.jupiter.api.Test;",
      " ",
      " class RunApplicationTest {",
      " ",
      "     @Test",
      "-    void shouldFinishWithExitValue0() throws IOException {",
      "+    void shouldFinishWithExitValue0() throws IOException, InterruptedException {",
      "         final ProcessBuilder builder = new ProcessBuilder(\"java\", \"-jar\", \"build/libs/hello-world.jar\");",
      "         final Process process = builder.start();",
      "",
      "+        final boolean finishedInTime = process.waitFor(1, TimeUnit.SECONDS);",
      "+",
      "         fail(\"Simulating problem\");",
      "     }",
      " }",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "89580e55-ce8f-483f-9b40-dd9d230997b7",
    "parameters": [
      "The `waitFor()` returns a `boolean` indicating whether the process has finished in time or not. Definitely we want to",
      "make sure that our program finished in time and did not take longer than expected. Our program should not take more than",
      "a second to start, run and finish."
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "fcf55801-f03a-433f-9687-91280d659196",
    "name": "Assert process finished in time",
    "workingDirectory": "hello-world",
    "parameters": [
      "diff --git a/src/test/java/RunApplicationTest.java b/src/test/java/RunApplicationTest.java",
      "index afc1f76..ca5a4fc 100644",
      "--- a/src/test/java/RunApplicationTest.java",
      "+++ b/src/test/java/RunApplicationTest.java",
      "@@ -1,3 +1,4 @@",
      "+import static org.junit.jupiter.api.Assertions.assertTrue;",
      " import static org.junit.jupiter.api.Assertions.fail;",
      " ",
      " import java.io.IOException;",
      "@@ -12,8 +13,9 @@ class RunApplicationTest {",
      "         final ProcessBuilder builder = new ProcessBuilder(\"java\", \"-jar\", \"build/libs/hello-world.jar\");",
      "         final Process process = builder.start();",
      "",
      "         final boolean finishedInTime = process.waitFor(1, TimeUnit.SECONDS);",
      "+        assertTrue(finishedInTime);",
      "",
      "         fail(\"Simulating problem\");",
      "     }",
      " }",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "98dec511-1a34-4f6a-8b9c-5687284427cc",
    "parameters": [
      "We still need to verify that the program run successfully, thus finished with an exit value of 0. We can obtain the exit",
      "value using the `Process`'s `exitValue()`",
      "method ([Java Doc](https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/Process.html#exitValue())),",
      "which returns the program's exit value. When a program exists normally, without errors, it should return `0`."
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "450c59fb-c5b9-4d50-ac6a-92e80c4248ba",
    "name": "Assert process finished with exit code 0",
    "workingDirectory": "hello-world",
    "parameters": [
      "diff --git a/src/test/java/RunApplicationTest.java b/src/test/java/RunApplicationTest.java",
      "index c9626ab..7c55d75 100644",
      "--- a/src/test/java/RunApplicationTest.java",
      "+++ b/src/test/java/RunApplicationTest.java",
      "@@ -1,3 +1,4 @@",
      "+import static org.junit.jupiter.api.Assertions.assertEquals;",
      " import static org.junit.jupiter.api.Assertions.assertTrue;",
      " import static org.junit.jupiter.api.Assertions.fail;",
      " ",
      "@@ -16,6 +17,9 @@ class RunApplicationTest {",
      "         final boolean finishedInTime = process.waitFor(1, TimeUnit.SECONDS);",
      "         assertTrue(finishedInTime);",
      " ",
      "+        final int exitValue = process.exitValue();",
      "+        assertEquals(0, exitValue);",
      "+",
      "         fail(\"Simulating problem\");",
      "     }",
      " }",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "4a685a06-fae2-4be5-91ac-559f2035dbbe",
    "parameters": [
      "We are almost ready now.  We have all the checks in place and we cna get rid of the `fail()`."
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "a748f6e6-bda9-4dd3-a20e-d2b4bf7ac9c8",
    "name": "Remove the fail assertion",
    "workingDirectory": "hello-world",
    "parameters": [
      "diff --git a/src/test/java/RunApplicationTest.java b/src/test/java/RunApplicationTest.java",
      "index 7c55d75..24f6851 100644",
      "--- a/src/test/java/RunApplicationTest.java",
      "+++ b/src/test/java/RunApplicationTest.java",
      "@@ -1,6 +1,5 @@",
      " import static org.junit.jupiter.api.Assertions.assertEquals;",
      " import static org.junit.jupiter.api.Assertions.assertTrue;",
      "-import static org.junit.jupiter.api.Assertions.fail;",
      " ",
      " import java.io.IOException;",
      " import java.util.concurrent.TimeUnit;",
      "@@ -19,7 +18,5 @@ class RunApplicationTest {",
      " ",
      "         final int exitValue = process.exitValue();",
      "         assertEquals(0, exitValue);",
      "-",
      "-        fail(\"Simulating problem\");",
      "     }",
      " }",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "5ab4f5dc-a325-4ced-9c7e-4d3924a30737",
    "parameters": [
      "Let us run the test. Please note that we have not yet done anything to fix the problem and thus the test should fail."
    ]
  },
  {
    "type": "command",
    "id": "a44daf23-bbe2-4152-adfa-05f4193cfdbf",
    "name": "Run test",
    "workingDirectory": "hello-world",
    "parameters": [
      "./gradlew",
      "test"
    ],
    "expectedExitValue": 1
  },
  {
    "type": "markdown",
    "id": "96e867e8-7e6d-441e-8460-d4d309e73ce1",
    "parameters": [
      "The test failed as we expected.",
      "",
      "```",
      "...",
      "> Task :test FAILED",
      "",
      "RunApplicationTest > shouldFinishWithExitValue0() FAILED",
      "    org.opentest4j.AssertionFailedError: expected: <0> but was: <1>",
      "...",
      "BUILD FAILED in 3s",
      "4 actionable tasks: 1 executed, 3 up-to-date",
      "```",
      "",
      "Having a test that fails is not good enough. We need to make sure that it is failing for the expected reason. In our",
      "case, the program is not running as we have not yet set the main class. Thus, the command `java -jar ...` will finish",
      "with an exit value of `1`, instead of `0`. If you look at the error message, you will see that that's exactly what",
      "happened.",
      "",
      "Now that we have a failing test, we can configure the Gradle `jar` task so that it sets the manifest's main class."
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "20b590c9-b769-4a6e-aad6-f95eff1bd98c",
    "name": "Configure the JAR task",
    "workingDirectory": "hello-world",
    "parameters": [
      "diff --git a/build.gradle b/build.gradle",
      "index 98197c7..853e3a8 100644",
      "--- a/build.gradle",
      "+++ b/build.gradle",
      "@@ -12,6 +12,12 @@ application {",
      "     getMainClass().set(\"HelloWorld\")",
      " }",
      " ",
      "+jar {",
      "+    manifest {",
      "+        attributes \"Main-Class\": application.getMainClass().get()",
      "+    }",
      "+}",
      "+",
      " repositories {",
      "     mavenCentral()",
      " }",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "72e0d5ae-167b-4034-9017-be82b9a7fbb0",
    "parameters": [
      "We have now set the main method.  Let's run the test to make sure that our code works well."
    ]
  },
  {
    "type": "command",
    "id": "8ae4caa3-07fd-4eb7-8866-21c3f467ff33",
    "name": "Test the program",
    "workingDirectory": "hello-world",
    "parameters": [
      "./gradlew",
      "test"
    ],
    "expectedExitValue": 1
  },
  {
    "type": "markdown",
    "id": "dca0a1df-02e1-4545-8d7d-86b4e2ea81fe",
    "parameters": [
      "Our test still failed with the same reason.",
      "",
      "```",
      "...",
      "> Task :test FAILED",
      "RunApplicationTest > shouldFinishWithExitValue0() FAILED",
      "    org.opentest4j.AssertionFailedError: expected: <0> but was: <1>",
      "...",
      "```",
      "",
      "This means that our program is not working as expected.",
      "",
      "If you remember correctly, when we ran our `HelloWorld` class, we had to include the logger JAR files as shown next.",
      "",
      "```",
      "$ java -cp .:libs/slf4j-api-1.7.32.jar:libs/logback-core-1.2.6.jar:libs/logback-classic-1.2.6.jar HelloWorld",
      "```",
      "",
      "The Gradle `jar` task can take care of that too, hitting two birds with one stone. We can configure Gradle `jar` task to",
      "include all the runtime dependencies inside our JAR, creating what it is called a Fat or Uber JAR. A Fat JAR is a JAR",
      "file that contains our program and all of its dependencies inside one JAR file, making it very convenient for",
      "distribution."
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "59812678-6eb9-4dbb-a601-b2d5bc712de8",
    "name": "Configure the JAR task",
    "workingDirectory": "hello-world",
    "parameters": [
      "diff --git a/build.gradle b/build.gradle",
      "index 7152fdb..51ed229 100644",
      "--- a/build.gradle",
      "+++ b/build.gradle",
      "@@ -16,6 +16,9 @@ jar {",
      "     manifest {",
      "         attributes \"Main-Class\": application.getMainClass().get()",
      "     }",
      "+    from {",
      "+        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }",
      "+    }",
      " }",
      " ",
      " repositories {",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "caef3d55-885c-4976-a361-cdc94272c74c",
    "parameters": [
      "Let test this again."
    ]
  },
  {
    "type": "command",
    "id": "ed0c87a2-3396-4f50-92cb-5cf721e82026",
    "name": "Test the program again",
    "workingDirectory": "hello-world",
    "parameters": [
      "./gradlew",
      "test"
    ]
  },
  {
    "type": "markdown",
    "id": "d53b024f-03e1-4678-9273-d1d691782ca1",
    "parameters": [
      "This time the test past, Yey!!",
      "",
      "```",
      "...",
      "> Task :test",
      "",
      "RunApplicationTest > shouldFinishWithExitValue0() PASSED",
      "...",
      "BUILD SUCCESSFUL in 6s",
      "4 actionable tasks: 2 executed, 2 up-to-date",
      "```",
      "",
      "We now have the peace of mind that our program works as we were expecting it to work. Better than that, we now have the",
      "safeguard that any future changes we do to the program cannot prevent it from finishing with an exit value of `0`, as",
      "otherwise this test will fail and we will know about it.",
      "",
      "Let's create the FAT Jar file, using the Gradle `jar` task"
    ]
  },
  {
    "type": "command",
    "id": "4b1a8813-8933-47f2-bd33-ec996e7448c5",
    "name": "Run test",
    "workingDirectory": "hello-world",
    "parameters": [
      "./gradlew",
      "jar"
    ]
  },
  {
    "type": "markdown",
    "id": "bc8db972-0bae-489a-8112-c2a15c13dc44",
    "parameters": [
      "Let's take it for a spin"
    ]
  },
  {
    "type": "command",
    "id": "fcc1eeeb-8017-4caa-94a6-65a67cdb6e50",
    "name": "Run test",
    "workingDirectory": "hello-world",
    "parameters": [
      "java",
      "-jar",
      "build/libs/hello-world.jar"
    ]
  },
  {
    "type": "markdown",
    "id": "6c8dfdd0-8b17-4125-9888-fe63cf4e5cd1",
    "parameters": [
      "What we did is all good, but there is a Gradle plugin that does all that for us.  Let's undo what we did."
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "7ff3a0b0-44dd-4586-95d0-81551b2fc47f",
    "name": "Add the Shadow plugin",
    "workingDirectory": "hello-world",
    "parameters": [
      "diff --git a/build.gradle b/build.gradle",
      "index 853e3a8..98197c7 100644",
      "--- a/build.gradle",
      "+++ b/build.gradle",
      "@@ -12,15 +12,6 @@ application {",
      "     getMainClass().set(\"HelloWorld\")",
      " }",
      " ",
      "-jar {",
      "-    manifest {",
      "-        attributes \"Main-Class\": application.getMainClass().get()",
      "-    }",
      "-    from {",
      "-        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }",
      "-    }",
      "-}",
      "-",
      " repositories {",
      "     mavenCentral()",
      " }",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "8da524c4-e1e2-478d-963a-e8eb0601e176",
    "parameters": [
      "Now, let's introduce the [Shadow Jar](https://plugins.gradle.org/plugin/com.github.johnrengelman.shadow) Gradle plugin."
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "6f101e65-32df-40fc-974b-3633f1fb8b91",
    "name": "Add the Shadow plugin",
    "workingDirectory": "hello-world",
    "parameters": [
      "diff --git a/build.gradle b/build.gradle",
      "index 5568476..d6912cd 100644",
      "--- a/build.gradle",
      "+++ b/build.gradle",
      "@@ -1,5 +1,6 @@",
      " plugins {",
      "     id \"application\"",
      "+    id \"com.github.johnrengelman.shadow\" version \"7.1.0\"",
      " }",
      " ",
      " java {",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "afbc9041-ff83-40d8-aa50-ddb258e48b03",
    "parameters": [
      "We added a new Gradle plugin, which means we have new tasks that Gradle. Let's see what's new."
    ]
  },
  {
    "type": "command",
    "id": "2624ba89-294a-405a-b3c2-87dd95a9bb2e",
    "name": "List Gradle tasks",
    "workingDirectory": "hello-world",
    "parameters": [
      "./gradlew",
      "tasks"
    ]
  },
  {
    "type": "markdown",
    "id": "fc9f3eb3-185c-4cf0-8625-a7f33aae854b",
    "parameters": [
      "The list of tasks now includes a new section, titled _Shadow tasks_.",
      "",
      "```",
      "...",
      "Shadow tasks",
      "------------",
      "knows - Do you know who knows?",
      "shadowJar - Create a combined JAR of project and runtime dependencies",
      "...",
      "```",
      "",
      "One of the new tasks is the `shadowJar`. This will create our Fat JAR and setup the main class for us, on in one line."
    ]
  },
  {
    "type": "command",
    "id": "7c8037a0-6b99-495d-bf72-db8c86b0f143",
    "name": "Run shadowJar task",
    "workingDirectory": "hello-world",
    "parameters": [
      "./gradlew",
      "clean",
      "shadowJar"
    ]
  },
  {
    "type": "markdown",
    "id": "6f22d828-ce32-4729-a4a7-c02c0ce8cf7c",
    "parameters": [
      "What's the Gradle `clean` tasks? The Gradle `clean` tasks simply deleted the `build` folder and everything in it. This",
      "make sure that we don't have any files from the previous builds.",
      "",
      "Let us see what files we find under the `build/libs` folder."
    ]
  },
  {
    "type": "command",
    "id": "72b1f82f-44b2-45d8-9c64-9c4a609cb095",
    "name": "List the build JAR files",
    "workingDirectory": "hello-world",
    "parameters": [
      "tree",
      "build/libs"
    ]
  },
  {
    "type": "markdown",
    "id": "2b2959b5-30fb-4242-a3c2-d5d4c117f2e7",
    "parameters": [
      "We have one JAR file under the `build/libs` folder.",
      "",
      "```",
      "build/libs",
      "└── hello-world-all.jar",
      "```",
      "",
      "The `hello-world-all.jar` is the Fat JAR file produced by the `shadowJar` Gradle. We don't have our original file,",
      "named `hello-world.jar`. This means that our tests as pointing to the wrong JAR file.",
      "",
      "Let's run the test again."
    ]
  },
  {
    "type": "command",
    "id": "9b269301-d261-476a-8c09-c8a769e0a460",
    "workingDirectory": "hello-world",
    "parameters": [
      "./gradlew",
      "test"
    ],
    "expectedExitValue": 1
  },
  {
    "type": "markdown",
    "id": "4f10b25d-023e-4d8c-9043-2d8f93e5e326",
    "parameters": [
      "The test failed, as expected.",
      "",
      "```",
      "...",
      "> Task :test FAILED",
      "",
      "RunApplicationTest > shouldFinishWithExitValue0() FAILED",
      "    org.opentest4j.AssertionFailedError: expected: <0> but was: <1>",
      "...",
      "BUILD FAILED in 2s",
      "```",
      "",
      "That's a good thing as our test is capturing changes, even the name of the actual JAR file.",
      "",
      "Why is the name of the JAR file important? You may think that we can simply rename the JAR file or use a different",
      "command, but that requires a manual intervention. But that does not work if another program is expecting our JAR file to",
      "have a specific name. Say that our program is linked to our website so that users can download it. If the JAR file name",
      "changes, the link will break. Say that we have instructions that assume the file has a name, these will become stale",
      "once the name changes. I can keep going with examples like these. When writing programs we need to think further than",
      "just the code as a change in a name can make a big difference.",
      "",
      "Also, the `test` Gradle task still depends on the `jar` gradle task and not the `shadowJar`. We need to change that,",
      "before proceeding."
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "e0284703-c301-4558-9833-0224d3aeffbd",
    "name": "Make test depend on shadowJar",
    "workingDirectory": "hello-world",
    "parameters": [
      "diff --git a/build.gradle b/build.gradle",
      "index fde31b5..9312f57 100644",
      "--- a/build.gradle",
      "+++ b/build.gradle",
      "@@ -34,5 +34,5 @@ test {",
      "         showCauses true",
      "         showStackTraces true",
      "     }",
      "-    dependsOn(\"jar\")",
      "+    dependsOn(\"shadowJar\")",
      " }",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "e81ce7fc-423c-42db-874f-90cd58bf9acf",
    "parameters": [
      "Before we ran the tests, let's update our test class, `RunApplicationTest.java`, and point this to the new JAR file."
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "ddee2cc2-c630-4e37-b680-05bf34e28dd2",
    "name": "Use the fat JAR in test",
    "workingDirectory": "hello-world",
    "parameters": [
      "diff --git a/src/test/java/RunApplicationTest.java b/src/test/java/RunApplicationTest.java",
      "index 24f6851..42a0848 100644",
      "--- a/src/test/java/RunApplicationTest.java",
      "+++ b/src/test/java/RunApplicationTest.java",
      "@@ -10,7 +10,7 @@ class RunApplicationTest {",
      " ",
      "     @Test",
      "     void shouldFinishWithExitValue0() throws IOException, InterruptedException {",
      "-        final ProcessBuilder builder = new ProcessBuilder(\"java\", \"-jar\", \"build/libs/hello-world.jar\");",
      "+        final ProcessBuilder builder = new ProcessBuilder(\"java\", \"-jar\", \"build/libs/hello-world-all.jar\");",
      "         final Process process = builder.start();",
      " ",
      "         final boolean finishedInTime = process.waitFor(1, TimeUnit.SECONDS);",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "537077a9-0c80-42fc-b725-ee11a8d5049d",
    "parameters": [
      "The Gradle `application` plugin provides more tasks than just `test` and `run`. The `build` task is another task",
      "provided by the application plugin. This task is usually used to build the program, by compiling the code, run the tests",
      "and produces our final program in the form of a Fat JAR file using the `shadowJar` plugin.",
      "",
      "Let's build the project."
    ]
  },
  {
    "type": "command",
    "id": "78a85811-a461-432c-a31a-f721319fe81e",
    "name": "Build the application",
    "workingDirectory": "hello-world",
    "parameters": [
      "./gradlew",
      "build"
    ]
  },
  {
    "type": "markdown",
    "id": "47cb264b-006b-4697-a2a3-4448c5ae610e",
    "parameters": [
      "Gradle built our project.  Let's run it."
    ]
  },
  {
    "type": "command",
    "id": "511f45ce-7bcd-4303-b54f-d050e33b3441",
    "name": "Run the fat JAR",
    "workingDirectory": "hello-world",
    "parameters": [
      "java",
      "-jar",
      "build/libs/hello-world-all.jar"
    ]
  },
  {
    "type": "markdown",
    "id": "5899f54c-b4bf-453c-bdcf-a3ae795e0de5",
    "parameters": [
      "We added tests and configured Gradle to test our code before building it, making sure that it passes before proceeding.",
      "",
      "What happens if the test fail? Gradle will stop the build. Note that our JAR file will still be produced as the `test`",
      "Gradle task depends on the `shadowJar`.",
      "",
      "Let's commit our changes before proceeding."
    ]
  },
  {
    "type": "git-commit-changes",
    "id": "221219c4-545f-487d-88ea-fa6741af6aeb",
    "name": "Commit changes",
    "workingDirectory": "hello-world",
    "parameters": [
      "Create fat JAR",
      "v7.0.16"
    ]
  },
  {
    "type": "markdown",
    "id": "89df19e1-b915-41a3-9253-c083fdaaf1a3",
    "parameters": [
      "The fix to the problem was quite easy, but instead we wrote a test first, replicated the problem and only then we fixed",
      "it. Then we refactored the code, by using an existing Gradle plugin. The tests made sure that our program still works,",
      "even after the refactoring.",
      "",
      "Now that our application is ready, how do we distribute it to others?  That's the topic of our next section."
    ]
  },
  {
    "type": "section",
    "id": "9d9f7894-d916-486e-a14c-7e8bc898f892",
    "parameters": [
      "Distributing the Application"
    ]
  },
  {
    "type": "markdown",
    "id": "6ab5cb7c-194e-411c-a8cd-72cf168817ef",
    "parameters": [
      "The Gradle `shadowJar` task creates a JAR file which we can distribute. All the user needs to do is have the correct",
      "version of Java installed and then run our program. Our program requires Java 17 to run, therefore the user running our",
      "program needs to have Java 17 installed.",
      "",
      "Now lets scale this to a company that needs to run and take care of tens if not hundreds of programmes written in",
      "different programing langauges, such as [NodeJS 16](https://nodejs.org/en/about/releases/). The operating system where",
      "this program will be running needs to have the right version of NodeJS installed.",
      "",
      "This raises the following questions",
      "",
      "- Who will be managing this?",
      "- Who will make sure that the correct version of libraries/frameworks platforms are installed?",
      "- How can we manage multiple version of libraries/frameworks/platforms running at the same time?",
      "- How can we ensure that the program works as expected on the production environment?",
      "- How will we save the configuration, such that we can scale it to hundreds or thousands of servers?",
      "",
      "Gradle helps us building and packaging all program's dependencies into one Fat JAR, but it falls short in setting up the",
      "operating system. That's outside its scope.",
      "",
      "The answer to these questions is containers. Containers, or as more commonly known Docker, provide a tool that we can",
      "use to bridge this gap and have an environment ready for our program to run on."
    ]
  },
  {
    "type": "subsection",
    "id": "7e8438f1-6bf2-4102-a965-69326f1c6d0e",
    "parameters": [
      "Docker"
    ]
  },
  {
    "type": "markdown",
    "id": "57f41a1e-401f-4527-ac5c-908b54f372d5",
    "parameters": [
      "In a nutshell, a program is packaged into a [Docker Image](https://docs.docker.com/get-started/overview/#docker-objects)",
      ", which is essentially a file system like your laptop's hard disk. The docker image will have files and programs",
      "installed as you have on your laptop. Say for example we want to run a program that requires Java 17, we will install",
      "Java 17 on our laptop so that we can run the application. The same needs to be done with the docker images. In this case",
      "we need to set up Docker image to have Java 17 installed. If another program requires Java 8 or NodeJS 12, we set up a",
      "separate Docker image for the second program. Each program is set up in its own docker image configure as the program",
      "requires it.",
      "",
      "Similar to Java JAR files, Docker creates images, the unit of work for Docker. A Docker image can be started using a",
      "command similar to the following.",
      "",
      "```",
      "$ docker run my-program",
      "```",
      "",
      "Docker takes the image name, _my-program_ in this example, and runs it as a Docker container. Note that here we switched",
      "from _Docker image_ to _Docker container_. An instance of a docker image is called a docker container. A docker",
      "container is a running version of the docker image. If the program produces logs files, these logs files will be in the",
      "docker container (not in the docker image).",
      "",
      "A docker container can start and stop like any operating system. The state of a docker container may or may not be",
      "preserved between different runs. With that said, do not rely on the container state in",
      "production. [Docker Volumes](https://docs.docker.com/storage/volumes/) can be used to address this issue, but this goes",
      "way beyond the scope of this text.",
      "",
      "Docker provides more than just the correct configuration.",
      "",
      "- Limited Access",
      "",
      "  Consider the case where two or more applications are running on the same operating system. One of the applications may",
      "  be able (",
      "  intentionally or unintentionally) be able to access files saved by another application running on the same OS.",
      "",
      "  Someone needs to make sure that an application does not access resources that belong to another application.",
      "",
      "  Secrets used to access resources, such as databases, may be saved as environment variables. Operating system scope",
      "  environment variables are available to all applications running on the same operating system. Any application running",
      "  on the same operating system will be able to access the secrets that belong to another application.",
      "",
      "- Limit attack surface area",
      "",
      "  Say that we have a server with several applications running on it and one of these applications have a security",
      "  vulnerability.",
      "",
      "  Vulnerabilities may come from different places including libraries used by an application or the platform on which it",
      "  runs.",
      "",
      "  The other applications running on the same operating system may be affected by this vulnerability too.",
      "",
      "- Limit Damage",
      "",
      "  An application may misbehave such that it causes the operating system to misbehave, perform poorly or crash",
      "",
      "    - Consume more memory than planned",
      "    - Open too many files handles",
      "    - Open too many threads",
      "",
      "  It is not always easy to configure the operating system such that it limits the resources each application uses."
    ]
  },
  {
    "type": "subsection",
    "id": "e342119a-63fc-4395-a0ac-443f5bc5518b",
    "parameters": [
      "Dockerize Application"
    ]
  },
  {
    "type": "markdown",
    "id": "4a5aef52-8d2d-4153-8bb3-54e232e1b588",
    "parameters": [
      "Dockerising an application is very straight forwards. We simply need to define the operating system that we want our",
      "program to run on and install our program's dependencies,such as the right version of Java.",
      "",
      "But before we start, lets tag our current changes."
    ]
  },
  {
    "type": "git-tag-current-commit",
    "id": "0388f837-6eec-4020-998b-25bec8c3e585",
    "name": "Create starting point",
    "workingDirectory": "hello-world",
    "parameters": [
      "v8.0.0",
      "Start of Dockerize Application"
    ]
  },
  {
    "type": "markdown",
    "id": "50a20de0-0ee4-4995-b918-eedb1f1fd819",
    "parameters": [
      "Docker takes infrastructure as code approach, where the operating system and the programs required are configured in a",
      "text file as code. Like our source files, we can also put the docker configuration in our source repository. Docker uses",
      "a file called `Dockerfile`.  Let's start by creating an empty file named `Dockerfile`."
    ]
  },
  {
    "type": "command",
    "id": "927d2fb2-6f6f-4e1b-82c5-5cd2b59f532e",
    "name": "Create Dockerfile",
    "workingDirectory": "hello-world",
    "parameters": [
      "touch",
      "Dockerfile"
    ]
  },
  {
    "type": "markdown",
    "id": "3877e664-fde0-434c-aee2-ea883f6f5f8a",
    "parameters": [
      "When creating our docker image, we can either start from scratch and install everything ourselves. Some companies do",
      "that as they need to have a tight control on what the docker image contains. That's a bit too much for us and we can use",
      "an existing docker image.",
      "",
      "Let's define a starting point to our docker image."
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "82d2ed2e-b881-47b2-871f-ebe05cadd4ed",
    "name": "Specify the base image",
    "workingDirectory": "hello-world",
    "parameters": [
      "diff --git a/Dockerfile b/Dockerfile",
      "index e69de29..e1b2e50 100644",
      "--- a/Dockerfile",
      "+++ b/Dockerfile",
      "@@ -0,0 +1,1 @@",
      "+FROM openjdk:17-jdk-oracle",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "b44ad256-8974-493b-92a3-c629422aaadf",
    "parameters": [
      "We set our base image using the Docker `FROM`",
      "instruction ([documentation](https://docs.docker.com/engine/reference/builder/#from)). We picked",
      "the `openjdk:17-jdk-oracle`",
      "Docker image as our starting point. We can search for",
      "the [docker hub search page](https://hub.docker.com/search?q=Java&type=image).",
      "",
      "![Java Docker Images](https://i.ibb.co/0ycqTCw/Java-Docker-Images.png)",
      "",
      "There are many Java 17 based images to chose from, such as",
      "",
      "- `openjdk:17-slim-buster`",
      "- `openjdk:17-jdk-oracle`",
      "- `openjdk:17-jdk-slim`",
      "",
      "A full list of available docker images can be",
      "found [here](https://github.com/docker-library/docs/blob/master/openjdk/README.md#supported-tags-and-respective-dockerfile-links)",
      ".",
      "",
      "What are _verified publisher_ and _official images_? Anyone can create and publish images. I have a docker images",
      "published [Docker hub](https://hub.docker.com/u/albertattard). This means that not all Docker images may have been",
      "scrutinised to the same level. As a company, you may want to be careful what Docker images to use as these may have",
      "vulnerabilities or even worse intentional malware or [backdoors](https://en.wikipedia.org/wiki/Backdoor_(computing)),",
      "that will enable the attacker to gain from these Docker images.  _Verified publisher_ and _Official images_ are Docker",
      "images coming from trusted sources, instead from a random individual.",
      "",
      "Should we only use Docker images coming from trusted sources? Ideally yes. While there may be cases where you need to",
      "use a docker image that is not coming from a trusted source, it is highly recommended doing so. A compromised Docker",
      "image can do more damage than simply taking your system down. Say that your Docker image has enough access rights to",
      "create [EC2](https://aws.amazon.com/ec2/) instances on your [AWS account](https://aws.amazon.com/). A compromised Docker",
      "image can take advantage from this insecure configuration and spawn several EC2 instances to mine bitcoin, for example,",
      "at your expense. This is not a farfetched scenario and while it may have not been related to Docker per se companies",
      "have suffered similar",
      "attacks ([reference](https://www.businessinsider.com/hackers-broke-into-amazon-cloud-to-mine-bitcoin-2017-10)).",
      "",
      "How can we protect ourselves from malicious intents? Most projects, if not all, I worked one used internally verified",
      "Docker images, instead of those found in Docker hub. These images were scrutinised and maintained by a team of security",
      "experts that ensured that these Docker images were clean. The Docker images used contained the bare minimum features",
      "installed to minimise the attack surface and are scanned with security tools, like [Snyk](https://snyk.io/) to ensure",
      "that the Docker images do not contain known vulnerabilities.",
      "",
      "How can we get our program into the Docker image? There are several ways to do that, but the simplest option is to copy",
      "it from our `build/libs` folder. ",
      "",
      "Let's set our working folder within the Docker image first."
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "7b98d308-c950-427c-b659-b91fdb3b3968",
    "name": "Specify working directory",
    "workingDirectory": "hello-world",
    "parameters": [
      "diff --git a/Dockerfile b/Dockerfile",
      "index e1b2e50..35372a5 100644",
      "--- a/Dockerfile",
      "+++ b/Dockerfile",
      "@@ -1,1 +1,2 @@",
      " FROM openjdk:17-jdk-oracle",
      "+WORKDIR \"/opt/application\"",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "86638456-9359-47d4-b958-83cc8d9e2a39",
    "parameters": [
      "We used the `WORKDIR` Docker instruction ([documentation](https://docs.docker.com/engine/reference/builder/#workdir)) to",
      "specify our working folder. This can be seen as the default or home folder and unless otherwise specified, Docker will",
      "use this as its folder. Say for example you want to copy file _A_ into the Docker image and you provide a relative path",
      "as the destination. Docker will use the `WORKDIR` as the base of teh provided relative path.",
      "",
      "Does this folder path have to exist in the Docker image? No. Docker will create the folder in the provided path if it",
      "does not exist.",
      "",
      "What's with the `/opt/application` path? We can copy our application anywhere we like, but programs that are not part of",
      "the operating system and not built to enhance the operating system like cURL, are generally placed under the `/opt`",
      "folder ([reference](https://www.pathname.com/fhs/pub/fhs-2.3.html#OPTADDONAPPLICATIONSOFTWAREPACKAGES)). We created a",
      "subfolder names `application` to indicate that this is the main program. The subfolder name could have been anything,",
      "like `app` or `hello-world`, if we liked. Consider a three tier application deployed as a single Docker image. We can",
      "have the following folder structure as shown next.",
      "",
      "```",
      "├── ⋮",
      "├── opt",
      "│   ├── app",
      "│   ├── db",
      "│   └── web",
      "├── ⋮",
      "```",
      "",
      "Let's copy the Fat JAR file into the Docker image?"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "f3f8eb75-621d-425d-aace-907cc72a7406",
    "name": "Copy the fat JAR to the Docker image",
    "workingDirectory": "hello-world",
    "parameters": [
      "diff --git a/Dockerfile b/Dockerfile",
      "index 35372a5..7313e73 100644",
      "--- a/Dockerfile",
      "+++ b/Dockerfile",
      "@@ -1,2 +1,3 @@",
      " FROM openjdk:17-jdk-oracle",
      " WORKDIR \"/opt/application\"",
      "+COPY \"build/libs/hello-world-all.jar\" \"application.jar\"",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "393d05ea-1258-4c42-8bff-28accd32b8f2",
    "parameters": [
      "We copied the Fat JAR from our laptop, `build/libs/hello-world-all.jar`, to the `WORKDIR` set before, and renamed",
      "to `application.jar` using the [`COPY` Docker instruction](https://docs.docker.com/engine/reference/builder/#copy). The",
      "Fat JAR file in the Docker is not called `hello-world-all.jar` anymore.",
      "",
      "Can we copy whole folders? Yes, the `COPY` commands can be used to copy single files, like we did or whole folders.",
      "",
      "We have one last thing to do, that is, set up the starting point. We need to tell Docker to run our program when it",
      "starts. We can do that using",
      "the [`ENTRYPOINT` Docker instruction](https://docs.docker.com/engine/reference/builder/#entrypoint), as shown next."
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "cfb93378-d37e-4d0e-aab3-559e62dbea8a",
    "name": "Specify the entry point",
    "workingDirectory": "hello-world",
    "parameters": [
      "diff --git a/Dockerfile b/Dockerfile",
      "index 7313e73..b684cf7 100644",
      "--- a/Dockerfile",
      "+++ b/Dockerfile",
      "@@ -1,3 +1,4 @@",
      " FROM openjdk:17-jdk-oracle",
      " WORKDIR \"/opt/application\"",
      " COPY \"build/libs/hello-world-all.jar\" \"application.jar\"",
      "+ENTRYPOINT [\"java\", \"-jar\", \"application.jar\"]",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "0362a0f0-2564-4d0e-be76-f14d974a4766",
    "parameters": [
      "Our `Dockerfile` is ready and we can build it.",
      "",
      "Note that you may need to log in to Docker before running the next command, using",
      "your [Docker account](https://hub.docker.com/). You can create a free account if you don't have one.",
      "",
      "There are several ways to log in into Docker.",
      "",
      "- Provide the credentials manually",
      "",
      "  ```",
      "  $ docker login --username <DOCKER-USERNAME> --password-stdin",
      "  Password: xxxxxx",
      "  Login Succeeded",
      "  ```",
      "",
      "  This approach requires manual input and cannot be used in automatic log in scripts.",
      "",
      "- Copy the password in a file and then pipe its content to the `docker login` command.",
      "",
      "  ```",
      "  $ cat ~/my_password.txt | docker login --username <DOCKER-USERNAME> --password-stdin",
      "  ```",
      "",
      "  This is an ideal option if you need to log in automatically, using scripts, as the contents of the file are not",
      "  exposed to the command history.",
      "",
      "- Use an environment variable and then pipe its content to the `docker login` command.",
      "",
      "  ```console",
      "  $ ECHO \"${DOCKER_PASSWORD}\" | docker login --username <DOCKER-USERNAME> --password-stdin",
      "  ```",
      "",
      "  This is an ideal option if you need to log in automatically, using scripts, as the contents of the environment",
      "  variable are not exposed to the command history.",
      "",
      "Refer to the [docker login](https://docs.docker.com/engine/reference/commandline/login/) page for more information about",
      "how to login to docker.",
      "",
      "Let's build our Docker project."
    ]
  },
  {
    "type": "command",
    "id": "63e6f7d5-528d-4aa1-8a5b-cb4dc36a7952",
    "name": "Build Docker image",
    "workingDirectory": "hello-world",
    "parameters": [
      "docker",
      "build",
      ".",
      "--tag",
      "hello-world:v8.0.4"
    ]
  },
  {
    "type": "markdown",
    "id": "05be4ac9-5188-444d-945b-d3a1ed2eaddc",
    "parameters": [
      "Let's understand the command that we just ran. The `docker` command used above has three important arguments",
      "",
      "- `build` - Instructs docker to build the Docker image",
      "  (see [documentation](https://docs.docker.com/engine/reference/commandline/build/))",
      "- `.` - The folder where to find the `Dockerfile`",
      "- `--tag hello-world:v8.0.4` - The name, referred to as _tag_, to be used",
      "",
      "If you remember, when we created our `Dockerfile`, we specified our base image using the `FROM` Docker instruction.",
      "There we specified the Docker image tag.",
      "",
      "How many tags can a Docker image has? The same Docker image can have many tags. It is a common practice to tag a Docker",
      "image with two tags, the version or build hash, such as `v8.0.4`, and the tag _latest_. Using a tag like _latest_ allows",
      "consumer to automatically get your latest Docker image everytime they fetch it. While this seems convenient it is",
      "discouraged as it breaks the [reproducible build](https://en.wikipedia.org/wiki/Reproducible_builds) concept.",
      "",
      "What is _reproducible build_ and why is it important? If we build our program without changing its code, are you",
      "expecting something to change? This is not a tricky question and the answer is, No. Given that nothing changed in the",
      "source code then the output should be the same. If we use tags like _latest_, we have no guarantee that the image built",
      "at a different point in time will be the same as the one built now. That's because the _latest_ tag may now point to a",
      "totally different Docker image. In reproducible build we expect to produce the same output, referred to as binaries, if",
      "the source code has not changed, irrespective of when we build it.",
      "",
      "When Docker build our image, it stores it in the local Docker repository, on our laptop. Let's list all Docker images",
      "that are on our local Docker repository."
    ]
  },
  {
    "type": "command",
    "id": "efabf672-4eab-4cb0-8cf0-6fca680673da",
    "name": "List Docker images",
    "workingDirectory": "hello-world",
    "parameters": [
      "docker",
      "image",
      "ls"
    ]
  },
  {
    "type": "markdown",
    "id": "79f0e5cd-f2e1-4cf1-b6fc-c07f9b8f1018",
    "parameters": [
      "The Docker image list command may return a long list of Docker images. In this list there should be our Docker image.",
      "",
      "```",
      "REPOSITORY            TAG       IMAGE ID       CREATED        SIZE",
      "hello-world           v8.0.4    87a6be004279   1 second ago   472MB",
      "```",
      "",
      "We can run this Docker image using its tag name."
    ]
  },
  {
    "type": "command",
    "id": "cc516ec9-3ffc-4340-ac28-5c8b9a256026",
    "name": "Run Docker image",
    "workingDirectory": "hello-world",
    "parameters": [
      "docker",
      "run",
      "hello-world:v8.0.4"
    ]
  },
  {
    "type": "markdown",
    "id": "28cf794a-a2f8-4e56-aa95-331776f25191",
    "parameters": [
      "We made it!!  We built a Docker image, and then ran it locally.  Let's commit our changes before moving on."
    ]
  },
  {
    "type": "git-commit-changes",
    "id": "b38a9cf6-bf94-4d5c-a160-82849b991562",
    "name": "Commit changes",
    "workingDirectory": "hello-world",
    "parameters": [
      "Dockerize application",
      "v8.0.5"
    ]
  },
  {
    "type": "markdown",
    "id": "51c6c34c-d6c5-47f0-89b3-385582749dda",
    "parameters": [
      "Our Docker image is still sitting in our laptop, and that's not much useful. We can push our Docker image to Docker Hub,",
      "an online repository for Docker images. While for now we may have gone without logging in to Docker, moving forward we",
      "need a Docker Hub account. A Docker Hub account can be created for free from [here](https://hub.docker.com/signup)."
    ]
  },
  {
    "type": "docker-tag-and-push",
    "id": "021ae3d4-7413-4992-92fb-ff147ca3c875",
    "name": "Tag and push Docker image",
    "workingDirectory": "hello-world",
    "parameters": [
      "hello-world:v8.0.4",
      "${DOCKER_USERNAME}/hello-world:v8.0.4"
    ],
    "environmentVariables": [
      "DOCKER_USERNAME"
    ]
  },
  {
    "type": "markdown",
    "id": "dd4bbda9-4296-4e1d-8f91-62020128f7e8",
    "parameters": [
      "Dockerize application conclusion"
    ]
  },
  {
    "type": "command",
    "id": "3f94bf8d-67f5-4402-a025-314545ca2c49",
    "name": "Pull image from Docker Hub",
    "workingDirectory": "hello-world",
    "parameters": [
      "docker",
      "pull",
      "${DOCKER_USERNAME}/hello-world:v8.0.4"
    ],
    "environmentVariables": [
      "DOCKER_USERNAME"
    ]
  },
  {
    "type": "markdown",
    "id": "aefe6269-3228-4350-ba0e-67b1a1d595e6",
    "parameters": [
      "Pull image from Docker Hub"
    ]
  },
  {
    "type": "section",
    "id": "b47fc6df-1f32-4f1b-9b5e-8eca69d2032f",
    "parameters": [
      "Automation"
    ]
  },
  {
    "type": "markdown",
    "id": "06d7e6b3-e374-4a7f-8113-6b20b3279f45",
    "parameters": [
      "Automation"
    ]
  },
  {
    "type": "subsection",
    "id": "acc7c949-c59f-413e-9272-3a29b8b1c3fd",
    "parameters": [
      "GitHub"
    ]
  },
  {
    "type": "markdown",
    "id": "1d5a3a19-3931-4808-9c33-d59c91b12fd9",
    "parameters": [
      "GitHub"
    ]
  },
  {
    "type": "git-tag-current-commit",
    "id": "5af60c73-33e7-4571-ab33-380972b64c89",
    "name": "Create starting point",
    "workingDirectory": "hello-world",
    "parameters": [
      "v9.0.0",
      "Automation using GitHub Actions"
    ]
  },
  {
    "type": "markdown",
    "id": "e7275e9c-4b2c-4cfa-bba4-8c07b93caafa",
    "parameters": [
      "Create repository"
    ]
  },
  {
    "type": "command",
    "id": "ccf353c1-5404-4a63-ad85-642b5d3c7bb5",
    "name": "Delete the repository",
    "workingDirectory": "hello-world",
    "parameters": [
      "hub",
      "delete",
      "--yes",
      "programming--hello-world"
    ],
    "environmentVariables": [
      "GITHUB_TOKEN"
    ],
    "ignoreErrors": true,
    "visible": false
  },
  {
    "type": "command",
    "id": "6fd74fa3-37a8-4aa8-9d54-3cb412d9fed9",
    "name": "Create repository",
    "workingDirectory": "hello-world",
    "parameters": [
      "hub",
      "create",
      "--private",
      "--description",
      "Hello World Application (Java + Git + Gradle + Docker + GitHub Actions)",
      "programming--hello-world"
    ],
    "environmentVariables": [
      "GITHUB_TOKEN"
    ]
  },
  {
    "type": "markdown",
    "id": "3a4aab56-0ca0-44e0-9ab0-7e9c1d642099",
    "parameters": [
      "Push changes to upstream"
    ]
  },
  {
    "type": "command",
    "id": "fcfa7c4c-0cf4-4bd1-9220-95ed22041409",
    "name": "Push changes to upstream",
    "workingDirectory": "hello-world",
    "parameters": [
      "git",
      "push",
      "--set-upstream",
      "origin",
      "main",
      "--tags"
    ]
  },
  {
    "type": "markdown",
    "id": "f2a7c868-62bc-4dc9-b770-c01ddae6709e",
    "parameters": [
      "Create workflows directory"
    ]
  },
  {
    "type": "command",
    "id": "c905cc2b-fbd8-4f06-a723-2780b6855bb4",
    "name": "Create workflows directory",
    "workingDirectory": "hello-world",
    "parameters": [
      "mkdir",
      "-p",
      ".github/workflows"
    ]
  },
  {
    "type": "markdown",
    "id": "6b6dff97-8907-4fe9-b7ea-2ad927b9134b",
    "parameters": [
      "Create the pipeline"
    ]
  },
  {
    "type": "create",
    "id": "2f349469-b731-41a3-a377-e5e2f5d1d4c5",
    "name": "Create build.yml",
    "workingDirectory": "hello-world",
    "parameters": [
      ".github/workflows/build.yml",
      "name: Build Application",
      "",
      "on:",
      "  push:",
      "    branches:",
      "      - main",
      "",
      "concurrency:",
      "  group: programming--hello-world",
      "  cancel-in-progress: false",
      "",
      "jobs:",
      "  build:",
      "    name: Build application",
      "    runs-on: ubuntu-latest",
      "    steps:",
      "      - name: Check out code",
      "        uses: actions/checkout@v2",
      "        with:",
      "          fetch-depth: 0",
      "      - name: Set up JDK",
      "        uses: actions/setup-java@v2",
      "        with:",
      "          java-version: '16'",
      "          distribution: 'adopt'",
      "      - name: Make gradlew executable",
      "        run: chmod +x gradlew",
      "      - name: Build with Gradle",
      "        run: ./gradlew build",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "0d2bacc7-2d44-4655-9ad0-0199d57b5e13",
    "parameters": [
      "Commit and push changes"
    ]
  },
  {
    "type": "git-commit-changes",
    "id": "05ee328a-8a55-40cc-879e-310d64e7bdf2",
    "name": "Commit changes",
    "workingDirectory": "hello-world",
    "parameters": [
      "Add build workflow",
      "v9.0.1"
    ],
    "pushChanges": true
  },
  {
    "type": "markdown",
    "id": "39ec05bd-8cda-454f-8ab2-a8343ef4076c",
    "parameters": [
      "You may need to log in to GitHub",
      "",
      "- A",
      "",
      "  ```console",
      "  $ gh auth login",
      "  ```",
      "",
      "Follow the provided instructions.",
      "",
      "[gh secret set](https://cli.github.com/manual/gh_secret_set)"
    ]
  },
  {
    "type": "command",
    "id": "425df2b1-9b13-4633-bf61-96b9d26004af",
    "name": "Create secret DOCKER_USERNAME",
    "workingDirectory": "hello-world",
    "parameters": [
      "gh",
      "secret",
      "set",
      "DOCKER_USERNAME",
      "--body=${DOCKER_USERNAME}"
    ],
    "environmentVariables": [
      "DOCKER_USERNAME"
    ]
  },
  {
    "type": "command",
    "id": "f9e70f2e-a056-4b90-a1cf-e46ee64bfc16",
    "name": "Create secret DOCKER_PASSWORD",
    "workingDirectory": "hello-world",
    "parameters": [
      "gh",
      "secret",
      "set",
      "DOCKER_PASSWORD",
      "--body=${DOCKER_PASSWORD}"
    ],
    "environmentVariables": [
      "DOCKER_PASSWORD"
    ]
  },
  {
    "type": "markdown",
    "id": "dd89042a-6adc-495f-838e-03b53902f616",
    "parameters": [
      "Create the docker secrets"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "7b04ebde-5b06-417b-b715-fe77cc77a7b4",
    "name": "Push to Docker Hub",
    "workingDirectory": "hello-world",
    "parameters": [
      "diff --git a/.github/workflows/build.yml b/.github/workflows/build.yml",
      "index 74fb8af..36d3d79 100644",
      "--- a/.github/workflows/build.yml",
      "+++ b/.github/workflows/build.yml",
      "@@ -27,3 +27,16 @@ jobs:",
      "         run: chmod +x gradlew",
      "       - name: Build with Gradle",
      "         run: ./gradlew build",
      "+      - name: Extract tag for Docker",
      "+        run: echo \"GIT_TAG=`echo $(git describe --tags --abbrev=0)`\" >> $GITHUB_ENV",
      "+      - name: Log in to Docker Hub",
      "+        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9",
      "+        with:",
      "+          username: ${{ secrets.DOCKER_USERNAME }}",
      "+          password: ${{ secrets.DOCKER_PASSWORD }}",
      "+      - name: Build and push Docker image",
      "+        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc",
      "+        with:",
      "+          context: .",
      "+          push: true",
      "+          tags: ${{ secrets.DOCKER_USERNAME }}/hello-world:${{ env.GIT_TAG }}",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "832f0a48-98c8-4a1a-918b-3b3ecb021596",
    "parameters": [
      "Commit and push changes",
      "",
      "This will trigger the whole pipeline. The code will be compiled and tested and if all goes well, it is then deployed as",
      "a docker image to the Docker Hub repository.  "
    ]
  },
  {
    "type": "git-commit-changes",
    "id": "21edf45d-e895-4b66-bf6f-47007a15e250",
    "name": "Commit changes",
    "workingDirectory": "hello-world",
    "parameters": [
      "Push image to Docker Hub",
      "v9.0.3"
    ],
    "pushChanges": true
  },
  {
    "type": "subsection",
    "id": "77dfdb4f-2841-4b50-8c26-84382c0359df",
    "parameters": [
      "Use the Pipeline"
    ]
  },
  {
    "type": "markdown",
    "id": "4d02c879-4fa7-46cc-82e4-178194ebe991",
    "parameters": [
      "Use the Pipeline"
    ]
  },
  {
    "type": "git-tag-current-commit",
    "id": "d371d5b2-0f0b-40ae-95fc-152e8b14f14a",
    "name": "Create starting point",
    "workingDirectory": "hello-world",
    "parameters": [
      "v9.1.0",
      "Start of Use the Pipeline"
    ]
  },
  {
    "type": "markdown",
    "id": "76430abd-6f0f-44f2-8a2e-aca054430289",
    "parameters": [
      "Change the greeting message"
    ]
  },
  {
    "type": "git-apply-patch",
    "id": "30cd782c-c51d-4ed3-8d51-c87637e0c0c6",
    "name": "Change the greeting message",
    "workingDirectory": "hello-world",
    "parameters": [
      "diff --git a/src/main/java/HelloWorld.java b/src/main/java/HelloWorld.java",
      "index 96cc5bc..5a197f5 100755",
      "--- a/src/main/java/HelloWorld.java",
      "+++ b/src/main/java/HelloWorld.java",
      "@@ -6,6 +6,6 @@ public class HelloWorld {",
      "     private static final Logger LOGGER = LoggerFactory.getLogger(HelloWorld.class);",
      " ",
      "     public static void main(final String[] args) {",
      "-        LOGGER.debug(\"Hello World!!\");",
      "+        LOGGER.debug(\"Hello Albert and James!!\");",
      "     }",
      " }",
      ""
    ]
  },
  {
    "type": "markdown",
    "id": "9f09bd68-9a9f-45ed-92a8-041d0eb00e8c",
    "parameters": [
      "Test the program before pushing the changes"
    ]
  },
  {
    "type": "command",
    "id": "6f941457-99ff-4eb5-9a7e-c92e60284f00",
    "name": "Run test",
    "workingDirectory": "hello-world",
    "parameters": [
      "./gradlew",
      "test"
    ]
  },
  {
    "type": "markdown",
    "id": "33e6f178-bd4a-4f95-9531-5d3982e68f69",
    "parameters": [
      "Commit and push the changes"
    ]
  },
  {
    "type": "git-commit-changes",
    "id": "b776dbca-ebfa-436d-bf93-fbd0ec4fea16",
    "name": "Commit changes",
    "workingDirectory": "hello-world",
    "parameters": [
      "Use the pipeline",
      "v9.1.2"
    ],
    "pushChanges": true
  },
  {
    "type": "markdown",
    "id": "4e49f399-5997-46f5-a8f9-06283f0f239e",
    "parameters": [
      "Wait for the pipeline to finish"
    ]
  },
  {
    "type": "command",
    "id": "3939bf76-cec1-4ec0-a486-217010d6116f",
    "name": "Set up directory",
    "parameters": [
      "docker",
      "run",
      "${DOCKER_USERNAME}/hello-world:v7.1.2"
    ],
    "environmentVariables": [
      "DOCKER_USERNAME"
    ]
  },
  {
    "type": "markdown",
    "id": "15bb29aa-deb9-47e4-883a-54359396d4d4",
    "parameters": [
      "Note that we had only tested our program locally but we had never built a docker image for the new version. This means",
      "that docker needs to download it, as shown next.",
      "",
      "```",
      "...",
      "Unable to find image 'albertattard/hello-world:v7.1.2' locally",
      "v7.1.2: Pulling from albertattard/hello-world",
      "16ec32c2132b: Already exists",
      "3f63509f5b97: Already exists",
      "840a4b5d2030: Already exists",
      "cb3fc809cab2: Pulling fs layer",
      "5d6bad899b89: Pulling fs layer",
      "cb3fc809cab2: Download complete",
      "cb3fc809cab2: Pull complete",
      "5d6bad899b89: Verifying Checksum",
      "5d6bad899b89: Download complete",
      "5d6bad899b89: Pull complete",
      "Digest: sha256:8458cea907e4ab221e632801b7cf22675a3bd3fe48f4310ae069278981c86d5b",
      "Status: Downloaded newer image for albertattard/hello-world:v7.1.2",
      "12:34:56.789 [main] DEBUG HelloWorld - Hello Albert and James!!",
      "...",
      "```",
      "",
      "If the pipeline fails, this image will never be there, and we will not be able to run it. The pipeline succeeded and",
      "thus we were able to run the new docker image with the new changes. The message now read `Hello Albert and James!!`.",
      "",
      "Use the pipeline conclusion"
    ]
  },
  {
    "type": "section",
    "id": "2ffd47b5-804c-4ad5-99d8-0a0412e1c485",
    "parameters": [
      "What else?"
    ]
  },
  {
    "type": "markdown",
    "id": "c40adc1e-80aa-4ad4-a01a-18885a7cf6c7",
    "parameters": [
      "What else?",
      "",
      "Introduce other things, like Kubernetes and Cloud"
    ]
  },
  {
    "type": "subsection",
    "id": "0998d9db-65d0-4ba6-9161-84cdf363675d",
    "parameters": [
      "Kubernetes"
    ]
  },
  {
    "type": "markdown",
    "id": "a04511ea-5cfb-4615-a2f9-b1d95e3c9a29",
    "parameters": [
      "Talk about Kubernetes and the problems it solves",
      "",
      "No need to provide examples"
    ]
  },
  {
    "type": "subsection",
    "id": "7556b762-7664-4930-8326-e6a3c38df486",
    "parameters": [
      "Cloud"
    ]
  },
  {
    "type": "markdown",
    "id": "c1d9083c-486f-4f05-b007-e796c381f4ac",
    "parameters": [
      "Cloud"
    ]
  },
  {
    "type": "subsection",
    "id": "7e5eafb9-2274-4d09-b572-4fe45bdb6f29",
    "parameters": [
      "Infrastructure as Code"
    ]
  },
  {
    "type": "markdown",
    "id": "0cdf0e6e-bc58-4db2-8f77-05de87f598a6",
    "parameters": [
      "Terraform"
    ]
  },
  {
    "type": "section",
    "id": "22140653-d60a-475e-8ad9-bfa4c986d973",
    "parameters": [
      "Summary"
    ]
  },
  {
    "type": "markdown",
    "id": "77e6579b-9ae5-41c7-9e46-1470a99490fb",
    "parameters": [
      "Chapter Summary"
    ]
  }
]